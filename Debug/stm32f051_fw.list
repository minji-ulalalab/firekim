
stm32f051_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b37c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800b440  0800b440  0001b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd74  0800bd74  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd74  0800bd74  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd74  0800bd74  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800bd7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c50  20000278  0800bff0  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  0800bff0  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3f6  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa3  00000000  00000000  0002d692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00030638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  00031248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151c6  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c55  00000000  00000000  00046e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bbcf  00000000  00000000  0005cadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c86aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c4c  00000000  00000000  000c86fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000278 	.word	0x20000278
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b424 	.word	0x0800b424

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000027c 	.word	0x2000027c
 8000104:	0800b424 	.word	0x0800b424

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f87d 	bl	8001550 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 ffcd 	bl	8001400 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f86f 	bl	8001550 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f865 	bl	8001550 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff5 	bl	8001484 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 ffeb 	bl	8001484 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 f90f 	bl	80006e8 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 f89b 	bl	8000610 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f901 	bl	80006e8 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8f7 	bl	80006e8 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f8a7 	bl	800065c <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 f89d 	bl	800065c <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f001 fe83 	bl	8002250 <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 facc 	bl	8001af0 <__aeabi_dsub>
 8000558:	f001 fe7a 	bl	8002250 <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	0005      	movs	r5, r0
 8000570:	000c      	movs	r4, r1
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	0028      	movs	r0, r5
 8000578:	0021      	movs	r1, r4
 800057a:	f7ff ff77 	bl	800046c <__aeabi_dcmplt>
 800057e:	2800      	cmp	r0, #0
 8000580:	d108      	bne.n	8000594 <__aeabi_d2lz+0x28>
 8000582:	0028      	movs	r0, r5
 8000584:	0021      	movs	r1, r4
 8000586:	f000 f80f 	bl	80005a8 <__aeabi_d2ulz>
 800058a:	0002      	movs	r2, r0
 800058c:	000b      	movs	r3, r1
 800058e:	0010      	movs	r0, r2
 8000590:	0019      	movs	r1, r3
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	18e1      	adds	r1, r4, r3
 800059a:	0028      	movs	r0, r5
 800059c:	f000 f804 	bl	80005a8 <__aeabi_d2ulz>
 80005a0:	2300      	movs	r3, #0
 80005a2:	4242      	negs	r2, r0
 80005a4:	418b      	sbcs	r3, r1
 80005a6:	e7f2      	b.n	800058e <__aeabi_d2lz+0x22>

080005a8 <__aeabi_d2ulz>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2200      	movs	r2, #0
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <__aeabi_d2ulz+0x34>)
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	f001 f831 	bl	8001618 <__aeabi_dmul>
 80005b6:	f7ff ffbb 	bl	8000530 <__aeabi_d2uiz>
 80005ba:	0006      	movs	r6, r0
 80005bc:	f001 feae 	bl	800231c <__aeabi_ui2d>
 80005c0:	2200      	movs	r2, #0
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <__aeabi_d2ulz+0x38>)
 80005c4:	f001 f828 	bl	8001618 <__aeabi_dmul>
 80005c8:	0002      	movs	r2, r0
 80005ca:	000b      	movs	r3, r1
 80005cc:	0020      	movs	r0, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f001 fa8e 	bl	8001af0 <__aeabi_dsub>
 80005d4:	f7ff ffac 	bl	8000530 <__aeabi_d2uiz>
 80005d8:	0031      	movs	r1, r6
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	3df00000 	.word	0x3df00000
 80005e0:	41f00000 	.word	0x41f00000

080005e4 <__aeabi_l2d>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0006      	movs	r6, r0
 80005e8:	0008      	movs	r0, r1
 80005ea:	f001 fe67 	bl	80022bc <__aeabi_i2d>
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <__aeabi_l2d+0x28>)
 80005f2:	f001 f811 	bl	8001618 <__aeabi_dmul>
 80005f6:	000d      	movs	r5, r1
 80005f8:	0004      	movs	r4, r0
 80005fa:	0030      	movs	r0, r6
 80005fc:	f001 fe8e 	bl	800231c <__aeabi_ui2d>
 8000600:	002b      	movs	r3, r5
 8000602:	0022      	movs	r2, r4
 8000604:	f000 f8ca 	bl	800079c <__aeabi_dadd>
 8000608:	bd70      	pop	{r4, r5, r6, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	41f00000 	.word	0x41f00000

08000610 <__eqsf2>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	0042      	lsls	r2, r0, #1
 8000614:	0245      	lsls	r5, r0, #9
 8000616:	024e      	lsls	r6, r1, #9
 8000618:	004c      	lsls	r4, r1, #1
 800061a:	0fc3      	lsrs	r3, r0, #31
 800061c:	0a6d      	lsrs	r5, r5, #9
 800061e:	2001      	movs	r0, #1
 8000620:	0e12      	lsrs	r2, r2, #24
 8000622:	0a76      	lsrs	r6, r6, #9
 8000624:	0e24      	lsrs	r4, r4, #24
 8000626:	0fc9      	lsrs	r1, r1, #31
 8000628:	2aff      	cmp	r2, #255	; 0xff
 800062a:	d006      	beq.n	800063a <__eqsf2+0x2a>
 800062c:	2cff      	cmp	r4, #255	; 0xff
 800062e:	d003      	beq.n	8000638 <__eqsf2+0x28>
 8000630:	42a2      	cmp	r2, r4
 8000632:	d101      	bne.n	8000638 <__eqsf2+0x28>
 8000634:	42b5      	cmp	r5, r6
 8000636:	d006      	beq.n	8000646 <__eqsf2+0x36>
 8000638:	bd70      	pop	{r4, r5, r6, pc}
 800063a:	2d00      	cmp	r5, #0
 800063c:	d1fc      	bne.n	8000638 <__eqsf2+0x28>
 800063e:	2cff      	cmp	r4, #255	; 0xff
 8000640:	d1fa      	bne.n	8000638 <__eqsf2+0x28>
 8000642:	2e00      	cmp	r6, #0
 8000644:	d1f8      	bne.n	8000638 <__eqsf2+0x28>
 8000646:	428b      	cmp	r3, r1
 8000648:	d006      	beq.n	8000658 <__eqsf2+0x48>
 800064a:	2001      	movs	r0, #1
 800064c:	2a00      	cmp	r2, #0
 800064e:	d1f3      	bne.n	8000638 <__eqsf2+0x28>
 8000650:	0028      	movs	r0, r5
 8000652:	1e43      	subs	r3, r0, #1
 8000654:	4198      	sbcs	r0, r3
 8000656:	e7ef      	b.n	8000638 <__eqsf2+0x28>
 8000658:	2000      	movs	r0, #0
 800065a:	e7ed      	b.n	8000638 <__eqsf2+0x28>

0800065c <__gesf2>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	0042      	lsls	r2, r0, #1
 8000660:	0245      	lsls	r5, r0, #9
 8000662:	024e      	lsls	r6, r1, #9
 8000664:	004c      	lsls	r4, r1, #1
 8000666:	0fc3      	lsrs	r3, r0, #31
 8000668:	0a6d      	lsrs	r5, r5, #9
 800066a:	0e12      	lsrs	r2, r2, #24
 800066c:	0a76      	lsrs	r6, r6, #9
 800066e:	0e24      	lsrs	r4, r4, #24
 8000670:	0fc8      	lsrs	r0, r1, #31
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d01b      	beq.n	80006ae <__gesf2+0x52>
 8000676:	2cff      	cmp	r4, #255	; 0xff
 8000678:	d00e      	beq.n	8000698 <__gesf2+0x3c>
 800067a:	2a00      	cmp	r2, #0
 800067c:	d11b      	bne.n	80006b6 <__gesf2+0x5a>
 800067e:	2c00      	cmp	r4, #0
 8000680:	d101      	bne.n	8000686 <__gesf2+0x2a>
 8000682:	2e00      	cmp	r6, #0
 8000684:	d01c      	beq.n	80006c0 <__gesf2+0x64>
 8000686:	2d00      	cmp	r5, #0
 8000688:	d00c      	beq.n	80006a4 <__gesf2+0x48>
 800068a:	4283      	cmp	r3, r0
 800068c:	d01c      	beq.n	80006c8 <__gesf2+0x6c>
 800068e:	2102      	movs	r1, #2
 8000690:	1e58      	subs	r0, r3, #1
 8000692:	4008      	ands	r0, r1
 8000694:	3801      	subs	r0, #1
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	2e00      	cmp	r6, #0
 800069a:	d122      	bne.n	80006e2 <__gesf2+0x86>
 800069c:	2a00      	cmp	r2, #0
 800069e:	d1f4      	bne.n	800068a <__gesf2+0x2e>
 80006a0:	2d00      	cmp	r5, #0
 80006a2:	d1f2      	bne.n	800068a <__gesf2+0x2e>
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d1f6      	bne.n	8000696 <__gesf2+0x3a>
 80006a8:	2001      	movs	r0, #1
 80006aa:	4240      	negs	r0, r0
 80006ac:	e7f3      	b.n	8000696 <__gesf2+0x3a>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d117      	bne.n	80006e2 <__gesf2+0x86>
 80006b2:	2cff      	cmp	r4, #255	; 0xff
 80006b4:	d0f0      	beq.n	8000698 <__gesf2+0x3c>
 80006b6:	2c00      	cmp	r4, #0
 80006b8:	d1e7      	bne.n	800068a <__gesf2+0x2e>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d1e5      	bne.n	800068a <__gesf2+0x2e>
 80006be:	e7e6      	b.n	800068e <__gesf2+0x32>
 80006c0:	2000      	movs	r0, #0
 80006c2:	2d00      	cmp	r5, #0
 80006c4:	d0e7      	beq.n	8000696 <__gesf2+0x3a>
 80006c6:	e7e2      	b.n	800068e <__gesf2+0x32>
 80006c8:	42a2      	cmp	r2, r4
 80006ca:	dc05      	bgt.n	80006d8 <__gesf2+0x7c>
 80006cc:	dbea      	blt.n	80006a4 <__gesf2+0x48>
 80006ce:	42b5      	cmp	r5, r6
 80006d0:	d802      	bhi.n	80006d8 <__gesf2+0x7c>
 80006d2:	d3e7      	bcc.n	80006a4 <__gesf2+0x48>
 80006d4:	2000      	movs	r0, #0
 80006d6:	e7de      	b.n	8000696 <__gesf2+0x3a>
 80006d8:	4243      	negs	r3, r0
 80006da:	4158      	adcs	r0, r3
 80006dc:	0040      	lsls	r0, r0, #1
 80006de:	3801      	subs	r0, #1
 80006e0:	e7d9      	b.n	8000696 <__gesf2+0x3a>
 80006e2:	2002      	movs	r0, #2
 80006e4:	4240      	negs	r0, r0
 80006e6:	e7d6      	b.n	8000696 <__gesf2+0x3a>

080006e8 <__lesf2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0042      	lsls	r2, r0, #1
 80006ec:	0245      	lsls	r5, r0, #9
 80006ee:	024e      	lsls	r6, r1, #9
 80006f0:	004c      	lsls	r4, r1, #1
 80006f2:	0fc3      	lsrs	r3, r0, #31
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0a76      	lsrs	r6, r6, #9
 80006fa:	0e24      	lsrs	r4, r4, #24
 80006fc:	0fc8      	lsrs	r0, r1, #31
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d00b      	beq.n	800071a <__lesf2+0x32>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d00d      	beq.n	8000722 <__lesf2+0x3a>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d11f      	bne.n	800074a <__lesf2+0x62>
 800070a:	2c00      	cmp	r4, #0
 800070c:	d116      	bne.n	800073c <__lesf2+0x54>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d114      	bne.n	800073c <__lesf2+0x54>
 8000712:	2000      	movs	r0, #0
 8000714:	2d00      	cmp	r5, #0
 8000716:	d010      	beq.n	800073a <__lesf2+0x52>
 8000718:	e009      	b.n	800072e <__lesf2+0x46>
 800071a:	2d00      	cmp	r5, #0
 800071c:	d10c      	bne.n	8000738 <__lesf2+0x50>
 800071e:	2cff      	cmp	r4, #255	; 0xff
 8000720:	d113      	bne.n	800074a <__lesf2+0x62>
 8000722:	2e00      	cmp	r6, #0
 8000724:	d108      	bne.n	8000738 <__lesf2+0x50>
 8000726:	2a00      	cmp	r2, #0
 8000728:	d008      	beq.n	800073c <__lesf2+0x54>
 800072a:	4283      	cmp	r3, r0
 800072c:	d012      	beq.n	8000754 <__lesf2+0x6c>
 800072e:	2102      	movs	r1, #2
 8000730:	1e58      	subs	r0, r3, #1
 8000732:	4008      	ands	r0, r1
 8000734:	3801      	subs	r0, #1
 8000736:	e000      	b.n	800073a <__lesf2+0x52>
 8000738:	2002      	movs	r0, #2
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	2d00      	cmp	r5, #0
 800073e:	d1f4      	bne.n	800072a <__lesf2+0x42>
 8000740:	2800      	cmp	r0, #0
 8000742:	d1fa      	bne.n	800073a <__lesf2+0x52>
 8000744:	2001      	movs	r0, #1
 8000746:	4240      	negs	r0, r0
 8000748:	e7f7      	b.n	800073a <__lesf2+0x52>
 800074a:	2c00      	cmp	r4, #0
 800074c:	d1ed      	bne.n	800072a <__lesf2+0x42>
 800074e:	2e00      	cmp	r6, #0
 8000750:	d1eb      	bne.n	800072a <__lesf2+0x42>
 8000752:	e7ec      	b.n	800072e <__lesf2+0x46>
 8000754:	42a2      	cmp	r2, r4
 8000756:	dc05      	bgt.n	8000764 <__lesf2+0x7c>
 8000758:	dbf2      	blt.n	8000740 <__lesf2+0x58>
 800075a:	42b5      	cmp	r5, r6
 800075c:	d802      	bhi.n	8000764 <__lesf2+0x7c>
 800075e:	d3ef      	bcc.n	8000740 <__lesf2+0x58>
 8000760:	2000      	movs	r0, #0
 8000762:	e7ea      	b.n	800073a <__lesf2+0x52>
 8000764:	4243      	negs	r3, r0
 8000766:	4158      	adcs	r0, r3
 8000768:	0040      	lsls	r0, r0, #1
 800076a:	3801      	subs	r0, #1
 800076c:	e7e5      	b.n	800073a <__lesf2+0x52>
 800076e:	46c0      	nop			; (mov r8, r8)

08000770 <__aeabi_fcmpun>:
 8000770:	0243      	lsls	r3, r0, #9
 8000772:	024a      	lsls	r2, r1, #9
 8000774:	0040      	lsls	r0, r0, #1
 8000776:	0049      	lsls	r1, r1, #1
 8000778:	0a5b      	lsrs	r3, r3, #9
 800077a:	0a52      	lsrs	r2, r2, #9
 800077c:	0e09      	lsrs	r1, r1, #24
 800077e:	0e00      	lsrs	r0, r0, #24
 8000780:	28ff      	cmp	r0, #255	; 0xff
 8000782:	d006      	beq.n	8000792 <__aeabi_fcmpun+0x22>
 8000784:	2000      	movs	r0, #0
 8000786:	29ff      	cmp	r1, #255	; 0xff
 8000788:	d102      	bne.n	8000790 <__aeabi_fcmpun+0x20>
 800078a:	1e53      	subs	r3, r2, #1
 800078c:	419a      	sbcs	r2, r3
 800078e:	0010      	movs	r0, r2
 8000790:	4770      	bx	lr
 8000792:	38fe      	subs	r0, #254	; 0xfe
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fb      	bne.n	8000790 <__aeabi_fcmpun+0x20>
 8000798:	e7f4      	b.n	8000784 <__aeabi_fcmpun+0x14>
 800079a:	46c0      	nop			; (mov r8, r8)

0800079c <__aeabi_dadd>:
 800079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800079e:	464f      	mov	r7, r9
 80007a0:	4646      	mov	r6, r8
 80007a2:	46d6      	mov	lr, sl
 80007a4:	000d      	movs	r5, r1
 80007a6:	0004      	movs	r4, r0
 80007a8:	b5c0      	push	{r6, r7, lr}
 80007aa:	001f      	movs	r7, r3
 80007ac:	0011      	movs	r1, r2
 80007ae:	0328      	lsls	r0, r5, #12
 80007b0:	0f62      	lsrs	r2, r4, #29
 80007b2:	0a40      	lsrs	r0, r0, #9
 80007b4:	4310      	orrs	r0, r2
 80007b6:	007a      	lsls	r2, r7, #1
 80007b8:	0d52      	lsrs	r2, r2, #21
 80007ba:	00e3      	lsls	r3, r4, #3
 80007bc:	033c      	lsls	r4, r7, #12
 80007be:	4691      	mov	r9, r2
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	0ffa      	lsrs	r2, r7, #31
 80007c4:	0f4f      	lsrs	r7, r1, #29
 80007c6:	006e      	lsls	r6, r5, #1
 80007c8:	4327      	orrs	r7, r4
 80007ca:	4692      	mov	sl, r2
 80007cc:	46b8      	mov	r8, r7
 80007ce:	0d76      	lsrs	r6, r6, #21
 80007d0:	0fed      	lsrs	r5, r5, #31
 80007d2:	00c9      	lsls	r1, r1, #3
 80007d4:	4295      	cmp	r5, r2
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x3e>
 80007d8:	e099      	b.n	800090e <__aeabi_dadd+0x172>
 80007da:	464c      	mov	r4, r9
 80007dc:	1b34      	subs	r4, r6, r4
 80007de:	46a4      	mov	ip, r4
 80007e0:	2c00      	cmp	r4, #0
 80007e2:	dc00      	bgt.n	80007e6 <__aeabi_dadd+0x4a>
 80007e4:	e07c      	b.n	80008e0 <__aeabi_dadd+0x144>
 80007e6:	464a      	mov	r2, r9
 80007e8:	2a00      	cmp	r2, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x52>
 80007ec:	e0b8      	b.n	8000960 <__aeabi_dadd+0x1c4>
 80007ee:	4ac5      	ldr	r2, [pc, #788]	; (8000b04 <__aeabi_dadd+0x368>)
 80007f0:	4296      	cmp	r6, r2
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x5a>
 80007f4:	e11c      	b.n	8000a30 <__aeabi_dadd+0x294>
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	003c      	movs	r4, r7
 80007fa:	0412      	lsls	r2, r2, #16
 80007fc:	4314      	orrs	r4, r2
 80007fe:	46a0      	mov	r8, r4
 8000800:	4662      	mov	r2, ip
 8000802:	2a38      	cmp	r2, #56	; 0x38
 8000804:	dd00      	ble.n	8000808 <__aeabi_dadd+0x6c>
 8000806:	e161      	b.n	8000acc <__aeabi_dadd+0x330>
 8000808:	2a1f      	cmp	r2, #31
 800080a:	dd00      	ble.n	800080e <__aeabi_dadd+0x72>
 800080c:	e1cc      	b.n	8000ba8 <__aeabi_dadd+0x40c>
 800080e:	4664      	mov	r4, ip
 8000810:	2220      	movs	r2, #32
 8000812:	1b12      	subs	r2, r2, r4
 8000814:	4644      	mov	r4, r8
 8000816:	4094      	lsls	r4, r2
 8000818:	000f      	movs	r7, r1
 800081a:	46a1      	mov	r9, r4
 800081c:	4664      	mov	r4, ip
 800081e:	4091      	lsls	r1, r2
 8000820:	40e7      	lsrs	r7, r4
 8000822:	464c      	mov	r4, r9
 8000824:	1e4a      	subs	r2, r1, #1
 8000826:	4191      	sbcs	r1, r2
 8000828:	433c      	orrs	r4, r7
 800082a:	4642      	mov	r2, r8
 800082c:	4321      	orrs	r1, r4
 800082e:	4664      	mov	r4, ip
 8000830:	40e2      	lsrs	r2, r4
 8000832:	1a80      	subs	r0, r0, r2
 8000834:	1a5c      	subs	r4, r3, r1
 8000836:	42a3      	cmp	r3, r4
 8000838:	419b      	sbcs	r3, r3
 800083a:	425f      	negs	r7, r3
 800083c:	1bc7      	subs	r7, r0, r7
 800083e:	023b      	lsls	r3, r7, #8
 8000840:	d400      	bmi.n	8000844 <__aeabi_dadd+0xa8>
 8000842:	e0d0      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000844:	027f      	lsls	r7, r7, #9
 8000846:	0a7f      	lsrs	r7, r7, #9
 8000848:	2f00      	cmp	r7, #0
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0xb2>
 800084c:	e0ff      	b.n	8000a4e <__aeabi_dadd+0x2b2>
 800084e:	0038      	movs	r0, r7
 8000850:	f001 fe12 	bl	8002478 <__clzsi2>
 8000854:	0001      	movs	r1, r0
 8000856:	3908      	subs	r1, #8
 8000858:	2320      	movs	r3, #32
 800085a:	0022      	movs	r2, r4
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	408f      	lsls	r7, r1
 8000860:	40da      	lsrs	r2, r3
 8000862:	408c      	lsls	r4, r1
 8000864:	4317      	orrs	r7, r2
 8000866:	42b1      	cmp	r1, r6
 8000868:	da00      	bge.n	800086c <__aeabi_dadd+0xd0>
 800086a:	e0ff      	b.n	8000a6c <__aeabi_dadd+0x2d0>
 800086c:	1b89      	subs	r1, r1, r6
 800086e:	1c4b      	adds	r3, r1, #1
 8000870:	2b1f      	cmp	r3, #31
 8000872:	dd00      	ble.n	8000876 <__aeabi_dadd+0xda>
 8000874:	e0a8      	b.n	80009c8 <__aeabi_dadd+0x22c>
 8000876:	2220      	movs	r2, #32
 8000878:	0039      	movs	r1, r7
 800087a:	1ad2      	subs	r2, r2, r3
 800087c:	0020      	movs	r0, r4
 800087e:	4094      	lsls	r4, r2
 8000880:	4091      	lsls	r1, r2
 8000882:	40d8      	lsrs	r0, r3
 8000884:	1e62      	subs	r2, r4, #1
 8000886:	4194      	sbcs	r4, r2
 8000888:	40df      	lsrs	r7, r3
 800088a:	2600      	movs	r6, #0
 800088c:	4301      	orrs	r1, r0
 800088e:	430c      	orrs	r4, r1
 8000890:	0763      	lsls	r3, r4, #29
 8000892:	d009      	beq.n	80008a8 <__aeabi_dadd+0x10c>
 8000894:	230f      	movs	r3, #15
 8000896:	4023      	ands	r3, r4
 8000898:	2b04      	cmp	r3, #4
 800089a:	d005      	beq.n	80008a8 <__aeabi_dadd+0x10c>
 800089c:	1d23      	adds	r3, r4, #4
 800089e:	42a3      	cmp	r3, r4
 80008a0:	41a4      	sbcs	r4, r4
 80008a2:	4264      	negs	r4, r4
 80008a4:	193f      	adds	r7, r7, r4
 80008a6:	001c      	movs	r4, r3
 80008a8:	023b      	lsls	r3, r7, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x112>
 80008ac:	e09e      	b.n	80009ec <__aeabi_dadd+0x250>
 80008ae:	4b95      	ldr	r3, [pc, #596]	; (8000b04 <__aeabi_dadd+0x368>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x11c>
 80008b6:	e0b7      	b.n	8000a28 <__aeabi_dadd+0x28c>
 80008b8:	4a93      	ldr	r2, [pc, #588]	; (8000b08 <__aeabi_dadd+0x36c>)
 80008ba:	08e4      	lsrs	r4, r4, #3
 80008bc:	4017      	ands	r7, r2
 80008be:	077b      	lsls	r3, r7, #29
 80008c0:	0571      	lsls	r1, r6, #21
 80008c2:	027f      	lsls	r7, r7, #9
 80008c4:	4323      	orrs	r3, r4
 80008c6:	0b3f      	lsrs	r7, r7, #12
 80008c8:	0d4a      	lsrs	r2, r1, #21
 80008ca:	0512      	lsls	r2, r2, #20
 80008cc:	433a      	orrs	r2, r7
 80008ce:	07ed      	lsls	r5, r5, #31
 80008d0:	432a      	orrs	r2, r5
 80008d2:	0018      	movs	r0, r3
 80008d4:	0011      	movs	r1, r2
 80008d6:	bce0      	pop	{r5, r6, r7}
 80008d8:	46ba      	mov	sl, r7
 80008da:	46b1      	mov	r9, r6
 80008dc:	46a8      	mov	r8, r5
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	2c00      	cmp	r4, #0
 80008e2:	d04b      	beq.n	800097c <__aeabi_dadd+0x1e0>
 80008e4:	464c      	mov	r4, r9
 80008e6:	1ba4      	subs	r4, r4, r6
 80008e8:	46a4      	mov	ip, r4
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d000      	beq.n	80008f0 <__aeabi_dadd+0x154>
 80008ee:	e123      	b.n	8000b38 <__aeabi_dadd+0x39c>
 80008f0:	0004      	movs	r4, r0
 80008f2:	431c      	orrs	r4, r3
 80008f4:	d100      	bne.n	80008f8 <__aeabi_dadd+0x15c>
 80008f6:	e1af      	b.n	8000c58 <__aeabi_dadd+0x4bc>
 80008f8:	4662      	mov	r2, ip
 80008fa:	1e54      	subs	r4, r2, #1
 80008fc:	2a01      	cmp	r2, #1
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x166>
 8000900:	e215      	b.n	8000d2e <__aeabi_dadd+0x592>
 8000902:	4d80      	ldr	r5, [pc, #512]	; (8000b04 <__aeabi_dadd+0x368>)
 8000904:	45ac      	cmp	ip, r5
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x16e>
 8000908:	e1c8      	b.n	8000c9c <__aeabi_dadd+0x500>
 800090a:	46a4      	mov	ip, r4
 800090c:	e11b      	b.n	8000b46 <__aeabi_dadd+0x3aa>
 800090e:	464a      	mov	r2, r9
 8000910:	1ab2      	subs	r2, r6, r2
 8000912:	4694      	mov	ip, r2
 8000914:	2a00      	cmp	r2, #0
 8000916:	dc00      	bgt.n	800091a <__aeabi_dadd+0x17e>
 8000918:	e0ac      	b.n	8000a74 <__aeabi_dadd+0x2d8>
 800091a:	464a      	mov	r2, r9
 800091c:	2a00      	cmp	r2, #0
 800091e:	d043      	beq.n	80009a8 <__aeabi_dadd+0x20c>
 8000920:	4a78      	ldr	r2, [pc, #480]	; (8000b04 <__aeabi_dadd+0x368>)
 8000922:	4296      	cmp	r6, r2
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x18c>
 8000926:	e1af      	b.n	8000c88 <__aeabi_dadd+0x4ec>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	003c      	movs	r4, r7
 800092c:	0412      	lsls	r2, r2, #16
 800092e:	4314      	orrs	r4, r2
 8000930:	46a0      	mov	r8, r4
 8000932:	4662      	mov	r2, ip
 8000934:	2a38      	cmp	r2, #56	; 0x38
 8000936:	dc67      	bgt.n	8000a08 <__aeabi_dadd+0x26c>
 8000938:	2a1f      	cmp	r2, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x1a2>
 800093c:	e15f      	b.n	8000bfe <__aeabi_dadd+0x462>
 800093e:	4647      	mov	r7, r8
 8000940:	3a20      	subs	r2, #32
 8000942:	40d7      	lsrs	r7, r2
 8000944:	4662      	mov	r2, ip
 8000946:	2a20      	cmp	r2, #32
 8000948:	d005      	beq.n	8000956 <__aeabi_dadd+0x1ba>
 800094a:	4664      	mov	r4, ip
 800094c:	2240      	movs	r2, #64	; 0x40
 800094e:	1b12      	subs	r2, r2, r4
 8000950:	4644      	mov	r4, r8
 8000952:	4094      	lsls	r4, r2
 8000954:	4321      	orrs	r1, r4
 8000956:	1e4a      	subs	r2, r1, #1
 8000958:	4191      	sbcs	r1, r2
 800095a:	000c      	movs	r4, r1
 800095c:	433c      	orrs	r4, r7
 800095e:	e057      	b.n	8000a10 <__aeabi_dadd+0x274>
 8000960:	003a      	movs	r2, r7
 8000962:	430a      	orrs	r2, r1
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x1cc>
 8000966:	e105      	b.n	8000b74 <__aeabi_dadd+0x3d8>
 8000968:	0022      	movs	r2, r4
 800096a:	3a01      	subs	r2, #1
 800096c:	2c01      	cmp	r4, #1
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x1d6>
 8000970:	e182      	b.n	8000c78 <__aeabi_dadd+0x4dc>
 8000972:	4c64      	ldr	r4, [pc, #400]	; (8000b04 <__aeabi_dadd+0x368>)
 8000974:	45a4      	cmp	ip, r4
 8000976:	d05b      	beq.n	8000a30 <__aeabi_dadd+0x294>
 8000978:	4694      	mov	ip, r2
 800097a:	e741      	b.n	8000800 <__aeabi_dadd+0x64>
 800097c:	4c63      	ldr	r4, [pc, #396]	; (8000b0c <__aeabi_dadd+0x370>)
 800097e:	1c77      	adds	r7, r6, #1
 8000980:	4227      	tst	r7, r4
 8000982:	d000      	beq.n	8000986 <__aeabi_dadd+0x1ea>
 8000984:	e0c4      	b.n	8000b10 <__aeabi_dadd+0x374>
 8000986:	0004      	movs	r4, r0
 8000988:	431c      	orrs	r4, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_dadd+0x1f4>
 800098e:	e169      	b.n	8000c64 <__aeabi_dadd+0x4c8>
 8000990:	2c00      	cmp	r4, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x1fa>
 8000994:	e1bf      	b.n	8000d16 <__aeabi_dadd+0x57a>
 8000996:	4644      	mov	r4, r8
 8000998:	430c      	orrs	r4, r1
 800099a:	d000      	beq.n	800099e <__aeabi_dadd+0x202>
 800099c:	e1d0      	b.n	8000d40 <__aeabi_dadd+0x5a4>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e029      	b.n	80009fc <__aeabi_dadd+0x260>
 80009a8:	003a      	movs	r2, r7
 80009aa:	430a      	orrs	r2, r1
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dadd+0x214>
 80009ae:	e170      	b.n	8000c92 <__aeabi_dadd+0x4f6>
 80009b0:	4662      	mov	r2, ip
 80009b2:	4664      	mov	r4, ip
 80009b4:	3a01      	subs	r2, #1
 80009b6:	2c01      	cmp	r4, #1
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x220>
 80009ba:	e0e0      	b.n	8000b7e <__aeabi_dadd+0x3e2>
 80009bc:	4c51      	ldr	r4, [pc, #324]	; (8000b04 <__aeabi_dadd+0x368>)
 80009be:	45a4      	cmp	ip, r4
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x228>
 80009c2:	e161      	b.n	8000c88 <__aeabi_dadd+0x4ec>
 80009c4:	4694      	mov	ip, r2
 80009c6:	e7b4      	b.n	8000932 <__aeabi_dadd+0x196>
 80009c8:	003a      	movs	r2, r7
 80009ca:	391f      	subs	r1, #31
 80009cc:	40ca      	lsrs	r2, r1
 80009ce:	0011      	movs	r1, r2
 80009d0:	2b20      	cmp	r3, #32
 80009d2:	d003      	beq.n	80009dc <__aeabi_dadd+0x240>
 80009d4:	2240      	movs	r2, #64	; 0x40
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	409f      	lsls	r7, r3
 80009da:	433c      	orrs	r4, r7
 80009dc:	1e63      	subs	r3, r4, #1
 80009de:	419c      	sbcs	r4, r3
 80009e0:	2700      	movs	r7, #0
 80009e2:	2600      	movs	r6, #0
 80009e4:	430c      	orrs	r4, r1
 80009e6:	0763      	lsls	r3, r4, #29
 80009e8:	d000      	beq.n	80009ec <__aeabi_dadd+0x250>
 80009ea:	e753      	b.n	8000894 <__aeabi_dadd+0xf8>
 80009ec:	46b4      	mov	ip, r6
 80009ee:	08e4      	lsrs	r4, r4, #3
 80009f0:	077b      	lsls	r3, r7, #29
 80009f2:	4323      	orrs	r3, r4
 80009f4:	08f8      	lsrs	r0, r7, #3
 80009f6:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <__aeabi_dadd+0x368>)
 80009f8:	4594      	cmp	ip, r2
 80009fa:	d01d      	beq.n	8000a38 <__aeabi_dadd+0x29c>
 80009fc:	4662      	mov	r2, ip
 80009fe:	0307      	lsls	r7, r0, #12
 8000a00:	0552      	lsls	r2, r2, #21
 8000a02:	0b3f      	lsrs	r7, r7, #12
 8000a04:	0d52      	lsrs	r2, r2, #21
 8000a06:	e760      	b.n	80008ca <__aeabi_dadd+0x12e>
 8000a08:	4644      	mov	r4, r8
 8000a0a:	430c      	orrs	r4, r1
 8000a0c:	1e62      	subs	r2, r4, #1
 8000a0e:	4194      	sbcs	r4, r2
 8000a10:	18e4      	adds	r4, r4, r3
 8000a12:	429c      	cmp	r4, r3
 8000a14:	419b      	sbcs	r3, r3
 8000a16:	425f      	negs	r7, r3
 8000a18:	183f      	adds	r7, r7, r0
 8000a1a:	023b      	lsls	r3, r7, #8
 8000a1c:	d5e3      	bpl.n	80009e6 <__aeabi_dadd+0x24a>
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <__aeabi_dadd+0x368>)
 8000a20:	3601      	adds	r6, #1
 8000a22:	429e      	cmp	r6, r3
 8000a24:	d000      	beq.n	8000a28 <__aeabi_dadd+0x28c>
 8000a26:	e0b5      	b.n	8000b94 <__aeabi_dadd+0x3f8>
 8000a28:	0032      	movs	r2, r6
 8000a2a:	2700      	movs	r7, #0
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e74c      	b.n	80008ca <__aeabi_dadd+0x12e>
 8000a30:	0742      	lsls	r2, r0, #29
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	4313      	orrs	r3, r2
 8000a36:	08c0      	lsrs	r0, r0, #3
 8000a38:	001a      	movs	r2, r3
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dadd+0x2a4>
 8000a3e:	e1e1      	b.n	8000e04 <__aeabi_dadd+0x668>
 8000a40:	2780      	movs	r7, #128	; 0x80
 8000a42:	033f      	lsls	r7, r7, #12
 8000a44:	4307      	orrs	r7, r0
 8000a46:	033f      	lsls	r7, r7, #12
 8000a48:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <__aeabi_dadd+0x368>)
 8000a4a:	0b3f      	lsrs	r7, r7, #12
 8000a4c:	e73d      	b.n	80008ca <__aeabi_dadd+0x12e>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f001 fd12 	bl	8002478 <__clzsi2>
 8000a54:	0001      	movs	r1, r0
 8000a56:	3118      	adds	r1, #24
 8000a58:	291f      	cmp	r1, #31
 8000a5a:	dc00      	bgt.n	8000a5e <__aeabi_dadd+0x2c2>
 8000a5c:	e6fc      	b.n	8000858 <__aeabi_dadd+0xbc>
 8000a5e:	3808      	subs	r0, #8
 8000a60:	4084      	lsls	r4, r0
 8000a62:	0027      	movs	r7, r4
 8000a64:	2400      	movs	r4, #0
 8000a66:	42b1      	cmp	r1, r6
 8000a68:	db00      	blt.n	8000a6c <__aeabi_dadd+0x2d0>
 8000a6a:	e6ff      	b.n	800086c <__aeabi_dadd+0xd0>
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <__aeabi_dadd+0x36c>)
 8000a6e:	1a76      	subs	r6, r6, r1
 8000a70:	4017      	ands	r7, r2
 8000a72:	e70d      	b.n	8000890 <__aeabi_dadd+0xf4>
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d02f      	beq.n	8000ad8 <__aeabi_dadd+0x33c>
 8000a78:	464a      	mov	r2, r9
 8000a7a:	1b92      	subs	r2, r2, r6
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dadd+0x2e8>
 8000a82:	e0ad      	b.n	8000be0 <__aeabi_dadd+0x444>
 8000a84:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <__aeabi_dadd+0x368>)
 8000a86:	4591      	cmp	r9, r2
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dadd+0x2f0>
 8000a8a:	e10f      	b.n	8000cac <__aeabi_dadd+0x510>
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0412      	lsls	r2, r2, #16
 8000a90:	4310      	orrs	r0, r2
 8000a92:	4662      	mov	r2, ip
 8000a94:	2a38      	cmp	r2, #56	; 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x2fe>
 8000a98:	e10f      	b.n	8000cba <__aeabi_dadd+0x51e>
 8000a9a:	2a1f      	cmp	r2, #31
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_dadd+0x304>
 8000a9e:	e180      	b.n	8000da2 <__aeabi_dadd+0x606>
 8000aa0:	4664      	mov	r4, ip
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	001e      	movs	r6, r3
 8000aa6:	1b12      	subs	r2, r2, r4
 8000aa8:	4667      	mov	r7, ip
 8000aaa:	0004      	movs	r4, r0
 8000aac:	4093      	lsls	r3, r2
 8000aae:	4094      	lsls	r4, r2
 8000ab0:	40fe      	lsrs	r6, r7
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	4193      	sbcs	r3, r2
 8000ab6:	40f8      	lsrs	r0, r7
 8000ab8:	4334      	orrs	r4, r6
 8000aba:	431c      	orrs	r4, r3
 8000abc:	4480      	add	r8, r0
 8000abe:	1864      	adds	r4, r4, r1
 8000ac0:	428c      	cmp	r4, r1
 8000ac2:	41bf      	sbcs	r7, r7
 8000ac4:	427f      	negs	r7, r7
 8000ac6:	464e      	mov	r6, r9
 8000ac8:	4447      	add	r7, r8
 8000aca:	e7a6      	b.n	8000a1a <__aeabi_dadd+0x27e>
 8000acc:	4642      	mov	r2, r8
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	1e4a      	subs	r2, r1, #1
 8000ad4:	4191      	sbcs	r1, r2
 8000ad6:	e6ad      	b.n	8000834 <__aeabi_dadd+0x98>
 8000ad8:	4c0c      	ldr	r4, [pc, #48]	; (8000b0c <__aeabi_dadd+0x370>)
 8000ada:	1c72      	adds	r2, r6, #1
 8000adc:	4222      	tst	r2, r4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_dadd+0x346>
 8000ae0:	e0a1      	b.n	8000c26 <__aeabi_dadd+0x48a>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dadd+0x350>
 8000aea:	e0fa      	b.n	8000ce2 <__aeabi_dadd+0x546>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x356>
 8000af0:	e145      	b.n	8000d7e <__aeabi_dadd+0x5e2>
 8000af2:	003a      	movs	r2, r7
 8000af4:	430a      	orrs	r2, r1
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x35e>
 8000af8:	e146      	b.n	8000d88 <__aeabi_dadd+0x5ec>
 8000afa:	0742      	lsls	r2, r0, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	08c0      	lsrs	r0, r0, #3
 8000b02:	e77b      	b.n	80009fc <__aeabi_dadd+0x260>
 8000b04:	000007ff 	.word	0x000007ff
 8000b08:	ff7fffff 	.word	0xff7fffff
 8000b0c:	000007fe 	.word	0x000007fe
 8000b10:	4647      	mov	r7, r8
 8000b12:	1a5c      	subs	r4, r3, r1
 8000b14:	1bc2      	subs	r2, r0, r7
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	41bf      	sbcs	r7, r7
 8000b1a:	427f      	negs	r7, r7
 8000b1c:	46b9      	mov	r9, r7
 8000b1e:	0017      	movs	r7, r2
 8000b20:	464a      	mov	r2, r9
 8000b22:	1abf      	subs	r7, r7, r2
 8000b24:	023a      	lsls	r2, r7, #8
 8000b26:	d500      	bpl.n	8000b2a <__aeabi_dadd+0x38e>
 8000b28:	e08d      	b.n	8000c46 <__aeabi_dadd+0x4aa>
 8000b2a:	0023      	movs	r3, r4
 8000b2c:	433b      	orrs	r3, r7
 8000b2e:	d000      	beq.n	8000b32 <__aeabi_dadd+0x396>
 8000b30:	e68a      	b.n	8000848 <__aeabi_dadd+0xac>
 8000b32:	2000      	movs	r0, #0
 8000b34:	2500      	movs	r5, #0
 8000b36:	e761      	b.n	80009fc <__aeabi_dadd+0x260>
 8000b38:	4cb4      	ldr	r4, [pc, #720]	; (8000e0c <__aeabi_dadd+0x670>)
 8000b3a:	45a1      	cmp	r9, r4
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x3a4>
 8000b3e:	e0ad      	b.n	8000c9c <__aeabi_dadd+0x500>
 8000b40:	2480      	movs	r4, #128	; 0x80
 8000b42:	0424      	lsls	r4, r4, #16
 8000b44:	4320      	orrs	r0, r4
 8000b46:	4664      	mov	r4, ip
 8000b48:	2c38      	cmp	r4, #56	; 0x38
 8000b4a:	dc3d      	bgt.n	8000bc8 <__aeabi_dadd+0x42c>
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	2c1f      	cmp	r4, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0x3b8>
 8000b52:	e0b7      	b.n	8000cc4 <__aeabi_dadd+0x528>
 8000b54:	2520      	movs	r5, #32
 8000b56:	001e      	movs	r6, r3
 8000b58:	1b2d      	subs	r5, r5, r4
 8000b5a:	0004      	movs	r4, r0
 8000b5c:	40ab      	lsls	r3, r5
 8000b5e:	40ac      	lsls	r4, r5
 8000b60:	40d6      	lsrs	r6, r2
 8000b62:	40d0      	lsrs	r0, r2
 8000b64:	4642      	mov	r2, r8
 8000b66:	1e5d      	subs	r5, r3, #1
 8000b68:	41ab      	sbcs	r3, r5
 8000b6a:	4334      	orrs	r4, r6
 8000b6c:	1a12      	subs	r2, r2, r0
 8000b6e:	4690      	mov	r8, r2
 8000b70:	4323      	orrs	r3, r4
 8000b72:	e02c      	b.n	8000bce <__aeabi_dadd+0x432>
 8000b74:	0742      	lsls	r2, r0, #29
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	08c0      	lsrs	r0, r0, #3
 8000b7c:	e73b      	b.n	80009f6 <__aeabi_dadd+0x25a>
 8000b7e:	185c      	adds	r4, r3, r1
 8000b80:	429c      	cmp	r4, r3
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	4440      	add	r0, r8
 8000b86:	425b      	negs	r3, r3
 8000b88:	18c7      	adds	r7, r0, r3
 8000b8a:	2601      	movs	r6, #1
 8000b8c:	023b      	lsls	r3, r7, #8
 8000b8e:	d400      	bmi.n	8000b92 <__aeabi_dadd+0x3f6>
 8000b90:	e729      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000b92:	2602      	movs	r6, #2
 8000b94:	4a9e      	ldr	r2, [pc, #632]	; (8000e10 <__aeabi_dadd+0x674>)
 8000b96:	0863      	lsrs	r3, r4, #1
 8000b98:	4017      	ands	r7, r2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4014      	ands	r4, r2
 8000b9e:	431c      	orrs	r4, r3
 8000ba0:	07fb      	lsls	r3, r7, #31
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	087f      	lsrs	r7, r7, #1
 8000ba6:	e673      	b.n	8000890 <__aeabi_dadd+0xf4>
 8000ba8:	4644      	mov	r4, r8
 8000baa:	3a20      	subs	r2, #32
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	4662      	mov	r2, ip
 8000bb0:	2a20      	cmp	r2, #32
 8000bb2:	d005      	beq.n	8000bc0 <__aeabi_dadd+0x424>
 8000bb4:	4667      	mov	r7, ip
 8000bb6:	2240      	movs	r2, #64	; 0x40
 8000bb8:	1bd2      	subs	r2, r2, r7
 8000bba:	4647      	mov	r7, r8
 8000bbc:	4097      	lsls	r7, r2
 8000bbe:	4339      	orrs	r1, r7
 8000bc0:	1e4a      	subs	r2, r1, #1
 8000bc2:	4191      	sbcs	r1, r2
 8000bc4:	4321      	orrs	r1, r4
 8000bc6:	e635      	b.n	8000834 <__aeabi_dadd+0x98>
 8000bc8:	4303      	orrs	r3, r0
 8000bca:	1e58      	subs	r0, r3, #1
 8000bcc:	4183      	sbcs	r3, r0
 8000bce:	1acc      	subs	r4, r1, r3
 8000bd0:	42a1      	cmp	r1, r4
 8000bd2:	41bf      	sbcs	r7, r7
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	427f      	negs	r7, r7
 8000bd8:	4655      	mov	r5, sl
 8000bda:	464e      	mov	r6, r9
 8000bdc:	1bdf      	subs	r7, r3, r7
 8000bde:	e62e      	b.n	800083e <__aeabi_dadd+0xa2>
 8000be0:	0002      	movs	r2, r0
 8000be2:	431a      	orrs	r2, r3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x44c>
 8000be6:	e0bd      	b.n	8000d64 <__aeabi_dadd+0x5c8>
 8000be8:	4662      	mov	r2, ip
 8000bea:	4664      	mov	r4, ip
 8000bec:	3a01      	subs	r2, #1
 8000bee:	2c01      	cmp	r4, #1
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x458>
 8000bf2:	e0e5      	b.n	8000dc0 <__aeabi_dadd+0x624>
 8000bf4:	4c85      	ldr	r4, [pc, #532]	; (8000e0c <__aeabi_dadd+0x670>)
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	d058      	beq.n	8000cac <__aeabi_dadd+0x510>
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	e749      	b.n	8000a92 <__aeabi_dadd+0x2f6>
 8000bfe:	4664      	mov	r4, ip
 8000c00:	2220      	movs	r2, #32
 8000c02:	1b12      	subs	r2, r2, r4
 8000c04:	4644      	mov	r4, r8
 8000c06:	4094      	lsls	r4, r2
 8000c08:	000f      	movs	r7, r1
 8000c0a:	46a1      	mov	r9, r4
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	4091      	lsls	r1, r2
 8000c10:	40e7      	lsrs	r7, r4
 8000c12:	464c      	mov	r4, r9
 8000c14:	1e4a      	subs	r2, r1, #1
 8000c16:	4191      	sbcs	r1, r2
 8000c18:	433c      	orrs	r4, r7
 8000c1a:	4642      	mov	r2, r8
 8000c1c:	430c      	orrs	r4, r1
 8000c1e:	4661      	mov	r1, ip
 8000c20:	40ca      	lsrs	r2, r1
 8000c22:	1880      	adds	r0, r0, r2
 8000c24:	e6f4      	b.n	8000a10 <__aeabi_dadd+0x274>
 8000c26:	4c79      	ldr	r4, [pc, #484]	; (8000e0c <__aeabi_dadd+0x670>)
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x492>
 8000c2c:	e6fd      	b.n	8000a2a <__aeabi_dadd+0x28e>
 8000c2e:	1859      	adds	r1, r3, r1
 8000c30:	4299      	cmp	r1, r3
 8000c32:	419b      	sbcs	r3, r3
 8000c34:	4440      	add	r0, r8
 8000c36:	425f      	negs	r7, r3
 8000c38:	19c7      	adds	r7, r0, r7
 8000c3a:	07fc      	lsls	r4, r7, #31
 8000c3c:	0849      	lsrs	r1, r1, #1
 8000c3e:	0016      	movs	r6, r2
 8000c40:	430c      	orrs	r4, r1
 8000c42:	087f      	lsrs	r7, r7, #1
 8000c44:	e6cf      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000c46:	1acc      	subs	r4, r1, r3
 8000c48:	42a1      	cmp	r1, r4
 8000c4a:	41bf      	sbcs	r7, r7
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	427f      	negs	r7, r7
 8000c50:	1a18      	subs	r0, r3, r0
 8000c52:	4655      	mov	r5, sl
 8000c54:	1bc7      	subs	r7, r0, r7
 8000c56:	e5f7      	b.n	8000848 <__aeabi_dadd+0xac>
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	077b      	lsls	r3, r7, #29
 8000c5c:	4655      	mov	r5, sl
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	08f8      	lsrs	r0, r7, #3
 8000c62:	e6c8      	b.n	80009f6 <__aeabi_dadd+0x25a>
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	d000      	beq.n	8000c6a <__aeabi_dadd+0x4ce>
 8000c68:	e081      	b.n	8000d6e <__aeabi_dadd+0x5d2>
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	d115      	bne.n	8000c9c <__aeabi_dadd+0x500>
 8000c70:	2080      	movs	r0, #128	; 0x80
 8000c72:	2500      	movs	r5, #0
 8000c74:	0300      	lsls	r0, r0, #12
 8000c76:	e6e3      	b.n	8000a40 <__aeabi_dadd+0x2a4>
 8000c78:	1a5c      	subs	r4, r3, r1
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	419b      	sbcs	r3, r3
 8000c7e:	1bc7      	subs	r7, r0, r7
 8000c80:	425b      	negs	r3, r3
 8000c82:	2601      	movs	r6, #1
 8000c84:	1aff      	subs	r7, r7, r3
 8000c86:	e5da      	b.n	800083e <__aeabi_dadd+0xa2>
 8000c88:	0742      	lsls	r2, r0, #29
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	e6d2      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000c92:	0742      	lsls	r2, r0, #29
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	08c0      	lsrs	r0, r0, #3
 8000c9a:	e6ac      	b.n	80009f6 <__aeabi_dadd+0x25a>
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	08c9      	lsrs	r1, r1, #3
 8000ca2:	075b      	lsls	r3, r3, #29
 8000ca4:	4655      	mov	r5, sl
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	08d0      	lsrs	r0, r2, #3
 8000caa:	e6c5      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000cac:	4643      	mov	r3, r8
 8000cae:	4642      	mov	r2, r8
 8000cb0:	075b      	lsls	r3, r3, #29
 8000cb2:	08c9      	lsrs	r1, r1, #3
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	08d0      	lsrs	r0, r2, #3
 8000cb8:	e6be      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	001c      	movs	r4, r3
 8000cbe:	1e63      	subs	r3, r4, #1
 8000cc0:	419c      	sbcs	r4, r3
 8000cc2:	e6fc      	b.n	8000abe <__aeabi_dadd+0x322>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	3c20      	subs	r4, #32
 8000cc8:	40e2      	lsrs	r2, r4
 8000cca:	0014      	movs	r4, r2
 8000ccc:	4662      	mov	r2, ip
 8000cce:	2a20      	cmp	r2, #32
 8000cd0:	d003      	beq.n	8000cda <__aeabi_dadd+0x53e>
 8000cd2:	2540      	movs	r5, #64	; 0x40
 8000cd4:	1aad      	subs	r5, r5, r2
 8000cd6:	40a8      	lsls	r0, r5
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	1e58      	subs	r0, r3, #1
 8000cdc:	4183      	sbcs	r3, r0
 8000cde:	4323      	orrs	r3, r4
 8000ce0:	e775      	b.n	8000bce <__aeabi_dadd+0x432>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d0e2      	beq.n	8000cac <__aeabi_dadd+0x510>
 8000ce6:	003a      	movs	r2, r7
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	d0cd      	beq.n	8000c88 <__aeabi_dadd+0x4ec>
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	08c0      	lsrs	r0, r0, #3
 8000cf6:	0312      	lsls	r2, r2, #12
 8000cf8:	4210      	tst	r0, r2
 8000cfa:	d006      	beq.n	8000d0a <__aeabi_dadd+0x56e>
 8000cfc:	08fc      	lsrs	r4, r7, #3
 8000cfe:	4214      	tst	r4, r2
 8000d00:	d103      	bne.n	8000d0a <__aeabi_dadd+0x56e>
 8000d02:	0020      	movs	r0, r4
 8000d04:	08cb      	lsrs	r3, r1, #3
 8000d06:	077a      	lsls	r2, r7, #29
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	0f5a      	lsrs	r2, r3, #29
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	0752      	lsls	r2, r2, #29
 8000d10:	08db      	lsrs	r3, r3, #3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	e690      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000d16:	4643      	mov	r3, r8
 8000d18:	430b      	orrs	r3, r1
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_dadd+0x582>
 8000d1c:	e709      	b.n	8000b32 <__aeabi_dadd+0x396>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	4642      	mov	r2, r8
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	075b      	lsls	r3, r3, #29
 8000d26:	4655      	mov	r5, sl
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	08d0      	lsrs	r0, r2, #3
 8000d2c:	e666      	b.n	80009fc <__aeabi_dadd+0x260>
 8000d2e:	1acc      	subs	r4, r1, r3
 8000d30:	42a1      	cmp	r1, r4
 8000d32:	4189      	sbcs	r1, r1
 8000d34:	1a3f      	subs	r7, r7, r0
 8000d36:	4249      	negs	r1, r1
 8000d38:	4655      	mov	r5, sl
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	1a7f      	subs	r7, r7, r1
 8000d3e:	e57e      	b.n	800083e <__aeabi_dadd+0xa2>
 8000d40:	4642      	mov	r2, r8
 8000d42:	1a5c      	subs	r4, r3, r1
 8000d44:	1a87      	subs	r7, r0, r2
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	4192      	sbcs	r2, r2
 8000d4a:	4252      	negs	r2, r2
 8000d4c:	1abf      	subs	r7, r7, r2
 8000d4e:	023a      	lsls	r2, r7, #8
 8000d50:	d53d      	bpl.n	8000dce <__aeabi_dadd+0x632>
 8000d52:	1acc      	subs	r4, r1, r3
 8000d54:	42a1      	cmp	r1, r4
 8000d56:	4189      	sbcs	r1, r1
 8000d58:	4643      	mov	r3, r8
 8000d5a:	4249      	negs	r1, r1
 8000d5c:	1a1f      	subs	r7, r3, r0
 8000d5e:	4655      	mov	r5, sl
 8000d60:	1a7f      	subs	r7, r7, r1
 8000d62:	e595      	b.n	8000890 <__aeabi_dadd+0xf4>
 8000d64:	077b      	lsls	r3, r7, #29
 8000d66:	08c9      	lsrs	r1, r1, #3
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	08f8      	lsrs	r0, r7, #3
 8000d6c:	e643      	b.n	80009f6 <__aeabi_dadd+0x25a>
 8000d6e:	4644      	mov	r4, r8
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	430c      	orrs	r4, r1
 8000d74:	d130      	bne.n	8000dd8 <__aeabi_dadd+0x63c>
 8000d76:	0742      	lsls	r2, r0, #29
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	08c0      	lsrs	r0, r0, #3
 8000d7c:	e65c      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000d7e:	077b      	lsls	r3, r7, #29
 8000d80:	08c9      	lsrs	r1, r1, #3
 8000d82:	430b      	orrs	r3, r1
 8000d84:	08f8      	lsrs	r0, r7, #3
 8000d86:	e639      	b.n	80009fc <__aeabi_dadd+0x260>
 8000d88:	185c      	adds	r4, r3, r1
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	419b      	sbcs	r3, r3
 8000d8e:	4440      	add	r0, r8
 8000d90:	425b      	negs	r3, r3
 8000d92:	18c7      	adds	r7, r0, r3
 8000d94:	023b      	lsls	r3, r7, #8
 8000d96:	d400      	bmi.n	8000d9a <__aeabi_dadd+0x5fe>
 8000d98:	e625      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <__aeabi_dadd+0x674>)
 8000d9c:	2601      	movs	r6, #1
 8000d9e:	401f      	ands	r7, r3
 8000da0:	e621      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000da2:	0004      	movs	r4, r0
 8000da4:	3a20      	subs	r2, #32
 8000da6:	40d4      	lsrs	r4, r2
 8000da8:	4662      	mov	r2, ip
 8000daa:	2a20      	cmp	r2, #32
 8000dac:	d004      	beq.n	8000db8 <__aeabi_dadd+0x61c>
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	4666      	mov	r6, ip
 8000db2:	1b92      	subs	r2, r2, r6
 8000db4:	4090      	lsls	r0, r2
 8000db6:	4303      	orrs	r3, r0
 8000db8:	1e5a      	subs	r2, r3, #1
 8000dba:	4193      	sbcs	r3, r2
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	e67e      	b.n	8000abe <__aeabi_dadd+0x322>
 8000dc0:	185c      	adds	r4, r3, r1
 8000dc2:	428c      	cmp	r4, r1
 8000dc4:	4189      	sbcs	r1, r1
 8000dc6:	4440      	add	r0, r8
 8000dc8:	4249      	negs	r1, r1
 8000dca:	1847      	adds	r7, r0, r1
 8000dcc:	e6dd      	b.n	8000b8a <__aeabi_dadd+0x3ee>
 8000dce:	0023      	movs	r3, r4
 8000dd0:	433b      	orrs	r3, r7
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_dadd+0x63a>
 8000dd4:	e6ad      	b.n	8000b32 <__aeabi_dadd+0x396>
 8000dd6:	e606      	b.n	80009e6 <__aeabi_dadd+0x24a>
 8000dd8:	0744      	lsls	r4, r0, #29
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	2480      	movs	r4, #128	; 0x80
 8000dde:	08c0      	lsrs	r0, r0, #3
 8000de0:	0324      	lsls	r4, r4, #12
 8000de2:	4220      	tst	r0, r4
 8000de4:	d008      	beq.n	8000df8 <__aeabi_dadd+0x65c>
 8000de6:	4642      	mov	r2, r8
 8000de8:	08d6      	lsrs	r6, r2, #3
 8000dea:	4226      	tst	r6, r4
 8000dec:	d104      	bne.n	8000df8 <__aeabi_dadd+0x65c>
 8000dee:	4655      	mov	r5, sl
 8000df0:	0030      	movs	r0, r6
 8000df2:	08cb      	lsrs	r3, r1, #3
 8000df4:	0751      	lsls	r1, r2, #29
 8000df6:	430b      	orrs	r3, r1
 8000df8:	0f5a      	lsrs	r2, r3, #29
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	0752      	lsls	r2, r2, #29
 8000e00:	4313      	orrs	r3, r2
 8000e02:	e619      	b.n	8000a38 <__aeabi_dadd+0x29c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	4a01      	ldr	r2, [pc, #4]	; (8000e0c <__aeabi_dadd+0x670>)
 8000e08:	001f      	movs	r7, r3
 8000e0a:	e55e      	b.n	80008ca <__aeabi_dadd+0x12e>
 8000e0c:	000007ff 	.word	0x000007ff
 8000e10:	ff7fffff 	.word	0xff7fffff

08000e14 <__aeabi_ddiv>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	4681      	mov	r9, r0
 8000e22:	0005      	movs	r5, r0
 8000e24:	030c      	lsls	r4, r1, #12
 8000e26:	0048      	lsls	r0, r1, #1
 8000e28:	4692      	mov	sl, r2
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	0b24      	lsrs	r4, r4, #12
 8000e30:	0d40      	lsrs	r0, r0, #21
 8000e32:	0fce      	lsrs	r6, r1, #31
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x26>
 8000e38:	e156      	b.n	80010e8 <__aeabi_ddiv+0x2d4>
 8000e3a:	4bd4      	ldr	r3, [pc, #848]	; (800118c <__aeabi_ddiv+0x378>)
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2e>
 8000e40:	e172      	b.n	8001128 <__aeabi_ddiv+0x314>
 8000e42:	0f6b      	lsrs	r3, r5, #29
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	431c      	orrs	r4, r3
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	4698      	mov	r8, r3
 8000e50:	4bcf      	ldr	r3, [pc, #828]	; (8001190 <__aeabi_ddiv+0x37c>)
 8000e52:	00ed      	lsls	r5, r5, #3
 8000e54:	469b      	mov	fp, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	4699      	mov	r9, r3
 8000e5a:	4483      	add	fp, r0
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	033c      	lsls	r4, r7, #12
 8000e60:	007b      	lsls	r3, r7, #1
 8000e62:	4650      	mov	r0, sl
 8000e64:	0b24      	lsrs	r4, r4, #12
 8000e66:	0d5b      	lsrs	r3, r3, #21
 8000e68:	0fff      	lsrs	r7, r7, #31
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_ddiv+0x5c>
 8000e6e:	e11f      	b.n	80010b0 <__aeabi_ddiv+0x29c>
 8000e70:	4ac6      	ldr	r2, [pc, #792]	; (800118c <__aeabi_ddiv+0x378>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x64>
 8000e76:	e162      	b.n	800113e <__aeabi_ddiv+0x32a>
 8000e78:	49c5      	ldr	r1, [pc, #788]	; (8001190 <__aeabi_ddiv+0x37c>)
 8000e7a:	0f42      	lsrs	r2, r0, #29
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	00e4      	lsls	r4, r4, #3
 8000e80:	4659      	mov	r1, fp
 8000e82:	4314      	orrs	r4, r2
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	4463      	add	r3, ip
 8000e88:	0412      	lsls	r2, r2, #16
 8000e8a:	1acb      	subs	r3, r1, r3
 8000e8c:	4314      	orrs	r4, r2
 8000e8e:	469b      	mov	fp, r3
 8000e90:	00c2      	lsls	r2, r0, #3
 8000e92:	2000      	movs	r0, #0
 8000e94:	0033      	movs	r3, r6
 8000e96:	407b      	eors	r3, r7
 8000e98:	469a      	mov	sl, r3
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d827      	bhi.n	8000ef0 <__aeabi_ddiv+0xdc>
 8000ea0:	49bc      	ldr	r1, [pc, #752]	; (8001194 <__aeabi_ddiv+0x380>)
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	58cb      	ldr	r3, [r1, r3]
 8000ea6:	469f      	mov	pc, r3
 8000ea8:	46b2      	mov	sl, r6
 8000eaa:	9b00      	ldr	r3, [sp, #0]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d016      	beq.n	8000ede <__aeabi_ddiv+0xca>
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_ddiv+0xa2>
 8000eb4:	e28e      	b.n	80013d4 <__aeabi_ddiv+0x5c0>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_ddiv+0xa8>
 8000eba:	e0d9      	b.n	8001070 <__aeabi_ddiv+0x25c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	4652      	mov	r2, sl
 8000ec4:	051b      	lsls	r3, r3, #20
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	07d2      	lsls	r2, r2, #31
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	0028      	movs	r0, r5
 8000ece:	0019      	movs	r1, r3
 8000ed0:	b005      	add	sp, #20
 8000ed2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ed4:	46bb      	mov	fp, r7
 8000ed6:	46b2      	mov	sl, r6
 8000ed8:	46a9      	mov	r9, r5
 8000eda:	46a0      	mov	r8, r4
 8000edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ede:	2400      	movs	r4, #0
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	4baa      	ldr	r3, [pc, #680]	; (800118c <__aeabi_ddiv+0x378>)
 8000ee4:	e7ed      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 8000ee6:	46ba      	mov	sl, r7
 8000ee8:	46a0      	mov	r8, r4
 8000eea:	0015      	movs	r5, r2
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	e7dc      	b.n	8000eaa <__aeabi_ddiv+0x96>
 8000ef0:	4544      	cmp	r4, r8
 8000ef2:	d200      	bcs.n	8000ef6 <__aeabi_ddiv+0xe2>
 8000ef4:	e1c7      	b.n	8001286 <__aeabi_ddiv+0x472>
 8000ef6:	d100      	bne.n	8000efa <__aeabi_ddiv+0xe6>
 8000ef8:	e1c2      	b.n	8001280 <__aeabi_ddiv+0x46c>
 8000efa:	2301      	movs	r3, #1
 8000efc:	425b      	negs	r3, r3
 8000efe:	469c      	mov	ip, r3
 8000f00:	002e      	movs	r6, r5
 8000f02:	4640      	mov	r0, r8
 8000f04:	2500      	movs	r5, #0
 8000f06:	44e3      	add	fp, ip
 8000f08:	0223      	lsls	r3, r4, #8
 8000f0a:	0e14      	lsrs	r4, r2, #24
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	4699      	mov	r9, r3
 8000f12:	0423      	lsls	r3, r4, #16
 8000f14:	0c1f      	lsrs	r7, r3, #16
 8000f16:	0212      	lsls	r2, r2, #8
 8000f18:	4649      	mov	r1, r9
 8000f1a:	9200      	str	r2, [sp, #0]
 8000f1c:	9701      	str	r7, [sp, #4]
 8000f1e:	f7ff f99f 	bl	8000260 <__aeabi_uidivmod>
 8000f22:	0002      	movs	r2, r0
 8000f24:	437a      	muls	r2, r7
 8000f26:	040b      	lsls	r3, r1, #16
 8000f28:	0c31      	lsrs	r1, r6, #16
 8000f2a:	4680      	mov	r8, r0
 8000f2c:	4319      	orrs	r1, r3
 8000f2e:	428a      	cmp	r2, r1
 8000f30:	d907      	bls.n	8000f42 <__aeabi_ddiv+0x12e>
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
 8000f36:	469c      	mov	ip, r3
 8000f38:	1909      	adds	r1, r1, r4
 8000f3a:	44e0      	add	r8, ip
 8000f3c:	428c      	cmp	r4, r1
 8000f3e:	d800      	bhi.n	8000f42 <__aeabi_ddiv+0x12e>
 8000f40:	e207      	b.n	8001352 <__aeabi_ddiv+0x53e>
 8000f42:	1a88      	subs	r0, r1, r2
 8000f44:	4649      	mov	r1, r9
 8000f46:	f7ff f98b 	bl	8000260 <__aeabi_uidivmod>
 8000f4a:	0409      	lsls	r1, r1, #16
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	0431      	lsls	r1, r6, #16
 8000f50:	4666      	mov	r6, ip
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0c09      	lsrs	r1, r1, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0003      	movs	r3, r0
 8000f5a:	4331      	orrs	r1, r6
 8000f5c:	428a      	cmp	r2, r1
 8000f5e:	d904      	bls.n	8000f6a <__aeabi_ddiv+0x156>
 8000f60:	1909      	adds	r1, r1, r4
 8000f62:	3b01      	subs	r3, #1
 8000f64:	428c      	cmp	r4, r1
 8000f66:	d800      	bhi.n	8000f6a <__aeabi_ddiv+0x156>
 8000f68:	e1ed      	b.n	8001346 <__aeabi_ddiv+0x532>
 8000f6a:	1a88      	subs	r0, r1, r2
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	0412      	lsls	r2, r2, #16
 8000f70:	431a      	orrs	r2, r3
 8000f72:	4690      	mov	r8, r2
 8000f74:	4641      	mov	r1, r8
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	040e      	lsls	r6, r1, #16
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	001f      	movs	r7, r3
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	9b00      	ldr	r3, [sp, #0]
 8000f82:	0c36      	lsrs	r6, r6, #16
 8000f84:	041b      	lsls	r3, r3, #16
 8000f86:	0c19      	lsrs	r1, r3, #16
 8000f88:	000b      	movs	r3, r1
 8000f8a:	4373      	muls	r3, r6
 8000f8c:	0c12      	lsrs	r2, r2, #16
 8000f8e:	437e      	muls	r6, r7
 8000f90:	9103      	str	r1, [sp, #12]
 8000f92:	4351      	muls	r1, r2
 8000f94:	437a      	muls	r2, r7
 8000f96:	0c1f      	lsrs	r7, r3, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	1876      	adds	r6, r6, r1
 8000f9c:	4466      	add	r6, ip
 8000f9e:	42b1      	cmp	r1, r6
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x196>
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	468c      	mov	ip, r1
 8000fa8:	4462      	add	r2, ip
 8000faa:	0c31      	lsrs	r1, r6, #16
 8000fac:	188a      	adds	r2, r1, r2
 8000fae:	0431      	lsls	r1, r6, #16
 8000fb0:	041e      	lsls	r6, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	198e      	adds	r6, r1, r6
 8000fb6:	4290      	cmp	r0, r2
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1ac>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1ce>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1ce>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e59      	subs	r1, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c8>
 8000fda:	e1a0      	b.n	800131e <__aeabi_ddiv+0x50a>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1cc>
 8000fde:	e19b      	b.n	8001318 <__aeabi_ddiv+0x504>
 8000fe0:	4688      	mov	r8, r1
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a80      	subs	r0, r0, r2
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1e0>
 8000ff2:	e1d5      	b.n	80013a0 <__aeabi_ddiv+0x58c>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f933 	bl	8000260 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f8>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4d2>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f926 	bl	8000260 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x214>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4bc>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x242>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1841      	adds	r1, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	428e      	cmp	r6, r1
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x254>
 8001066:	e0ff      	b.n	8001268 <__aeabi_ddiv+0x454>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x258>
 800106a:	e0fa      	b.n	8001262 <__aeabi_ddiv+0x44e>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4a49      	ldr	r2, [pc, #292]	; (8001198 <__aeabi_ddiv+0x384>)
 8001072:	445a      	add	r2, fp
 8001074:	2a00      	cmp	r2, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x266>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3bc>
 800107a:	076b      	lsls	r3, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x26c>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e8>
 8001080:	08ed      	lsrs	r5, r5, #3
 8001082:	4643      	mov	r3, r8
 8001084:	01db      	lsls	r3, r3, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x282>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x388>)
 800108c:	401a      	ands	r2, r3
 800108e:	4690      	mov	r8, r2
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	00d2      	lsls	r2, r2, #3
 8001094:	445a      	add	r2, fp
 8001096:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x38c>)
 8001098:	429a      	cmp	r2, r3
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x28a>
 800109c:	e71f      	b.n	8000ede <__aeabi_ddiv+0xca>
 800109e:	4643      	mov	r3, r8
 80010a0:	075b      	lsls	r3, r3, #29
 80010a2:	431d      	orrs	r5, r3
 80010a4:	4643      	mov	r3, r8
 80010a6:	0552      	lsls	r2, r2, #21
 80010a8:	025c      	lsls	r4, r3, #9
 80010aa:	0b24      	lsrs	r4, r4, #12
 80010ac:	0d53      	lsrs	r3, r2, #21
 80010ae:	e708      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 80010b0:	4652      	mov	r2, sl
 80010b2:	4322      	orrs	r2, r4
 80010b4:	d100      	bne.n	80010b8 <__aeabi_ddiv+0x2a4>
 80010b6:	e07b      	b.n	80011b0 <__aeabi_ddiv+0x39c>
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d100      	bne.n	80010be <__aeabi_ddiv+0x2aa>
 80010bc:	e0fa      	b.n	80012b4 <__aeabi_ddiv+0x4a0>
 80010be:	0020      	movs	r0, r4
 80010c0:	f001 f9da 	bl	8002478 <__clzsi2>
 80010c4:	0002      	movs	r2, r0
 80010c6:	3a0b      	subs	r2, #11
 80010c8:	231d      	movs	r3, #29
 80010ca:	0001      	movs	r1, r0
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	4652      	mov	r2, sl
 80010d0:	3908      	subs	r1, #8
 80010d2:	40da      	lsrs	r2, r3
 80010d4:	408c      	lsls	r4, r1
 80010d6:	4314      	orrs	r4, r2
 80010d8:	4652      	mov	r2, sl
 80010da:	408a      	lsls	r2, r1
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x390>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d5      	b.n	8000e94 <__aeabi_ddiv+0x80>
 80010e8:	464b      	mov	r3, r9
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x366>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2e2>
 80010f4:	e0ce      	b.n	8001294 <__aeabi_ddiv+0x480>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9be 	bl	8002478 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4823      	ldr	r0, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x394>)
 800111c:	1a83      	subs	r3, r0, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69a      	b.n	8000e5e <__aeabi_ddiv+0x4a>
 8001128:	464b      	mov	r3, r9
 800112a:	4323      	orrs	r3, r4
 800112c:	4698      	mov	r8, r3
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x358>
 8001130:	2308      	movs	r3, #8
 8001132:	4699      	mov	r9, r3
 8001134:	3b06      	subs	r3, #6
 8001136:	2500      	movs	r5, #0
 8001138:	4683      	mov	fp, r0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e68f      	b.n	8000e5e <__aeabi_ddiv+0x4a>
 800113e:	4652      	mov	r2, sl
 8001140:	4322      	orrs	r2, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x344>
 8001144:	2302      	movs	r3, #2
 8001146:	4649      	mov	r1, r9
 8001148:	4319      	orrs	r1, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x398>)
 800114c:	4689      	mov	r9, r1
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e69d      	b.n	8000e94 <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x398>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4652      	mov	r2, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e693      	b.n	8000e94 <__aeabi_ddiv+0x80>
 800116c:	230c      	movs	r3, #12
 800116e:	4699      	mov	r9, r3
 8001170:	3b09      	subs	r3, #9
 8001172:	46a0      	mov	r8, r4
 8001174:	4683      	mov	fp, r0
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e671      	b.n	8000e5e <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e669      	b.n	8000e5e <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800b670 	.word	0x0800b670
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	4649      	mov	r1, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	4319      	orrs	r1, r3
 80011b6:	4689      	mov	r9, r1
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66a      	b.n	8000e94 <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2480      	movs	r4, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <__aeabi_ddiv+0x5dc>)
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	e67a      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2301      	movs	r3, #1
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	2b38      	cmp	r3, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3c6>
 80011d8:	e670      	b.n	8000ebc <__aeabi_ddiv+0xa8>
 80011da:	2b1f      	cmp	r3, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3cc>
 80011de:	e0bf      	b.n	8001360 <__aeabi_ddiv+0x54c>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1a8a      	subs	r2, r1, r2
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	000a      	movs	r2, r1
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3e6>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <__aeabi_ddiv+0x5e0>)
 80011f4:	445b      	add	r3, fp
 80011f6:	4099      	lsls	r1, r3
 80011f8:	430d      	orrs	r5, r1
 80011fa:	1e6b      	subs	r3, r5, #1
 80011fc:	419d      	sbcs	r5, r3
 80011fe:	2307      	movs	r3, #7
 8001200:	432a      	orrs	r2, r5
 8001202:	001d      	movs	r5, r3
 8001204:	2400      	movs	r4, #0
 8001206:	4015      	ands	r5, r2
 8001208:	4213      	tst	r3, r2
 800120a:	d100      	bne.n	800120e <__aeabi_ddiv+0x3fa>
 800120c:	e0d4      	b.n	80013b8 <__aeabi_ddiv+0x5a4>
 800120e:	210f      	movs	r1, #15
 8001210:	2300      	movs	r3, #0
 8001212:	4011      	ands	r1, r2
 8001214:	2904      	cmp	r1, #4
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x406>
 8001218:	e0cb      	b.n	80013b2 <__aeabi_ddiv+0x59e>
 800121a:	1d11      	adds	r1, r2, #4
 800121c:	4291      	cmp	r1, r2
 800121e:	4192      	sbcs	r2, r2
 8001220:	4252      	negs	r2, r2
 8001222:	189b      	adds	r3, r3, r2
 8001224:	000a      	movs	r2, r1
 8001226:	0219      	lsls	r1, r3, #8
 8001228:	d400      	bmi.n	800122c <__aeabi_ddiv+0x418>
 800122a:	e0c2      	b.n	80013b2 <__aeabi_ddiv+0x59e>
 800122c:	2301      	movs	r3, #1
 800122e:	2400      	movs	r4, #0
 8001230:	2500      	movs	r5, #0
 8001232:	e646      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	4641      	mov	r1, r8
 8001238:	031b      	lsls	r3, r3, #12
 800123a:	4219      	tst	r1, r3
 800123c:	d008      	beq.n	8001250 <__aeabi_ddiv+0x43c>
 800123e:	421c      	tst	r4, r3
 8001240:	d106      	bne.n	8001250 <__aeabi_ddiv+0x43c>
 8001242:	431c      	orrs	r4, r3
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	46ba      	mov	sl, r7
 8001248:	0015      	movs	r5, r2
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <__aeabi_ddiv+0x5dc>)
 800124c:	0b24      	lsrs	r4, r4, #12
 800124e:	e638      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 8001250:	2480      	movs	r4, #128	; 0x80
 8001252:	4643      	mov	r3, r8
 8001254:	0324      	lsls	r4, r4, #12
 8001256:	431c      	orrs	r4, r3
 8001258:	0324      	lsls	r4, r4, #12
 800125a:	46b2      	mov	sl, r6
 800125c:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <__aeabi_ddiv+0x5dc>)
 800125e:	0b24      	lsrs	r4, r4, #12
 8001260:	e62f      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x454>
 8001266:	e703      	b.n	8001070 <__aeabi_ddiv+0x25c>
 8001268:	19a6      	adds	r6, r4, r6
 800126a:	1e68      	subs	r0, r5, #1
 800126c:	42a6      	cmp	r6, r4
 800126e:	d200      	bcs.n	8001272 <__aeabi_ddiv+0x45e>
 8001270:	e08d      	b.n	800138e <__aeabi_ddiv+0x57a>
 8001272:	428e      	cmp	r6, r1
 8001274:	d200      	bcs.n	8001278 <__aeabi_ddiv+0x464>
 8001276:	e0a3      	b.n	80013c0 <__aeabi_ddiv+0x5ac>
 8001278:	d100      	bne.n	800127c <__aeabi_ddiv+0x468>
 800127a:	e0b3      	b.n	80013e4 <__aeabi_ddiv+0x5d0>
 800127c:	0005      	movs	r5, r0
 800127e:	e6f5      	b.n	800106c <__aeabi_ddiv+0x258>
 8001280:	42aa      	cmp	r2, r5
 8001282:	d900      	bls.n	8001286 <__aeabi_ddiv+0x472>
 8001284:	e639      	b.n	8000efa <__aeabi_ddiv+0xe6>
 8001286:	4643      	mov	r3, r8
 8001288:	07de      	lsls	r6, r3, #31
 800128a:	0858      	lsrs	r0, r3, #1
 800128c:	086b      	lsrs	r3, r5, #1
 800128e:	431e      	orrs	r6, r3
 8001290:	07ed      	lsls	r5, r5, #31
 8001292:	e639      	b.n	8000f08 <__aeabi_ddiv+0xf4>
 8001294:	4648      	mov	r0, r9
 8001296:	f001 f8ef 	bl	8002478 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x494>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2ee>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x306>
 80012b4:	f001 f8e0 	bl	8002478 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4b2>
 80012c4:	e700      	b.n	80010c8 <__aeabi_ddiv+0x2b4>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c8>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4c6>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x214>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4cc>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x214>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x214>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4dc>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f8>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4e2>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f8>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f8>
 80012fc:	230f      	movs	r3, #15
 80012fe:	402b      	ands	r3, r5
 8001300:	2b04      	cmp	r3, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4f2>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x26c>
 8001306:	2305      	movs	r3, #5
 8001308:	425b      	negs	r3, r3
 800130a:	42ab      	cmp	r3, r5
 800130c:	419b      	sbcs	r3, r3
 800130e:	3504      	adds	r5, #4
 8001310:	425b      	negs	r3, r3
 8001312:	08ed      	lsrs	r5, r5, #3
 8001314:	4498      	add	r8, r3
 8001316:	e6b4      	b.n	8001082 <__aeabi_ddiv+0x26e>
 8001318:	42af      	cmp	r7, r5
 800131a:	d900      	bls.n	800131e <__aeabi_ddiv+0x50a>
 800131c:	e660      	b.n	8000fe0 <__aeabi_ddiv+0x1cc>
 800131e:	4282      	cmp	r2, r0
 8001320:	d804      	bhi.n	800132c <__aeabi_ddiv+0x518>
 8001322:	d000      	beq.n	8001326 <__aeabi_ddiv+0x512>
 8001324:	e65c      	b.n	8000fe0 <__aeabi_ddiv+0x1cc>
 8001326:	42ae      	cmp	r6, r5
 8001328:	d800      	bhi.n	800132c <__aeabi_ddiv+0x518>
 800132a:	e659      	b.n	8000fe0 <__aeabi_ddiv+0x1cc>
 800132c:	2302      	movs	r3, #2
 800132e:	425b      	negs	r3, r3
 8001330:	469c      	mov	ip, r3
 8001332:	9b00      	ldr	r3, [sp, #0]
 8001334:	44e0      	add	r8, ip
 8001336:	469c      	mov	ip, r3
 8001338:	4465      	add	r5, ip
 800133a:	429d      	cmp	r5, r3
 800133c:	419b      	sbcs	r3, r3
 800133e:	425b      	negs	r3, r3
 8001340:	191b      	adds	r3, r3, r4
 8001342:	18c0      	adds	r0, r0, r3
 8001344:	e64d      	b.n	8000fe2 <__aeabi_ddiv+0x1ce>
 8001346:	428a      	cmp	r2, r1
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x538>
 800134a:	e60e      	b.n	8000f6a <__aeabi_ddiv+0x156>
 800134c:	1e83      	subs	r3, r0, #2
 800134e:	1909      	adds	r1, r1, r4
 8001350:	e60b      	b.n	8000f6a <__aeabi_ddiv+0x156>
 8001352:	428a      	cmp	r2, r1
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x544>
 8001356:	e5f4      	b.n	8000f42 <__aeabi_ddiv+0x12e>
 8001358:	1e83      	subs	r3, r0, #2
 800135a:	4698      	mov	r8, r3
 800135c:	1909      	adds	r1, r1, r4
 800135e:	e5f0      	b.n	8000f42 <__aeabi_ddiv+0x12e>
 8001360:	4925      	ldr	r1, [pc, #148]	; (80013f8 <__aeabi_ddiv+0x5e4>)
 8001362:	0028      	movs	r0, r5
 8001364:	4459      	add	r1, fp
 8001366:	408d      	lsls	r5, r1
 8001368:	4642      	mov	r2, r8
 800136a:	408a      	lsls	r2, r1
 800136c:	1e69      	subs	r1, r5, #1
 800136e:	418d      	sbcs	r5, r1
 8001370:	4641      	mov	r1, r8
 8001372:	40d8      	lsrs	r0, r3
 8001374:	40d9      	lsrs	r1, r3
 8001376:	4302      	orrs	r2, r0
 8001378:	432a      	orrs	r2, r5
 800137a:	000b      	movs	r3, r1
 800137c:	0751      	lsls	r1, r2, #29
 800137e:	d100      	bne.n	8001382 <__aeabi_ddiv+0x56e>
 8001380:	e751      	b.n	8001226 <__aeabi_ddiv+0x412>
 8001382:	210f      	movs	r1, #15
 8001384:	4011      	ands	r1, r2
 8001386:	2904      	cmp	r1, #4
 8001388:	d000      	beq.n	800138c <__aeabi_ddiv+0x578>
 800138a:	e746      	b.n	800121a <__aeabi_ddiv+0x406>
 800138c:	e74b      	b.n	8001226 <__aeabi_ddiv+0x412>
 800138e:	0005      	movs	r5, r0
 8001390:	428e      	cmp	r6, r1
 8001392:	d000      	beq.n	8001396 <__aeabi_ddiv+0x582>
 8001394:	e66a      	b.n	800106c <__aeabi_ddiv+0x258>
 8001396:	9a00      	ldr	r2, [sp, #0]
 8001398:	4293      	cmp	r3, r2
 800139a:	d000      	beq.n	800139e <__aeabi_ddiv+0x58a>
 800139c:	e666      	b.n	800106c <__aeabi_ddiv+0x258>
 800139e:	e667      	b.n	8001070 <__aeabi_ddiv+0x25c>
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <__aeabi_ddiv+0x5e8>)
 80013a2:	445a      	add	r2, fp
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_ddiv+0x596>
 80013a8:	e710      	b.n	80011cc <__aeabi_ddiv+0x3b8>
 80013aa:	2301      	movs	r3, #1
 80013ac:	2500      	movs	r5, #0
 80013ae:	4498      	add	r8, r3
 80013b0:	e667      	b.n	8001082 <__aeabi_ddiv+0x26e>
 80013b2:	075d      	lsls	r5, r3, #29
 80013b4:	025b      	lsls	r3, r3, #9
 80013b6:	0b1c      	lsrs	r4, r3, #12
 80013b8:	08d2      	lsrs	r2, r2, #3
 80013ba:	2300      	movs	r3, #0
 80013bc:	4315      	orrs	r5, r2
 80013be:	e580      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 80013c0:	9800      	ldr	r0, [sp, #0]
 80013c2:	3d02      	subs	r5, #2
 80013c4:	0042      	lsls	r2, r0, #1
 80013c6:	4282      	cmp	r2, r0
 80013c8:	41bf      	sbcs	r7, r7
 80013ca:	427f      	negs	r7, r7
 80013cc:	193c      	adds	r4, r7, r4
 80013ce:	1936      	adds	r6, r6, r4
 80013d0:	9200      	str	r2, [sp, #0]
 80013d2:	e7dd      	b.n	8001390 <__aeabi_ddiv+0x57c>
 80013d4:	2480      	movs	r4, #128	; 0x80
 80013d6:	4643      	mov	r3, r8
 80013d8:	0324      	lsls	r4, r4, #12
 80013da:	431c      	orrs	r4, r3
 80013dc:	0324      	lsls	r4, r4, #12
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__aeabi_ddiv+0x5dc>)
 80013e0:	0b24      	lsrs	r4, r4, #12
 80013e2:	e56e      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 80013e4:	9a00      	ldr	r2, [sp, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3ea      	bcc.n	80013c0 <__aeabi_ddiv+0x5ac>
 80013ea:	0005      	movs	r5, r0
 80013ec:	e7d3      	b.n	8001396 <__aeabi_ddiv+0x582>
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	000007ff 	.word	0x000007ff
 80013f4:	0000043e 	.word	0x0000043e
 80013f8:	0000041e 	.word	0x0000041e
 80013fc:	000003ff 	.word	0x000003ff

08001400 <__eqdf2>:
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001402:	464e      	mov	r6, r9
 8001404:	4645      	mov	r5, r8
 8001406:	46de      	mov	lr, fp
 8001408:	4657      	mov	r7, sl
 800140a:	4690      	mov	r8, r2
 800140c:	b5e0      	push	{r5, r6, r7, lr}
 800140e:	0017      	movs	r7, r2
 8001410:	031a      	lsls	r2, r3, #12
 8001412:	0b12      	lsrs	r2, r2, #12
 8001414:	0005      	movs	r5, r0
 8001416:	4684      	mov	ip, r0
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <__eqdf2+0x80>)
 800141a:	030e      	lsls	r6, r1, #12
 800141c:	004c      	lsls	r4, r1, #1
 800141e:	4691      	mov	r9, r2
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	0fdb      	lsrs	r3, r3, #31
 8001424:	469b      	mov	fp, r3
 8001426:	0b36      	lsrs	r6, r6, #12
 8001428:	0d64      	lsrs	r4, r4, #21
 800142a:	0fc9      	lsrs	r1, r1, #31
 800142c:	0d52      	lsrs	r2, r2, #21
 800142e:	4284      	cmp	r4, r0
 8001430:	d019      	beq.n	8001466 <__eqdf2+0x66>
 8001432:	4282      	cmp	r2, r0
 8001434:	d010      	beq.n	8001458 <__eqdf2+0x58>
 8001436:	2001      	movs	r0, #1
 8001438:	4294      	cmp	r4, r2
 800143a:	d10e      	bne.n	800145a <__eqdf2+0x5a>
 800143c:	454e      	cmp	r6, r9
 800143e:	d10c      	bne.n	800145a <__eqdf2+0x5a>
 8001440:	2001      	movs	r0, #1
 8001442:	45c4      	cmp	ip, r8
 8001444:	d109      	bne.n	800145a <__eqdf2+0x5a>
 8001446:	4559      	cmp	r1, fp
 8001448:	d017      	beq.n	800147a <__eqdf2+0x7a>
 800144a:	2c00      	cmp	r4, #0
 800144c:	d105      	bne.n	800145a <__eqdf2+0x5a>
 800144e:	0030      	movs	r0, r6
 8001450:	4328      	orrs	r0, r5
 8001452:	1e43      	subs	r3, r0, #1
 8001454:	4198      	sbcs	r0, r3
 8001456:	e000      	b.n	800145a <__eqdf2+0x5a>
 8001458:	2001      	movs	r0, #1
 800145a:	bcf0      	pop	{r4, r5, r6, r7}
 800145c:	46bb      	mov	fp, r7
 800145e:	46b2      	mov	sl, r6
 8001460:	46a9      	mov	r9, r5
 8001462:	46a0      	mov	r8, r4
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001466:	0033      	movs	r3, r6
 8001468:	2001      	movs	r0, #1
 800146a:	432b      	orrs	r3, r5
 800146c:	d1f5      	bne.n	800145a <__eqdf2+0x5a>
 800146e:	42a2      	cmp	r2, r4
 8001470:	d1f3      	bne.n	800145a <__eqdf2+0x5a>
 8001472:	464b      	mov	r3, r9
 8001474:	433b      	orrs	r3, r7
 8001476:	d1f0      	bne.n	800145a <__eqdf2+0x5a>
 8001478:	e7e2      	b.n	8001440 <__eqdf2+0x40>
 800147a:	2000      	movs	r0, #0
 800147c:	e7ed      	b.n	800145a <__eqdf2+0x5a>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	000007ff 	.word	0x000007ff

08001484 <__gedf2>:
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	4647      	mov	r7, r8
 8001488:	46ce      	mov	lr, r9
 800148a:	0004      	movs	r4, r0
 800148c:	0018      	movs	r0, r3
 800148e:	0016      	movs	r6, r2
 8001490:	031b      	lsls	r3, r3, #12
 8001492:	0b1b      	lsrs	r3, r3, #12
 8001494:	4d2d      	ldr	r5, [pc, #180]	; (800154c <__gedf2+0xc8>)
 8001496:	004a      	lsls	r2, r1, #1
 8001498:	4699      	mov	r9, r3
 800149a:	b580      	push	{r7, lr}
 800149c:	0043      	lsls	r3, r0, #1
 800149e:	030f      	lsls	r7, r1, #12
 80014a0:	46a4      	mov	ip, r4
 80014a2:	46b0      	mov	r8, r6
 80014a4:	0b3f      	lsrs	r7, r7, #12
 80014a6:	0d52      	lsrs	r2, r2, #21
 80014a8:	0fc9      	lsrs	r1, r1, #31
 80014aa:	0d5b      	lsrs	r3, r3, #21
 80014ac:	0fc0      	lsrs	r0, r0, #31
 80014ae:	42aa      	cmp	r2, r5
 80014b0:	d021      	beq.n	80014f6 <__gedf2+0x72>
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d013      	beq.n	80014de <__gedf2+0x5a>
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d122      	bne.n	8001500 <__gedf2+0x7c>
 80014ba:	433c      	orrs	r4, r7
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <__gedf2+0x42>
 80014c0:	464d      	mov	r5, r9
 80014c2:	432e      	orrs	r6, r5
 80014c4:	d022      	beq.n	800150c <__gedf2+0x88>
 80014c6:	2c00      	cmp	r4, #0
 80014c8:	d010      	beq.n	80014ec <__gedf2+0x68>
 80014ca:	4281      	cmp	r1, r0
 80014cc:	d022      	beq.n	8001514 <__gedf2+0x90>
 80014ce:	2002      	movs	r0, #2
 80014d0:	3901      	subs	r1, #1
 80014d2:	4008      	ands	r0, r1
 80014d4:	3801      	subs	r0, #1
 80014d6:	bcc0      	pop	{r6, r7}
 80014d8:	46b9      	mov	r9, r7
 80014da:	46b0      	mov	r8, r6
 80014dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014de:	464d      	mov	r5, r9
 80014e0:	432e      	orrs	r6, r5
 80014e2:	d129      	bne.n	8001538 <__gedf2+0xb4>
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	d1f0      	bne.n	80014ca <__gedf2+0x46>
 80014e8:	433c      	orrs	r4, r7
 80014ea:	d1ee      	bne.n	80014ca <__gedf2+0x46>
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d1f2      	bne.n	80014d6 <__gedf2+0x52>
 80014f0:	2001      	movs	r0, #1
 80014f2:	4240      	negs	r0, r0
 80014f4:	e7ef      	b.n	80014d6 <__gedf2+0x52>
 80014f6:	003d      	movs	r5, r7
 80014f8:	4325      	orrs	r5, r4
 80014fa:	d11d      	bne.n	8001538 <__gedf2+0xb4>
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d0ee      	beq.n	80014de <__gedf2+0x5a>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e2      	bne.n	80014ca <__gedf2+0x46>
 8001504:	464c      	mov	r4, r9
 8001506:	4326      	orrs	r6, r4
 8001508:	d1df      	bne.n	80014ca <__gedf2+0x46>
 800150a:	e7e0      	b.n	80014ce <__gedf2+0x4a>
 800150c:	2000      	movs	r0, #0
 800150e:	2c00      	cmp	r4, #0
 8001510:	d0e1      	beq.n	80014d6 <__gedf2+0x52>
 8001512:	e7dc      	b.n	80014ce <__gedf2+0x4a>
 8001514:	429a      	cmp	r2, r3
 8001516:	dc0a      	bgt.n	800152e <__gedf2+0xaa>
 8001518:	dbe8      	blt.n	80014ec <__gedf2+0x68>
 800151a:	454f      	cmp	r7, r9
 800151c:	d8d7      	bhi.n	80014ce <__gedf2+0x4a>
 800151e:	d00e      	beq.n	800153e <__gedf2+0xba>
 8001520:	2000      	movs	r0, #0
 8001522:	454f      	cmp	r7, r9
 8001524:	d2d7      	bcs.n	80014d6 <__gedf2+0x52>
 8001526:	2900      	cmp	r1, #0
 8001528:	d0e2      	beq.n	80014f0 <__gedf2+0x6c>
 800152a:	0008      	movs	r0, r1
 800152c:	e7d3      	b.n	80014d6 <__gedf2+0x52>
 800152e:	4243      	negs	r3, r0
 8001530:	4158      	adcs	r0, r3
 8001532:	0040      	lsls	r0, r0, #1
 8001534:	3801      	subs	r0, #1
 8001536:	e7ce      	b.n	80014d6 <__gedf2+0x52>
 8001538:	2002      	movs	r0, #2
 800153a:	4240      	negs	r0, r0
 800153c:	e7cb      	b.n	80014d6 <__gedf2+0x52>
 800153e:	45c4      	cmp	ip, r8
 8001540:	d8c5      	bhi.n	80014ce <__gedf2+0x4a>
 8001542:	2000      	movs	r0, #0
 8001544:	45c4      	cmp	ip, r8
 8001546:	d2c6      	bcs.n	80014d6 <__gedf2+0x52>
 8001548:	e7ed      	b.n	8001526 <__gedf2+0xa2>
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	000007ff 	.word	0x000007ff

08001550 <__ledf2>:
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	4647      	mov	r7, r8
 8001554:	46ce      	mov	lr, r9
 8001556:	0004      	movs	r4, r0
 8001558:	0018      	movs	r0, r3
 800155a:	0016      	movs	r6, r2
 800155c:	031b      	lsls	r3, r3, #12
 800155e:	0b1b      	lsrs	r3, r3, #12
 8001560:	4d2c      	ldr	r5, [pc, #176]	; (8001614 <__ledf2+0xc4>)
 8001562:	004a      	lsls	r2, r1, #1
 8001564:	4699      	mov	r9, r3
 8001566:	b580      	push	{r7, lr}
 8001568:	0043      	lsls	r3, r0, #1
 800156a:	030f      	lsls	r7, r1, #12
 800156c:	46a4      	mov	ip, r4
 800156e:	46b0      	mov	r8, r6
 8001570:	0b3f      	lsrs	r7, r7, #12
 8001572:	0d52      	lsrs	r2, r2, #21
 8001574:	0fc9      	lsrs	r1, r1, #31
 8001576:	0d5b      	lsrs	r3, r3, #21
 8001578:	0fc0      	lsrs	r0, r0, #31
 800157a:	42aa      	cmp	r2, r5
 800157c:	d00d      	beq.n	800159a <__ledf2+0x4a>
 800157e:	42ab      	cmp	r3, r5
 8001580:	d010      	beq.n	80015a4 <__ledf2+0x54>
 8001582:	2a00      	cmp	r2, #0
 8001584:	d127      	bne.n	80015d6 <__ledf2+0x86>
 8001586:	433c      	orrs	r4, r7
 8001588:	2b00      	cmp	r3, #0
 800158a:	d111      	bne.n	80015b0 <__ledf2+0x60>
 800158c:	464d      	mov	r5, r9
 800158e:	432e      	orrs	r6, r5
 8001590:	d10e      	bne.n	80015b0 <__ledf2+0x60>
 8001592:	2000      	movs	r0, #0
 8001594:	2c00      	cmp	r4, #0
 8001596:	d015      	beq.n	80015c4 <__ledf2+0x74>
 8001598:	e00e      	b.n	80015b8 <__ledf2+0x68>
 800159a:	003d      	movs	r5, r7
 800159c:	4325      	orrs	r5, r4
 800159e:	d110      	bne.n	80015c2 <__ledf2+0x72>
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d118      	bne.n	80015d6 <__ledf2+0x86>
 80015a4:	464d      	mov	r5, r9
 80015a6:	432e      	orrs	r6, r5
 80015a8:	d10b      	bne.n	80015c2 <__ledf2+0x72>
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d102      	bne.n	80015b4 <__ledf2+0x64>
 80015ae:	433c      	orrs	r4, r7
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d00b      	beq.n	80015cc <__ledf2+0x7c>
 80015b4:	4281      	cmp	r1, r0
 80015b6:	d014      	beq.n	80015e2 <__ledf2+0x92>
 80015b8:	2002      	movs	r0, #2
 80015ba:	3901      	subs	r1, #1
 80015bc:	4008      	ands	r0, r1
 80015be:	3801      	subs	r0, #1
 80015c0:	e000      	b.n	80015c4 <__ledf2+0x74>
 80015c2:	2002      	movs	r0, #2
 80015c4:	bcc0      	pop	{r6, r7}
 80015c6:	46b9      	mov	r9, r7
 80015c8:	46b0      	mov	r8, r6
 80015ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d1f9      	bne.n	80015c4 <__ledf2+0x74>
 80015d0:	2001      	movs	r0, #1
 80015d2:	4240      	negs	r0, r0
 80015d4:	e7f6      	b.n	80015c4 <__ledf2+0x74>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ec      	bne.n	80015b4 <__ledf2+0x64>
 80015da:	464c      	mov	r4, r9
 80015dc:	4326      	orrs	r6, r4
 80015de:	d1e9      	bne.n	80015b4 <__ledf2+0x64>
 80015e0:	e7ea      	b.n	80015b8 <__ledf2+0x68>
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dd04      	ble.n	80015f0 <__ledf2+0xa0>
 80015e6:	4243      	negs	r3, r0
 80015e8:	4158      	adcs	r0, r3
 80015ea:	0040      	lsls	r0, r0, #1
 80015ec:	3801      	subs	r0, #1
 80015ee:	e7e9      	b.n	80015c4 <__ledf2+0x74>
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbeb      	blt.n	80015cc <__ledf2+0x7c>
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d8df      	bhi.n	80015b8 <__ledf2+0x68>
 80015f8:	d006      	beq.n	8001608 <__ledf2+0xb8>
 80015fa:	2000      	movs	r0, #0
 80015fc:	454f      	cmp	r7, r9
 80015fe:	d2e1      	bcs.n	80015c4 <__ledf2+0x74>
 8001600:	2900      	cmp	r1, #0
 8001602:	d0e5      	beq.n	80015d0 <__ledf2+0x80>
 8001604:	0008      	movs	r0, r1
 8001606:	e7dd      	b.n	80015c4 <__ledf2+0x74>
 8001608:	45c4      	cmp	ip, r8
 800160a:	d8d5      	bhi.n	80015b8 <__ledf2+0x68>
 800160c:	2000      	movs	r0, #0
 800160e:	45c4      	cmp	ip, r8
 8001610:	d2d8      	bcs.n	80015c4 <__ledf2+0x74>
 8001612:	e7f5      	b.n	8001600 <__ledf2+0xb0>
 8001614:	000007ff 	.word	0x000007ff

08001618 <__aeabi_dmul>:
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161a:	4657      	mov	r7, sl
 800161c:	464e      	mov	r6, r9
 800161e:	4645      	mov	r5, r8
 8001620:	46de      	mov	lr, fp
 8001622:	b5e0      	push	{r5, r6, r7, lr}
 8001624:	4698      	mov	r8, r3
 8001626:	030c      	lsls	r4, r1, #12
 8001628:	004b      	lsls	r3, r1, #1
 800162a:	0006      	movs	r6, r0
 800162c:	4692      	mov	sl, r2
 800162e:	b087      	sub	sp, #28
 8001630:	0b24      	lsrs	r4, r4, #12
 8001632:	0d5b      	lsrs	r3, r3, #21
 8001634:	0fcf      	lsrs	r7, r1, #31
 8001636:	2b00      	cmp	r3, #0
 8001638:	d100      	bne.n	800163c <__aeabi_dmul+0x24>
 800163a:	e15c      	b.n	80018f6 <__aeabi_dmul+0x2de>
 800163c:	4ad9      	ldr	r2, [pc, #868]	; (80019a4 <__aeabi_dmul+0x38c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d100      	bne.n	8001644 <__aeabi_dmul+0x2c>
 8001642:	e175      	b.n	8001930 <__aeabi_dmul+0x318>
 8001644:	0f42      	lsrs	r2, r0, #29
 8001646:	00e4      	lsls	r4, r4, #3
 8001648:	4314      	orrs	r4, r2
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0412      	lsls	r2, r2, #16
 800164e:	4314      	orrs	r4, r2
 8001650:	4ad5      	ldr	r2, [pc, #852]	; (80019a8 <__aeabi_dmul+0x390>)
 8001652:	00c5      	lsls	r5, r0, #3
 8001654:	4694      	mov	ip, r2
 8001656:	4463      	add	r3, ip
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	4699      	mov	r9, r3
 800165e:	469b      	mov	fp, r3
 8001660:	4643      	mov	r3, r8
 8001662:	4642      	mov	r2, r8
 8001664:	031e      	lsls	r6, r3, #12
 8001666:	0fd2      	lsrs	r2, r2, #31
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4650      	mov	r0, sl
 800166c:	4690      	mov	r8, r2
 800166e:	0b36      	lsrs	r6, r6, #12
 8001670:	0d5b      	lsrs	r3, r3, #21
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x5e>
 8001674:	e120      	b.n	80018b8 <__aeabi_dmul+0x2a0>
 8001676:	4acb      	ldr	r2, [pc, #812]	; (80019a4 <__aeabi_dmul+0x38c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x66>
 800167c:	e162      	b.n	8001944 <__aeabi_dmul+0x32c>
 800167e:	49ca      	ldr	r1, [pc, #808]	; (80019a8 <__aeabi_dmul+0x390>)
 8001680:	0f42      	lsrs	r2, r0, #29
 8001682:	468c      	mov	ip, r1
 8001684:	9900      	ldr	r1, [sp, #0]
 8001686:	4463      	add	r3, ip
 8001688:	00f6      	lsls	r6, r6, #3
 800168a:	468c      	mov	ip, r1
 800168c:	4316      	orrs	r6, r2
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	449c      	add	ip, r3
 8001692:	0412      	lsls	r2, r2, #16
 8001694:	4663      	mov	r3, ip
 8001696:	4316      	orrs	r6, r2
 8001698:	00c2      	lsls	r2, r0, #3
 800169a:	2000      	movs	r0, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	9900      	ldr	r1, [sp, #0]
 80016a0:	4643      	mov	r3, r8
 80016a2:	3101      	adds	r1, #1
 80016a4:	468c      	mov	ip, r1
 80016a6:	4649      	mov	r1, r9
 80016a8:	407b      	eors	r3, r7
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	290f      	cmp	r1, #15
 80016ae:	d826      	bhi.n	80016fe <__aeabi_dmul+0xe6>
 80016b0:	4bbe      	ldr	r3, [pc, #760]	; (80019ac <__aeabi_dmul+0x394>)
 80016b2:	0089      	lsls	r1, r1, #2
 80016b4:	5859      	ldr	r1, [r3, r1]
 80016b6:	468f      	mov	pc, r1
 80016b8:	4643      	mov	r3, r8
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	0034      	movs	r4, r6
 80016be:	0015      	movs	r5, r2
 80016c0:	4683      	mov	fp, r0
 80016c2:	465b      	mov	r3, fp
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d016      	beq.n	80016f6 <__aeabi_dmul+0xde>
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0xb6>
 80016cc:	e203      	b.n	8001ad6 <__aeabi_dmul+0x4be>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d000      	beq.n	80016d4 <__aeabi_dmul+0xbc>
 80016d2:	e0cd      	b.n	8001870 <__aeabi_dmul+0x258>
 80016d4:	2200      	movs	r2, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2500      	movs	r5, #0
 80016da:	9b01      	ldr	r3, [sp, #4]
 80016dc:	0512      	lsls	r2, r2, #20
 80016de:	4322      	orrs	r2, r4
 80016e0:	07db      	lsls	r3, r3, #31
 80016e2:	431a      	orrs	r2, r3
 80016e4:	0028      	movs	r0, r5
 80016e6:	0011      	movs	r1, r2
 80016e8:	b007      	add	sp, #28
 80016ea:	bcf0      	pop	{r4, r5, r6, r7}
 80016ec:	46bb      	mov	fp, r7
 80016ee:	46b2      	mov	sl, r6
 80016f0:	46a9      	mov	r9, r5
 80016f2:	46a0      	mov	r8, r4
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f6:	2400      	movs	r4, #0
 80016f8:	2500      	movs	r5, #0
 80016fa:	4aaa      	ldr	r2, [pc, #680]	; (80019a4 <__aeabi_dmul+0x38c>)
 80016fc:	e7ed      	b.n	80016da <__aeabi_dmul+0xc2>
 80016fe:	0c28      	lsrs	r0, r5, #16
 8001700:	042d      	lsls	r5, r5, #16
 8001702:	0c2d      	lsrs	r5, r5, #16
 8001704:	002b      	movs	r3, r5
 8001706:	0c11      	lsrs	r1, r2, #16
 8001708:	0412      	lsls	r2, r2, #16
 800170a:	0c12      	lsrs	r2, r2, #16
 800170c:	4353      	muls	r3, r2
 800170e:	4698      	mov	r8, r3
 8001710:	0013      	movs	r3, r2
 8001712:	002f      	movs	r7, r5
 8001714:	4343      	muls	r3, r0
 8001716:	4699      	mov	r9, r3
 8001718:	434f      	muls	r7, r1
 800171a:	444f      	add	r7, r9
 800171c:	46bb      	mov	fp, r7
 800171e:	4647      	mov	r7, r8
 8001720:	000b      	movs	r3, r1
 8001722:	0c3f      	lsrs	r7, r7, #16
 8001724:	46ba      	mov	sl, r7
 8001726:	4343      	muls	r3, r0
 8001728:	44da      	add	sl, fp
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	45d1      	cmp	r9, sl
 800172e:	d904      	bls.n	800173a <__aeabi_dmul+0x122>
 8001730:	2780      	movs	r7, #128	; 0x80
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	46b9      	mov	r9, r7
 8001736:	444b      	add	r3, r9
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	4653      	mov	r3, sl
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	469b      	mov	fp, r3
 8001740:	4653      	mov	r3, sl
 8001742:	041f      	lsls	r7, r3, #16
 8001744:	4643      	mov	r3, r8
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	4698      	mov	r8, r3
 800174c:	003b      	movs	r3, r7
 800174e:	4443      	add	r3, r8
 8001750:	9304      	str	r3, [sp, #16]
 8001752:	0c33      	lsrs	r3, r6, #16
 8001754:	0436      	lsls	r6, r6, #16
 8001756:	0c36      	lsrs	r6, r6, #16
 8001758:	4698      	mov	r8, r3
 800175a:	0033      	movs	r3, r6
 800175c:	4343      	muls	r3, r0
 800175e:	4699      	mov	r9, r3
 8001760:	4643      	mov	r3, r8
 8001762:	4343      	muls	r3, r0
 8001764:	002f      	movs	r7, r5
 8001766:	469a      	mov	sl, r3
 8001768:	4643      	mov	r3, r8
 800176a:	4377      	muls	r7, r6
 800176c:	435d      	muls	r5, r3
 800176e:	0c38      	lsrs	r0, r7, #16
 8001770:	444d      	add	r5, r9
 8001772:	1945      	adds	r5, r0, r5
 8001774:	45a9      	cmp	r9, r5
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x168>
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4699      	mov	r9, r3
 800177e:	44ca      	add	sl, r9
 8001780:	043f      	lsls	r7, r7, #16
 8001782:	0c28      	lsrs	r0, r5, #16
 8001784:	0c3f      	lsrs	r7, r7, #16
 8001786:	042d      	lsls	r5, r5, #16
 8001788:	19ed      	adds	r5, r5, r7
 800178a:	0c27      	lsrs	r7, r4, #16
 800178c:	0424      	lsls	r4, r4, #16
 800178e:	0c24      	lsrs	r4, r4, #16
 8001790:	0003      	movs	r3, r0
 8001792:	0020      	movs	r0, r4
 8001794:	4350      	muls	r0, r2
 8001796:	437a      	muls	r2, r7
 8001798:	4691      	mov	r9, r2
 800179a:	003a      	movs	r2, r7
 800179c:	4453      	add	r3, sl
 800179e:	9305      	str	r3, [sp, #20]
 80017a0:	0c03      	lsrs	r3, r0, #16
 80017a2:	469a      	mov	sl, r3
 80017a4:	434a      	muls	r2, r1
 80017a6:	4361      	muls	r1, r4
 80017a8:	4449      	add	r1, r9
 80017aa:	4451      	add	r1, sl
 80017ac:	44ab      	add	fp, r5
 80017ae:	4589      	cmp	r9, r1
 80017b0:	d903      	bls.n	80017ba <__aeabi_dmul+0x1a2>
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	4699      	mov	r9, r3
 80017b8:	444a      	add	r2, r9
 80017ba:	0400      	lsls	r0, r0, #16
 80017bc:	0c0b      	lsrs	r3, r1, #16
 80017be:	0c00      	lsrs	r0, r0, #16
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	1809      	adds	r1, r1, r0
 80017c4:	0020      	movs	r0, r4
 80017c6:	4699      	mov	r9, r3
 80017c8:	4643      	mov	r3, r8
 80017ca:	4370      	muls	r0, r6
 80017cc:	435c      	muls	r4, r3
 80017ce:	437e      	muls	r6, r7
 80017d0:	435f      	muls	r7, r3
 80017d2:	0c03      	lsrs	r3, r0, #16
 80017d4:	4698      	mov	r8, r3
 80017d6:	19a4      	adds	r4, r4, r6
 80017d8:	4444      	add	r4, r8
 80017da:	444a      	add	r2, r9
 80017dc:	9703      	str	r7, [sp, #12]
 80017de:	42a6      	cmp	r6, r4
 80017e0:	d904      	bls.n	80017ec <__aeabi_dmul+0x1d4>
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	4698      	mov	r8, r3
 80017e8:	4447      	add	r7, r8
 80017ea:	9703      	str	r7, [sp, #12]
 80017ec:	0423      	lsls	r3, r4, #16
 80017ee:	9e02      	ldr	r6, [sp, #8]
 80017f0:	469a      	mov	sl, r3
 80017f2:	9b05      	ldr	r3, [sp, #20]
 80017f4:	445e      	add	r6, fp
 80017f6:	4698      	mov	r8, r3
 80017f8:	42ae      	cmp	r6, r5
 80017fa:	41ad      	sbcs	r5, r5
 80017fc:	1876      	adds	r6, r6, r1
 80017fe:	428e      	cmp	r6, r1
 8001800:	4189      	sbcs	r1, r1
 8001802:	0400      	lsls	r0, r0, #16
 8001804:	0c00      	lsrs	r0, r0, #16
 8001806:	4450      	add	r0, sl
 8001808:	4440      	add	r0, r8
 800180a:	426d      	negs	r5, r5
 800180c:	1947      	adds	r7, r0, r5
 800180e:	46b8      	mov	r8, r7
 8001810:	4693      	mov	fp, r2
 8001812:	4249      	negs	r1, r1
 8001814:	4689      	mov	r9, r1
 8001816:	44c3      	add	fp, r8
 8001818:	44d9      	add	r9, fp
 800181a:	4298      	cmp	r0, r3
 800181c:	4180      	sbcs	r0, r0
 800181e:	45a8      	cmp	r8, r5
 8001820:	41ad      	sbcs	r5, r5
 8001822:	4593      	cmp	fp, r2
 8001824:	4192      	sbcs	r2, r2
 8001826:	4589      	cmp	r9, r1
 8001828:	4189      	sbcs	r1, r1
 800182a:	426d      	negs	r5, r5
 800182c:	4240      	negs	r0, r0
 800182e:	4328      	orrs	r0, r5
 8001830:	0c24      	lsrs	r4, r4, #16
 8001832:	4252      	negs	r2, r2
 8001834:	4249      	negs	r1, r1
 8001836:	430a      	orrs	r2, r1
 8001838:	9b03      	ldr	r3, [sp, #12]
 800183a:	1900      	adds	r0, r0, r4
 800183c:	1880      	adds	r0, r0, r2
 800183e:	18c7      	adds	r7, r0, r3
 8001840:	464b      	mov	r3, r9
 8001842:	0ddc      	lsrs	r4, r3, #23
 8001844:	9b04      	ldr	r3, [sp, #16]
 8001846:	0275      	lsls	r5, r6, #9
 8001848:	431d      	orrs	r5, r3
 800184a:	1e6a      	subs	r2, r5, #1
 800184c:	4195      	sbcs	r5, r2
 800184e:	464b      	mov	r3, r9
 8001850:	0df6      	lsrs	r6, r6, #23
 8001852:	027f      	lsls	r7, r7, #9
 8001854:	4335      	orrs	r5, r6
 8001856:	025a      	lsls	r2, r3, #9
 8001858:	433c      	orrs	r4, r7
 800185a:	4315      	orrs	r5, r2
 800185c:	01fb      	lsls	r3, r7, #7
 800185e:	d400      	bmi.n	8001862 <__aeabi_dmul+0x24a>
 8001860:	e11c      	b.n	8001a9c <__aeabi_dmul+0x484>
 8001862:	2101      	movs	r1, #1
 8001864:	086a      	lsrs	r2, r5, #1
 8001866:	400d      	ands	r5, r1
 8001868:	4315      	orrs	r5, r2
 800186a:	07e2      	lsls	r2, r4, #31
 800186c:	4315      	orrs	r5, r2
 800186e:	0864      	lsrs	r4, r4, #1
 8001870:	494f      	ldr	r1, [pc, #316]	; (80019b0 <__aeabi_dmul+0x398>)
 8001872:	4461      	add	r1, ip
 8001874:	2900      	cmp	r1, #0
 8001876:	dc00      	bgt.n	800187a <__aeabi_dmul+0x262>
 8001878:	e0b0      	b.n	80019dc <__aeabi_dmul+0x3c4>
 800187a:	076b      	lsls	r3, r5, #29
 800187c:	d009      	beq.n	8001892 <__aeabi_dmul+0x27a>
 800187e:	220f      	movs	r2, #15
 8001880:	402a      	ands	r2, r5
 8001882:	2a04      	cmp	r2, #4
 8001884:	d005      	beq.n	8001892 <__aeabi_dmul+0x27a>
 8001886:	1d2a      	adds	r2, r5, #4
 8001888:	42aa      	cmp	r2, r5
 800188a:	41ad      	sbcs	r5, r5
 800188c:	426d      	negs	r5, r5
 800188e:	1964      	adds	r4, r4, r5
 8001890:	0015      	movs	r5, r2
 8001892:	01e3      	lsls	r3, r4, #7
 8001894:	d504      	bpl.n	80018a0 <__aeabi_dmul+0x288>
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <__aeabi_dmul+0x39c>)
 800189a:	00c9      	lsls	r1, r1, #3
 800189c:	4014      	ands	r4, r2
 800189e:	4461      	add	r1, ip
 80018a0:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <__aeabi_dmul+0x3a0>)
 80018a2:	4291      	cmp	r1, r2
 80018a4:	dd00      	ble.n	80018a8 <__aeabi_dmul+0x290>
 80018a6:	e726      	b.n	80016f6 <__aeabi_dmul+0xde>
 80018a8:	0762      	lsls	r2, r4, #29
 80018aa:	08ed      	lsrs	r5, r5, #3
 80018ac:	0264      	lsls	r4, r4, #9
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	4315      	orrs	r5, r2
 80018b2:	0b24      	lsrs	r4, r4, #12
 80018b4:	0d4a      	lsrs	r2, r1, #21
 80018b6:	e710      	b.n	80016da <__aeabi_dmul+0xc2>
 80018b8:	4652      	mov	r2, sl
 80018ba:	4332      	orrs	r2, r6
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dmul+0x2a8>
 80018be:	e07f      	b.n	80019c0 <__aeabi_dmul+0x3a8>
 80018c0:	2e00      	cmp	r6, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dmul+0x2ae>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dmul+0x468>
 80018c6:	0030      	movs	r0, r6
 80018c8:	f000 fdd6 	bl	8002478 <__clzsi2>
 80018cc:	0002      	movs	r2, r0
 80018ce:	3a0b      	subs	r2, #11
 80018d0:	231d      	movs	r3, #29
 80018d2:	0001      	movs	r1, r0
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	4652      	mov	r2, sl
 80018d8:	3908      	subs	r1, #8
 80018da:	40da      	lsrs	r2, r3
 80018dc:	408e      	lsls	r6, r1
 80018de:	4316      	orrs	r6, r2
 80018e0:	4652      	mov	r2, sl
 80018e2:	408a      	lsls	r2, r1
 80018e4:	9b00      	ldr	r3, [sp, #0]
 80018e6:	4935      	ldr	r1, [pc, #212]	; (80019bc <__aeabi_dmul+0x3a4>)
 80018e8:	1a18      	subs	r0, r3, r0
 80018ea:	0003      	movs	r3, r0
 80018ec:	468c      	mov	ip, r1
 80018ee:	4463      	add	r3, ip
 80018f0:	2000      	movs	r0, #0
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	e6d3      	b.n	800169e <__aeabi_dmul+0x86>
 80018f6:	0025      	movs	r5, r4
 80018f8:	4305      	orrs	r5, r0
 80018fa:	d04a      	beq.n	8001992 <__aeabi_dmul+0x37a>
 80018fc:	2c00      	cmp	r4, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_dmul+0x2ea>
 8001900:	e0b0      	b.n	8001a64 <__aeabi_dmul+0x44c>
 8001902:	0020      	movs	r0, r4
 8001904:	f000 fdb8 	bl	8002478 <__clzsi2>
 8001908:	0001      	movs	r1, r0
 800190a:	0002      	movs	r2, r0
 800190c:	390b      	subs	r1, #11
 800190e:	231d      	movs	r3, #29
 8001910:	0010      	movs	r0, r2
 8001912:	1a5b      	subs	r3, r3, r1
 8001914:	0031      	movs	r1, r6
 8001916:	0035      	movs	r5, r6
 8001918:	3808      	subs	r0, #8
 800191a:	4084      	lsls	r4, r0
 800191c:	40d9      	lsrs	r1, r3
 800191e:	4085      	lsls	r5, r0
 8001920:	430c      	orrs	r4, r1
 8001922:	4826      	ldr	r0, [pc, #152]	; (80019bc <__aeabi_dmul+0x3a4>)
 8001924:	1a83      	subs	r3, r0, r2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2300      	movs	r3, #0
 800192a:	4699      	mov	r9, r3
 800192c:	469b      	mov	fp, r3
 800192e:	e697      	b.n	8001660 <__aeabi_dmul+0x48>
 8001930:	0005      	movs	r5, r0
 8001932:	4325      	orrs	r5, r4
 8001934:	d126      	bne.n	8001984 <__aeabi_dmul+0x36c>
 8001936:	2208      	movs	r2, #8
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2302      	movs	r3, #2
 800193c:	2400      	movs	r4, #0
 800193e:	4691      	mov	r9, r2
 8001940:	469b      	mov	fp, r3
 8001942:	e68d      	b.n	8001660 <__aeabi_dmul+0x48>
 8001944:	4652      	mov	r2, sl
 8001946:	9b00      	ldr	r3, [sp, #0]
 8001948:	4332      	orrs	r2, r6
 800194a:	d110      	bne.n	800196e <__aeabi_dmul+0x356>
 800194c:	4915      	ldr	r1, [pc, #84]	; (80019a4 <__aeabi_dmul+0x38c>)
 800194e:	2600      	movs	r6, #0
 8001950:	468c      	mov	ip, r1
 8001952:	4463      	add	r3, ip
 8001954:	4649      	mov	r1, r9
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2302      	movs	r3, #2
 800195a:	4319      	orrs	r1, r3
 800195c:	4689      	mov	r9, r1
 800195e:	2002      	movs	r0, #2
 8001960:	e69d      	b.n	800169e <__aeabi_dmul+0x86>
 8001962:	465b      	mov	r3, fp
 8001964:	9701      	str	r7, [sp, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d000      	beq.n	800196c <__aeabi_dmul+0x354>
 800196a:	e6ad      	b.n	80016c8 <__aeabi_dmul+0xb0>
 800196c:	e6c3      	b.n	80016f6 <__aeabi_dmul+0xde>
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <__aeabi_dmul+0x38c>)
 8001970:	2003      	movs	r0, #3
 8001972:	4694      	mov	ip, r2
 8001974:	4463      	add	r3, ip
 8001976:	464a      	mov	r2, r9
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2303      	movs	r3, #3
 800197c:	431a      	orrs	r2, r3
 800197e:	4691      	mov	r9, r2
 8001980:	4652      	mov	r2, sl
 8001982:	e68c      	b.n	800169e <__aeabi_dmul+0x86>
 8001984:	220c      	movs	r2, #12
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2303      	movs	r3, #3
 800198a:	0005      	movs	r5, r0
 800198c:	4691      	mov	r9, r2
 800198e:	469b      	mov	fp, r3
 8001990:	e666      	b.n	8001660 <__aeabi_dmul+0x48>
 8001992:	2304      	movs	r3, #4
 8001994:	4699      	mov	r9, r3
 8001996:	2300      	movs	r3, #0
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	2400      	movs	r4, #0
 800199e:	469b      	mov	fp, r3
 80019a0:	e65e      	b.n	8001660 <__aeabi_dmul+0x48>
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	000007ff 	.word	0x000007ff
 80019a8:	fffffc01 	.word	0xfffffc01
 80019ac:	0800b6b0 	.word	0x0800b6b0
 80019b0:	000003ff 	.word	0x000003ff
 80019b4:	feffffff 	.word	0xfeffffff
 80019b8:	000007fe 	.word	0x000007fe
 80019bc:	fffffc0d 	.word	0xfffffc0d
 80019c0:	4649      	mov	r1, r9
 80019c2:	2301      	movs	r3, #1
 80019c4:	4319      	orrs	r1, r3
 80019c6:	4689      	mov	r9, r1
 80019c8:	2600      	movs	r6, #0
 80019ca:	2001      	movs	r0, #1
 80019cc:	e667      	b.n	800169e <__aeabi_dmul+0x86>
 80019ce:	2300      	movs	r3, #0
 80019d0:	2480      	movs	r4, #128	; 0x80
 80019d2:	2500      	movs	r5, #0
 80019d4:	4a43      	ldr	r2, [pc, #268]	; (8001ae4 <__aeabi_dmul+0x4cc>)
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	0324      	lsls	r4, r4, #12
 80019da:	e67e      	b.n	80016da <__aeabi_dmul+0xc2>
 80019dc:	2001      	movs	r0, #1
 80019de:	1a40      	subs	r0, r0, r1
 80019e0:	2838      	cmp	r0, #56	; 0x38
 80019e2:	dd00      	ble.n	80019e6 <__aeabi_dmul+0x3ce>
 80019e4:	e676      	b.n	80016d4 <__aeabi_dmul+0xbc>
 80019e6:	281f      	cmp	r0, #31
 80019e8:	dd5b      	ble.n	8001aa2 <__aeabi_dmul+0x48a>
 80019ea:	221f      	movs	r2, #31
 80019ec:	0023      	movs	r3, r4
 80019ee:	4252      	negs	r2, r2
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	40cb      	lsrs	r3, r1
 80019f4:	0019      	movs	r1, r3
 80019f6:	2820      	cmp	r0, #32
 80019f8:	d003      	beq.n	8001a02 <__aeabi_dmul+0x3ea>
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <__aeabi_dmul+0x4d0>)
 80019fc:	4462      	add	r2, ip
 80019fe:	4094      	lsls	r4, r2
 8001a00:	4325      	orrs	r5, r4
 8001a02:	1e6a      	subs	r2, r5, #1
 8001a04:	4195      	sbcs	r5, r2
 8001a06:	002a      	movs	r2, r5
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	2107      	movs	r1, #7
 8001a0c:	000d      	movs	r5, r1
 8001a0e:	2400      	movs	r4, #0
 8001a10:	4015      	ands	r5, r2
 8001a12:	4211      	tst	r1, r2
 8001a14:	d05b      	beq.n	8001ace <__aeabi_dmul+0x4b6>
 8001a16:	210f      	movs	r1, #15
 8001a18:	2400      	movs	r4, #0
 8001a1a:	4011      	ands	r1, r2
 8001a1c:	2904      	cmp	r1, #4
 8001a1e:	d053      	beq.n	8001ac8 <__aeabi_dmul+0x4b0>
 8001a20:	1d11      	adds	r1, r2, #4
 8001a22:	4291      	cmp	r1, r2
 8001a24:	4192      	sbcs	r2, r2
 8001a26:	4252      	negs	r2, r2
 8001a28:	18a4      	adds	r4, r4, r2
 8001a2a:	000a      	movs	r2, r1
 8001a2c:	0223      	lsls	r3, r4, #8
 8001a2e:	d54b      	bpl.n	8001ac8 <__aeabi_dmul+0x4b0>
 8001a30:	2201      	movs	r2, #1
 8001a32:	2400      	movs	r4, #0
 8001a34:	2500      	movs	r5, #0
 8001a36:	e650      	b.n	80016da <__aeabi_dmul+0xc2>
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	031b      	lsls	r3, r3, #12
 8001a3c:	421c      	tst	r4, r3
 8001a3e:	d009      	beq.n	8001a54 <__aeabi_dmul+0x43c>
 8001a40:	421e      	tst	r6, r3
 8001a42:	d107      	bne.n	8001a54 <__aeabi_dmul+0x43c>
 8001a44:	4333      	orrs	r3, r6
 8001a46:	031c      	lsls	r4, r3, #12
 8001a48:	4643      	mov	r3, r8
 8001a4a:	0015      	movs	r5, r2
 8001a4c:	0b24      	lsrs	r4, r4, #12
 8001a4e:	4a25      	ldr	r2, [pc, #148]	; (8001ae4 <__aeabi_dmul+0x4cc>)
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	e642      	b.n	80016da <__aeabi_dmul+0xc2>
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	0312      	lsls	r2, r2, #12
 8001a58:	4314      	orrs	r4, r2
 8001a5a:	0324      	lsls	r4, r4, #12
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <__aeabi_dmul+0x4cc>)
 8001a5e:	0b24      	lsrs	r4, r4, #12
 8001a60:	9701      	str	r7, [sp, #4]
 8001a62:	e63a      	b.n	80016da <__aeabi_dmul+0xc2>
 8001a64:	f000 fd08 	bl	8002478 <__clzsi2>
 8001a68:	0001      	movs	r1, r0
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	3115      	adds	r1, #21
 8001a6e:	3220      	adds	r2, #32
 8001a70:	291c      	cmp	r1, #28
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dmul+0x45e>
 8001a74:	e74b      	b.n	800190e <__aeabi_dmul+0x2f6>
 8001a76:	0034      	movs	r4, r6
 8001a78:	3808      	subs	r0, #8
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4084      	lsls	r4, r0
 8001a7e:	e750      	b.n	8001922 <__aeabi_dmul+0x30a>
 8001a80:	f000 fcfa 	bl	8002478 <__clzsi2>
 8001a84:	0003      	movs	r3, r0
 8001a86:	001a      	movs	r2, r3
 8001a88:	3215      	adds	r2, #21
 8001a8a:	3020      	adds	r0, #32
 8001a8c:	2a1c      	cmp	r2, #28
 8001a8e:	dc00      	bgt.n	8001a92 <__aeabi_dmul+0x47a>
 8001a90:	e71e      	b.n	80018d0 <__aeabi_dmul+0x2b8>
 8001a92:	4656      	mov	r6, sl
 8001a94:	3b08      	subs	r3, #8
 8001a96:	2200      	movs	r2, #0
 8001a98:	409e      	lsls	r6, r3
 8001a9a:	e723      	b.n	80018e4 <__aeabi_dmul+0x2cc>
 8001a9c:	9b00      	ldr	r3, [sp, #0]
 8001a9e:	469c      	mov	ip, r3
 8001aa0:	e6e6      	b.n	8001870 <__aeabi_dmul+0x258>
 8001aa2:	4912      	ldr	r1, [pc, #72]	; (8001aec <__aeabi_dmul+0x4d4>)
 8001aa4:	0022      	movs	r2, r4
 8001aa6:	4461      	add	r1, ip
 8001aa8:	002e      	movs	r6, r5
 8001aaa:	408d      	lsls	r5, r1
 8001aac:	408a      	lsls	r2, r1
 8001aae:	40c6      	lsrs	r6, r0
 8001ab0:	1e69      	subs	r1, r5, #1
 8001ab2:	418d      	sbcs	r5, r1
 8001ab4:	4332      	orrs	r2, r6
 8001ab6:	432a      	orrs	r2, r5
 8001ab8:	40c4      	lsrs	r4, r0
 8001aba:	0753      	lsls	r3, r2, #29
 8001abc:	d0b6      	beq.n	8001a2c <__aeabi_dmul+0x414>
 8001abe:	210f      	movs	r1, #15
 8001ac0:	4011      	ands	r1, r2
 8001ac2:	2904      	cmp	r1, #4
 8001ac4:	d1ac      	bne.n	8001a20 <__aeabi_dmul+0x408>
 8001ac6:	e7b1      	b.n	8001a2c <__aeabi_dmul+0x414>
 8001ac8:	0765      	lsls	r5, r4, #29
 8001aca:	0264      	lsls	r4, r4, #9
 8001acc:	0b24      	lsrs	r4, r4, #12
 8001ace:	08d2      	lsrs	r2, r2, #3
 8001ad0:	4315      	orrs	r5, r2
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	e601      	b.n	80016da <__aeabi_dmul+0xc2>
 8001ad6:	2280      	movs	r2, #128	; 0x80
 8001ad8:	0312      	lsls	r2, r2, #12
 8001ada:	4314      	orrs	r4, r2
 8001adc:	0324      	lsls	r4, r4, #12
 8001ade:	4a01      	ldr	r2, [pc, #4]	; (8001ae4 <__aeabi_dmul+0x4cc>)
 8001ae0:	0b24      	lsrs	r4, r4, #12
 8001ae2:	e5fa      	b.n	80016da <__aeabi_dmul+0xc2>
 8001ae4:	000007ff 	.word	0x000007ff
 8001ae8:	0000043e 	.word	0x0000043e
 8001aec:	0000041e 	.word	0x0000041e

08001af0 <__aeabi_dsub>:
 8001af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af2:	4657      	mov	r7, sl
 8001af4:	464e      	mov	r6, r9
 8001af6:	4645      	mov	r5, r8
 8001af8:	46de      	mov	lr, fp
 8001afa:	b5e0      	push	{r5, r6, r7, lr}
 8001afc:	001e      	movs	r6, r3
 8001afe:	0017      	movs	r7, r2
 8001b00:	004a      	lsls	r2, r1, #1
 8001b02:	030b      	lsls	r3, r1, #12
 8001b04:	0d52      	lsrs	r2, r2, #21
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	4690      	mov	r8, r2
 8001b0a:	0f42      	lsrs	r2, r0, #29
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	0fcd      	lsrs	r5, r1, #31
 8001b10:	4ccd      	ldr	r4, [pc, #820]	; (8001e48 <__aeabi_dsub+0x358>)
 8001b12:	0331      	lsls	r1, r6, #12
 8001b14:	00c3      	lsls	r3, r0, #3
 8001b16:	4694      	mov	ip, r2
 8001b18:	0070      	lsls	r0, r6, #1
 8001b1a:	0f7a      	lsrs	r2, r7, #29
 8001b1c:	0a49      	lsrs	r1, r1, #9
 8001b1e:	00ff      	lsls	r7, r7, #3
 8001b20:	469a      	mov	sl, r3
 8001b22:	46b9      	mov	r9, r7
 8001b24:	0d40      	lsrs	r0, r0, #21
 8001b26:	0ff6      	lsrs	r6, r6, #31
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	42a0      	cmp	r0, r4
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x40>
 8001b2e:	e0b1      	b.n	8001c94 <__aeabi_dsub+0x1a4>
 8001b30:	2201      	movs	r2, #1
 8001b32:	4056      	eors	r6, r2
 8001b34:	46b3      	mov	fp, r6
 8001b36:	42b5      	cmp	r5, r6
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x4c>
 8001b3a:	e088      	b.n	8001c4e <__aeabi_dsub+0x15e>
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	1a12      	subs	r2, r2, r0
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x56>
 8001b44:	e0ae      	b.n	8001ca4 <__aeabi_dsub+0x1b4>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dsub+0x5c>
 8001b4a:	e0c1      	b.n	8001cd0 <__aeabi_dsub+0x1e0>
 8001b4c:	48be      	ldr	r0, [pc, #760]	; (8001e48 <__aeabi_dsub+0x358>)
 8001b4e:	4580      	cmp	r8, r0
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dsub+0x64>
 8001b52:	e151      	b.n	8001df8 <__aeabi_dsub+0x308>
 8001b54:	2080      	movs	r0, #128	; 0x80
 8001b56:	0400      	lsls	r0, r0, #16
 8001b58:	4301      	orrs	r1, r0
 8001b5a:	2a38      	cmp	r2, #56	; 0x38
 8001b5c:	dd00      	ble.n	8001b60 <__aeabi_dsub+0x70>
 8001b5e:	e17b      	b.n	8001e58 <__aeabi_dsub+0x368>
 8001b60:	2a1f      	cmp	r2, #31
 8001b62:	dd00      	ble.n	8001b66 <__aeabi_dsub+0x76>
 8001b64:	e1ee      	b.n	8001f44 <__aeabi_dsub+0x454>
 8001b66:	2020      	movs	r0, #32
 8001b68:	003e      	movs	r6, r7
 8001b6a:	1a80      	subs	r0, r0, r2
 8001b6c:	000c      	movs	r4, r1
 8001b6e:	40d6      	lsrs	r6, r2
 8001b70:	40d1      	lsrs	r1, r2
 8001b72:	4087      	lsls	r7, r0
 8001b74:	4662      	mov	r2, ip
 8001b76:	4084      	lsls	r4, r0
 8001b78:	1a52      	subs	r2, r2, r1
 8001b7a:	1e78      	subs	r0, r7, #1
 8001b7c:	4187      	sbcs	r7, r0
 8001b7e:	4694      	mov	ip, r2
 8001b80:	4334      	orrs	r4, r6
 8001b82:	4327      	orrs	r7, r4
 8001b84:	1bdc      	subs	r4, r3, r7
 8001b86:	42a3      	cmp	r3, r4
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	4662      	mov	r2, ip
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4699      	mov	r9, r3
 8001b92:	464b      	mov	r3, r9
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	d400      	bmi.n	8001b9a <__aeabi_dsub+0xaa>
 8001b98:	e118      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	0258      	lsls	r0, r3, #9
 8001b9e:	0a43      	lsrs	r3, r0, #9
 8001ba0:	4699      	mov	r9, r3
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0xba>
 8001ba8:	e137      	b.n	8001e1a <__aeabi_dsub+0x32a>
 8001baa:	4648      	mov	r0, r9
 8001bac:	f000 fc64 	bl	8002478 <__clzsi2>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	3908      	subs	r1, #8
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	0022      	movs	r2, r4
 8001bb8:	4648      	mov	r0, r9
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	40da      	lsrs	r2, r3
 8001bbe:	4088      	lsls	r0, r1
 8001bc0:	408c      	lsls	r4, r1
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	4310      	orrs	r0, r2
 8001bc6:	4588      	cmp	r8, r1
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0xdc>
 8001bca:	e136      	b.n	8001e3a <__aeabi_dsub+0x34a>
 8001bcc:	1ac9      	subs	r1, r1, r3
 8001bce:	1c4b      	adds	r3, r1, #1
 8001bd0:	2b1f      	cmp	r3, #31
 8001bd2:	dd00      	ble.n	8001bd6 <__aeabi_dsub+0xe6>
 8001bd4:	e0ea      	b.n	8001dac <__aeabi_dsub+0x2bc>
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	0026      	movs	r6, r4
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	0001      	movs	r1, r0
 8001bde:	4094      	lsls	r4, r2
 8001be0:	40de      	lsrs	r6, r3
 8001be2:	40d8      	lsrs	r0, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	4091      	lsls	r1, r2
 8001be8:	1e62      	subs	r2, r4, #1
 8001bea:	4194      	sbcs	r4, r2
 8001bec:	4681      	mov	r9, r0
 8001bee:	4698      	mov	r8, r3
 8001bf0:	4331      	orrs	r1, r6
 8001bf2:	430c      	orrs	r4, r1
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d009      	beq.n	8001c0c <__aeabi_dsub+0x11c>
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	4023      	ands	r3, r4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <__aeabi_dsub+0x11c>
 8001c00:	1d23      	adds	r3, r4, #4
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4264      	negs	r4, r4
 8001c08:	44a1      	add	r9, r4
 8001c0a:	001c      	movs	r4, r3
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	d400      	bmi.n	8001c14 <__aeabi_dsub+0x124>
 8001c12:	e0de      	b.n	8001dd2 <__aeabi_dsub+0x2e2>
 8001c14:	4641      	mov	r1, r8
 8001c16:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <__aeabi_dsub+0x358>)
 8001c18:	3101      	adds	r1, #1
 8001c1a:	4299      	cmp	r1, r3
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x130>
 8001c1e:	e0e7      	b.n	8001df0 <__aeabi_dsub+0x300>
 8001c20:	464b      	mov	r3, r9
 8001c22:	488a      	ldr	r0, [pc, #552]	; (8001e4c <__aeabi_dsub+0x35c>)
 8001c24:	08e4      	lsrs	r4, r4, #3
 8001c26:	4003      	ands	r3, r0
 8001c28:	0018      	movs	r0, r3
 8001c2a:	0549      	lsls	r1, r1, #21
 8001c2c:	075b      	lsls	r3, r3, #29
 8001c2e:	0240      	lsls	r0, r0, #9
 8001c30:	4323      	orrs	r3, r4
 8001c32:	0d4a      	lsrs	r2, r1, #21
 8001c34:	0b04      	lsrs	r4, r0, #12
 8001c36:	0512      	lsls	r2, r2, #20
 8001c38:	07ed      	lsls	r5, r5, #31
 8001c3a:	4322      	orrs	r2, r4
 8001c3c:	432a      	orrs	r2, r5
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0011      	movs	r1, r2
 8001c42:	bcf0      	pop	{r4, r5, r6, r7}
 8001c44:	46bb      	mov	fp, r7
 8001c46:	46b2      	mov	sl, r6
 8001c48:	46a9      	mov	r9, r5
 8001c4a:	46a0      	mov	r8, r4
 8001c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c4e:	4642      	mov	r2, r8
 8001c50:	1a12      	subs	r2, r2, r0
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	dd52      	ble.n	8001cfc <__aeabi_dsub+0x20c>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x16c>
 8001c5a:	e09c      	b.n	8001d96 <__aeabi_dsub+0x2a6>
 8001c5c:	45a0      	cmp	r8, r4
 8001c5e:	d100      	bne.n	8001c62 <__aeabi_dsub+0x172>
 8001c60:	e0ca      	b.n	8001df8 <__aeabi_dsub+0x308>
 8001c62:	2080      	movs	r0, #128	; 0x80
 8001c64:	0400      	lsls	r0, r0, #16
 8001c66:	4301      	orrs	r1, r0
 8001c68:	2a38      	cmp	r2, #56	; 0x38
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x17e>
 8001c6c:	e149      	b.n	8001f02 <__aeabi_dsub+0x412>
 8001c6e:	2a1f      	cmp	r2, #31
 8001c70:	dc00      	bgt.n	8001c74 <__aeabi_dsub+0x184>
 8001c72:	e197      	b.n	8001fa4 <__aeabi_dsub+0x4b4>
 8001c74:	0010      	movs	r0, r2
 8001c76:	000e      	movs	r6, r1
 8001c78:	3820      	subs	r0, #32
 8001c7a:	40c6      	lsrs	r6, r0
 8001c7c:	2a20      	cmp	r2, #32
 8001c7e:	d004      	beq.n	8001c8a <__aeabi_dsub+0x19a>
 8001c80:	2040      	movs	r0, #64	; 0x40
 8001c82:	1a82      	subs	r2, r0, r2
 8001c84:	4091      	lsls	r1, r2
 8001c86:	430f      	orrs	r7, r1
 8001c88:	46b9      	mov	r9, r7
 8001c8a:	464c      	mov	r4, r9
 8001c8c:	1e62      	subs	r2, r4, #1
 8001c8e:	4194      	sbcs	r4, r2
 8001c90:	4334      	orrs	r4, r6
 8001c92:	e13a      	b.n	8001f0a <__aeabi_dsub+0x41a>
 8001c94:	000a      	movs	r2, r1
 8001c96:	433a      	orrs	r2, r7
 8001c98:	d028      	beq.n	8001cec <__aeabi_dsub+0x1fc>
 8001c9a:	46b3      	mov	fp, r6
 8001c9c:	42b5      	cmp	r5, r6
 8001c9e:	d02b      	beq.n	8001cf8 <__aeabi_dsub+0x208>
 8001ca0:	4a6b      	ldr	r2, [pc, #428]	; (8001e50 <__aeabi_dsub+0x360>)
 8001ca2:	4442      	add	r2, r8
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d05d      	beq.n	8001d64 <__aeabi_dsub+0x274>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	4644      	mov	r4, r8
 8001cac:	1a82      	subs	r2, r0, r2
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d000      	beq.n	8001cb4 <__aeabi_dsub+0x1c4>
 8001cb2:	e0f5      	b.n	8001ea0 <__aeabi_dsub+0x3b0>
 8001cb4:	4665      	mov	r5, ip
 8001cb6:	431d      	orrs	r5, r3
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x1cc>
 8001cba:	e19c      	b.n	8001ff6 <__aeabi_dsub+0x506>
 8001cbc:	1e55      	subs	r5, r2, #1
 8001cbe:	2a01      	cmp	r2, #1
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x1d4>
 8001cc2:	e1fb      	b.n	80020bc <__aeabi_dsub+0x5cc>
 8001cc4:	4c60      	ldr	r4, [pc, #384]	; (8001e48 <__aeabi_dsub+0x358>)
 8001cc6:	42a2      	cmp	r2, r4
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x1dc>
 8001cca:	e1bd      	b.n	8002048 <__aeabi_dsub+0x558>
 8001ccc:	002a      	movs	r2, r5
 8001cce:	e0f0      	b.n	8001eb2 <__aeabi_dsub+0x3c2>
 8001cd0:	0008      	movs	r0, r1
 8001cd2:	4338      	orrs	r0, r7
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x1e8>
 8001cd6:	e0c3      	b.n	8001e60 <__aeabi_dsub+0x370>
 8001cd8:	1e50      	subs	r0, r2, #1
 8001cda:	2a01      	cmp	r2, #1
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x1f0>
 8001cde:	e1a8      	b.n	8002032 <__aeabi_dsub+0x542>
 8001ce0:	4c59      	ldr	r4, [pc, #356]	; (8001e48 <__aeabi_dsub+0x358>)
 8001ce2:	42a2      	cmp	r2, r4
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x1f8>
 8001ce6:	e087      	b.n	8001df8 <__aeabi_dsub+0x308>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	e736      	b.n	8001b5a <__aeabi_dsub+0x6a>
 8001cec:	2201      	movs	r2, #1
 8001cee:	4056      	eors	r6, r2
 8001cf0:	46b3      	mov	fp, r6
 8001cf2:	42b5      	cmp	r5, r6
 8001cf4:	d000      	beq.n	8001cf8 <__aeabi_dsub+0x208>
 8001cf6:	e721      	b.n	8001b3c <__aeabi_dsub+0x4c>
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <__aeabi_dsub+0x360>)
 8001cfa:	4442      	add	r2, r8
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x212>
 8001d00:	e0b5      	b.n	8001e6e <__aeabi_dsub+0x37e>
 8001d02:	4642      	mov	r2, r8
 8001d04:	4644      	mov	r4, r8
 8001d06:	1a82      	subs	r2, r0, r2
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x21e>
 8001d0c:	e138      	b.n	8001f80 <__aeabi_dsub+0x490>
 8001d0e:	4e4e      	ldr	r6, [pc, #312]	; (8001e48 <__aeabi_dsub+0x358>)
 8001d10:	42b0      	cmp	r0, r6
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x226>
 8001d14:	e1de      	b.n	80020d4 <__aeabi_dsub+0x5e4>
 8001d16:	2680      	movs	r6, #128	; 0x80
 8001d18:	4664      	mov	r4, ip
 8001d1a:	0436      	lsls	r6, r6, #16
 8001d1c:	4334      	orrs	r4, r6
 8001d1e:	46a4      	mov	ip, r4
 8001d20:	2a38      	cmp	r2, #56	; 0x38
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_dsub+0x236>
 8001d24:	e196      	b.n	8002054 <__aeabi_dsub+0x564>
 8001d26:	2a1f      	cmp	r2, #31
 8001d28:	dd00      	ble.n	8001d2c <__aeabi_dsub+0x23c>
 8001d2a:	e224      	b.n	8002176 <__aeabi_dsub+0x686>
 8001d2c:	2620      	movs	r6, #32
 8001d2e:	1ab4      	subs	r4, r6, r2
 8001d30:	46a2      	mov	sl, r4
 8001d32:	4664      	mov	r4, ip
 8001d34:	4656      	mov	r6, sl
 8001d36:	40b4      	lsls	r4, r6
 8001d38:	46a1      	mov	r9, r4
 8001d3a:	001c      	movs	r4, r3
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	40d4      	lsrs	r4, r2
 8001d40:	4326      	orrs	r6, r4
 8001d42:	0034      	movs	r4, r6
 8001d44:	4656      	mov	r6, sl
 8001d46:	40b3      	lsls	r3, r6
 8001d48:	1e5e      	subs	r6, r3, #1
 8001d4a:	41b3      	sbcs	r3, r6
 8001d4c:	431c      	orrs	r4, r3
 8001d4e:	4663      	mov	r3, ip
 8001d50:	40d3      	lsrs	r3, r2
 8001d52:	18c9      	adds	r1, r1, r3
 8001d54:	19e4      	adds	r4, r4, r7
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	41bf      	sbcs	r7, r7
 8001d5a:	427f      	negs	r7, r7
 8001d5c:	46b9      	mov	r9, r7
 8001d5e:	4680      	mov	r8, r0
 8001d60:	4489      	add	r9, r1
 8001d62:	e0d8      	b.n	8001f16 <__aeabi_dsub+0x426>
 8001d64:	4640      	mov	r0, r8
 8001d66:	4c3b      	ldr	r4, [pc, #236]	; (8001e54 <__aeabi_dsub+0x364>)
 8001d68:	3001      	adds	r0, #1
 8001d6a:	4220      	tst	r0, r4
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x280>
 8001d6e:	e0b4      	b.n	8001eda <__aeabi_dsub+0x3ea>
 8001d70:	4640      	mov	r0, r8
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d000      	beq.n	8001d78 <__aeabi_dsub+0x288>
 8001d76:	e144      	b.n	8002002 <__aeabi_dsub+0x512>
 8001d78:	4660      	mov	r0, ip
 8001d7a:	4318      	orrs	r0, r3
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x290>
 8001d7e:	e190      	b.n	80020a2 <__aeabi_dsub+0x5b2>
 8001d80:	0008      	movs	r0, r1
 8001d82:	4338      	orrs	r0, r7
 8001d84:	d000      	beq.n	8001d88 <__aeabi_dsub+0x298>
 8001d86:	e1aa      	b.n	80020de <__aeabi_dsub+0x5ee>
 8001d88:	4661      	mov	r1, ip
 8001d8a:	08db      	lsrs	r3, r3, #3
 8001d8c:	0749      	lsls	r1, r1, #29
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	4661      	mov	r1, ip
 8001d92:	08cc      	lsrs	r4, r1, #3
 8001d94:	e027      	b.n	8001de6 <__aeabi_dsub+0x2f6>
 8001d96:	0008      	movs	r0, r1
 8001d98:	4338      	orrs	r0, r7
 8001d9a:	d061      	beq.n	8001e60 <__aeabi_dsub+0x370>
 8001d9c:	1e50      	subs	r0, r2, #1
 8001d9e:	2a01      	cmp	r2, #1
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x2b4>
 8001da2:	e139      	b.n	8002018 <__aeabi_dsub+0x528>
 8001da4:	42a2      	cmp	r2, r4
 8001da6:	d027      	beq.n	8001df8 <__aeabi_dsub+0x308>
 8001da8:	0002      	movs	r2, r0
 8001daa:	e75d      	b.n	8001c68 <__aeabi_dsub+0x178>
 8001dac:	0002      	movs	r2, r0
 8001dae:	391f      	subs	r1, #31
 8001db0:	40ca      	lsrs	r2, r1
 8001db2:	0011      	movs	r1, r2
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d003      	beq.n	8001dc0 <__aeabi_dsub+0x2d0>
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4098      	lsls	r0, r3
 8001dbe:	4304      	orrs	r4, r0
 8001dc0:	1e63      	subs	r3, r4, #1
 8001dc2:	419c      	sbcs	r4, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4698      	mov	r8, r3
 8001dca:	430c      	orrs	r4, r1
 8001dcc:	0763      	lsls	r3, r4, #29
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x2e2>
 8001dd0:	e712      	b.n	8001bf8 <__aeabi_dsub+0x108>
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	464a      	mov	r2, r9
 8001dd6:	08e4      	lsrs	r4, r4, #3
 8001dd8:	075b      	lsls	r3, r3, #29
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	08d4      	lsrs	r4, r2, #3
 8001dde:	4642      	mov	r2, r8
 8001de0:	4919      	ldr	r1, [pc, #100]	; (8001e48 <__aeabi_dsub+0x358>)
 8001de2:	428a      	cmp	r2, r1
 8001de4:	d00e      	beq.n	8001e04 <__aeabi_dsub+0x314>
 8001de6:	0324      	lsls	r4, r4, #12
 8001de8:	0552      	lsls	r2, r2, #21
 8001dea:	0b24      	lsrs	r4, r4, #12
 8001dec:	0d52      	lsrs	r2, r2, #21
 8001dee:	e722      	b.n	8001c36 <__aeabi_dsub+0x146>
 8001df0:	000a      	movs	r2, r1
 8001df2:	2400      	movs	r4, #0
 8001df4:	2300      	movs	r3, #0
 8001df6:	e71e      	b.n	8001c36 <__aeabi_dsub+0x146>
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	4662      	mov	r2, ip
 8001dfc:	0752      	lsls	r2, r2, #29
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	4662      	mov	r2, ip
 8001e02:	08d4      	lsrs	r4, r2, #3
 8001e04:	001a      	movs	r2, r3
 8001e06:	4322      	orrs	r2, r4
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x31c>
 8001e0a:	e1fc      	b.n	8002206 <__aeabi_dsub+0x716>
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0312      	lsls	r2, r2, #12
 8001e10:	4314      	orrs	r4, r2
 8001e12:	0324      	lsls	r4, r4, #12
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <__aeabi_dsub+0x358>)
 8001e16:	0b24      	lsrs	r4, r4, #12
 8001e18:	e70d      	b.n	8001c36 <__aeabi_dsub+0x146>
 8001e1a:	0020      	movs	r0, r4
 8001e1c:	f000 fb2c 	bl	8002478 <__clzsi2>
 8001e20:	0001      	movs	r1, r0
 8001e22:	3118      	adds	r1, #24
 8001e24:	291f      	cmp	r1, #31
 8001e26:	dc00      	bgt.n	8001e2a <__aeabi_dsub+0x33a>
 8001e28:	e6c4      	b.n	8001bb4 <__aeabi_dsub+0xc4>
 8001e2a:	3808      	subs	r0, #8
 8001e2c:	4084      	lsls	r4, r0
 8001e2e:	4643      	mov	r3, r8
 8001e30:	0020      	movs	r0, r4
 8001e32:	2400      	movs	r4, #0
 8001e34:	4588      	cmp	r8, r1
 8001e36:	dc00      	bgt.n	8001e3a <__aeabi_dsub+0x34a>
 8001e38:	e6c8      	b.n	8001bcc <__aeabi_dsub+0xdc>
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__aeabi_dsub+0x35c>)
 8001e3c:	1a5b      	subs	r3, r3, r1
 8001e3e:	4010      	ands	r0, r2
 8001e40:	4698      	mov	r8, r3
 8001e42:	4681      	mov	r9, r0
 8001e44:	e6d6      	b.n	8001bf4 <__aeabi_dsub+0x104>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	000007ff 	.word	0x000007ff
 8001e4c:	ff7fffff 	.word	0xff7fffff
 8001e50:	fffff801 	.word	0xfffff801
 8001e54:	000007fe 	.word	0x000007fe
 8001e58:	430f      	orrs	r7, r1
 8001e5a:	1e7a      	subs	r2, r7, #1
 8001e5c:	4197      	sbcs	r7, r2
 8001e5e:	e691      	b.n	8001b84 <__aeabi_dsub+0x94>
 8001e60:	4661      	mov	r1, ip
 8001e62:	08db      	lsrs	r3, r3, #3
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	430b      	orrs	r3, r1
 8001e68:	4661      	mov	r1, ip
 8001e6a:	08cc      	lsrs	r4, r1, #3
 8001e6c:	e7b8      	b.n	8001de0 <__aeabi_dsub+0x2f0>
 8001e6e:	4640      	mov	r0, r8
 8001e70:	4cd3      	ldr	r4, [pc, #844]	; (80021c0 <__aeabi_dsub+0x6d0>)
 8001e72:	3001      	adds	r0, #1
 8001e74:	4220      	tst	r0, r4
 8001e76:	d000      	beq.n	8001e7a <__aeabi_dsub+0x38a>
 8001e78:	e0a2      	b.n	8001fc0 <__aeabi_dsub+0x4d0>
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d000      	beq.n	8001e82 <__aeabi_dsub+0x392>
 8001e80:	e101      	b.n	8002086 <__aeabi_dsub+0x596>
 8001e82:	4660      	mov	r0, ip
 8001e84:	4318      	orrs	r0, r3
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x39a>
 8001e88:	e15e      	b.n	8002148 <__aeabi_dsub+0x658>
 8001e8a:	0008      	movs	r0, r1
 8001e8c:	4338      	orrs	r0, r7
 8001e8e:	d000      	beq.n	8001e92 <__aeabi_dsub+0x3a2>
 8001e90:	e15f      	b.n	8002152 <__aeabi_dsub+0x662>
 8001e92:	4661      	mov	r1, ip
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	0749      	lsls	r1, r1, #29
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4661      	mov	r1, ip
 8001e9c:	08cc      	lsrs	r4, r1, #3
 8001e9e:	e7a2      	b.n	8001de6 <__aeabi_dsub+0x2f6>
 8001ea0:	4dc8      	ldr	r5, [pc, #800]	; (80021c4 <__aeabi_dsub+0x6d4>)
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x3b8>
 8001ea6:	e0cf      	b.n	8002048 <__aeabi_dsub+0x558>
 8001ea8:	2580      	movs	r5, #128	; 0x80
 8001eaa:	4664      	mov	r4, ip
 8001eac:	042d      	lsls	r5, r5, #16
 8001eae:	432c      	orrs	r4, r5
 8001eb0:	46a4      	mov	ip, r4
 8001eb2:	2a38      	cmp	r2, #56	; 0x38
 8001eb4:	dc56      	bgt.n	8001f64 <__aeabi_dsub+0x474>
 8001eb6:	2a1f      	cmp	r2, #31
 8001eb8:	dd00      	ble.n	8001ebc <__aeabi_dsub+0x3cc>
 8001eba:	e0d1      	b.n	8002060 <__aeabi_dsub+0x570>
 8001ebc:	2520      	movs	r5, #32
 8001ebe:	001e      	movs	r6, r3
 8001ec0:	1aad      	subs	r5, r5, r2
 8001ec2:	4664      	mov	r4, ip
 8001ec4:	40ab      	lsls	r3, r5
 8001ec6:	40ac      	lsls	r4, r5
 8001ec8:	40d6      	lsrs	r6, r2
 8001eca:	1e5d      	subs	r5, r3, #1
 8001ecc:	41ab      	sbcs	r3, r5
 8001ece:	4334      	orrs	r4, r6
 8001ed0:	4323      	orrs	r3, r4
 8001ed2:	4664      	mov	r4, ip
 8001ed4:	40d4      	lsrs	r4, r2
 8001ed6:	1b09      	subs	r1, r1, r4
 8001ed8:	e049      	b.n	8001f6e <__aeabi_dsub+0x47e>
 8001eda:	4660      	mov	r0, ip
 8001edc:	1bdc      	subs	r4, r3, r7
 8001ede:	1a46      	subs	r6, r0, r1
 8001ee0:	42a3      	cmp	r3, r4
 8001ee2:	4180      	sbcs	r0, r0
 8001ee4:	4240      	negs	r0, r0
 8001ee6:	4681      	mov	r9, r0
 8001ee8:	0030      	movs	r0, r6
 8001eea:	464e      	mov	r6, r9
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	4681      	mov	r9, r0
 8001ef0:	0200      	lsls	r0, r0, #8
 8001ef2:	d476      	bmi.n	8001fe2 <__aeabi_dsub+0x4f2>
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x40c>
 8001efa:	e652      	b.n	8001ba2 <__aeabi_dsub+0xb2>
 8001efc:	2400      	movs	r4, #0
 8001efe:	2500      	movs	r5, #0
 8001f00:	e771      	b.n	8001de6 <__aeabi_dsub+0x2f6>
 8001f02:	4339      	orrs	r1, r7
 8001f04:	000c      	movs	r4, r1
 8001f06:	1e62      	subs	r2, r4, #1
 8001f08:	4194      	sbcs	r4, r2
 8001f0a:	18e4      	adds	r4, r4, r3
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	419b      	sbcs	r3, r3
 8001f10:	425b      	negs	r3, r3
 8001f12:	4463      	add	r3, ip
 8001f14:	4699      	mov	r9, r3
 8001f16:	464b      	mov	r3, r9
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	d400      	bmi.n	8001f1e <__aeabi_dsub+0x42e>
 8001f1c:	e756      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	469c      	mov	ip, r3
 8001f22:	4ba8      	ldr	r3, [pc, #672]	; (80021c4 <__aeabi_dsub+0x6d4>)
 8001f24:	44e0      	add	r8, ip
 8001f26:	4598      	cmp	r8, r3
 8001f28:	d038      	beq.n	8001f9c <__aeabi_dsub+0x4ac>
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	48a6      	ldr	r0, [pc, #664]	; (80021c8 <__aeabi_dsub+0x6d8>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4003      	ands	r3, r0
 8001f32:	0018      	movs	r0, r3
 8001f34:	0863      	lsrs	r3, r4, #1
 8001f36:	4014      	ands	r4, r2
 8001f38:	431c      	orrs	r4, r3
 8001f3a:	07c3      	lsls	r3, r0, #31
 8001f3c:	431c      	orrs	r4, r3
 8001f3e:	0843      	lsrs	r3, r0, #1
 8001f40:	4699      	mov	r9, r3
 8001f42:	e657      	b.n	8001bf4 <__aeabi_dsub+0x104>
 8001f44:	0010      	movs	r0, r2
 8001f46:	000e      	movs	r6, r1
 8001f48:	3820      	subs	r0, #32
 8001f4a:	40c6      	lsrs	r6, r0
 8001f4c:	2a20      	cmp	r2, #32
 8001f4e:	d004      	beq.n	8001f5a <__aeabi_dsub+0x46a>
 8001f50:	2040      	movs	r0, #64	; 0x40
 8001f52:	1a82      	subs	r2, r0, r2
 8001f54:	4091      	lsls	r1, r2
 8001f56:	430f      	orrs	r7, r1
 8001f58:	46b9      	mov	r9, r7
 8001f5a:	464f      	mov	r7, r9
 8001f5c:	1e7a      	subs	r2, r7, #1
 8001f5e:	4197      	sbcs	r7, r2
 8001f60:	4337      	orrs	r7, r6
 8001f62:	e60f      	b.n	8001b84 <__aeabi_dsub+0x94>
 8001f64:	4662      	mov	r2, ip
 8001f66:	431a      	orrs	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	4193      	sbcs	r3, r2
 8001f6e:	1afc      	subs	r4, r7, r3
 8001f70:	42a7      	cmp	r7, r4
 8001f72:	41bf      	sbcs	r7, r7
 8001f74:	427f      	negs	r7, r7
 8001f76:	1bcb      	subs	r3, r1, r7
 8001f78:	4699      	mov	r9, r3
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	4680      	mov	r8, r0
 8001f7e:	e608      	b.n	8001b92 <__aeabi_dsub+0xa2>
 8001f80:	4666      	mov	r6, ip
 8001f82:	431e      	orrs	r6, r3
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x498>
 8001f86:	e0be      	b.n	8002106 <__aeabi_dsub+0x616>
 8001f88:	1e56      	subs	r6, r2, #1
 8001f8a:	2a01      	cmp	r2, #1
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x4a0>
 8001f8e:	e109      	b.n	80021a4 <__aeabi_dsub+0x6b4>
 8001f90:	4c8c      	ldr	r4, [pc, #560]	; (80021c4 <__aeabi_dsub+0x6d4>)
 8001f92:	42a2      	cmp	r2, r4
 8001f94:	d100      	bne.n	8001f98 <__aeabi_dsub+0x4a8>
 8001f96:	e119      	b.n	80021cc <__aeabi_dsub+0x6dc>
 8001f98:	0032      	movs	r2, r6
 8001f9a:	e6c1      	b.n	8001d20 <__aeabi_dsub+0x230>
 8001f9c:	4642      	mov	r2, r8
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e648      	b.n	8001c36 <__aeabi_dsub+0x146>
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	000c      	movs	r4, r1
 8001fa8:	1a80      	subs	r0, r0, r2
 8001faa:	003e      	movs	r6, r7
 8001fac:	4087      	lsls	r7, r0
 8001fae:	4084      	lsls	r4, r0
 8001fb0:	40d6      	lsrs	r6, r2
 8001fb2:	1e78      	subs	r0, r7, #1
 8001fb4:	4187      	sbcs	r7, r0
 8001fb6:	40d1      	lsrs	r1, r2
 8001fb8:	4334      	orrs	r4, r6
 8001fba:	433c      	orrs	r4, r7
 8001fbc:	448c      	add	ip, r1
 8001fbe:	e7a4      	b.n	8001f0a <__aeabi_dsub+0x41a>
 8001fc0:	4a80      	ldr	r2, [pc, #512]	; (80021c4 <__aeabi_dsub+0x6d4>)
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x4d8>
 8001fc6:	e0e9      	b.n	800219c <__aeabi_dsub+0x6ac>
 8001fc8:	19df      	adds	r7, r3, r7
 8001fca:	429f      	cmp	r7, r3
 8001fcc:	419b      	sbcs	r3, r3
 8001fce:	4461      	add	r1, ip
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	18c9      	adds	r1, r1, r3
 8001fd4:	07cc      	lsls	r4, r1, #31
 8001fd6:	087f      	lsrs	r7, r7, #1
 8001fd8:	084b      	lsrs	r3, r1, #1
 8001fda:	4699      	mov	r9, r3
 8001fdc:	4680      	mov	r8, r0
 8001fde:	433c      	orrs	r4, r7
 8001fe0:	e6f4      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8001fe2:	1afc      	subs	r4, r7, r3
 8001fe4:	42a7      	cmp	r7, r4
 8001fe6:	41bf      	sbcs	r7, r7
 8001fe8:	4663      	mov	r3, ip
 8001fea:	427f      	negs	r7, r7
 8001fec:	1ac9      	subs	r1, r1, r3
 8001fee:	1bcb      	subs	r3, r1, r7
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	465d      	mov	r5, fp
 8001ff4:	e5d5      	b.n	8001ba2 <__aeabi_dsub+0xb2>
 8001ff6:	08ff      	lsrs	r7, r7, #3
 8001ff8:	074b      	lsls	r3, r1, #29
 8001ffa:	465d      	mov	r5, fp
 8001ffc:	433b      	orrs	r3, r7
 8001ffe:	08cc      	lsrs	r4, r1, #3
 8002000:	e6ee      	b.n	8001de0 <__aeabi_dsub+0x2f0>
 8002002:	4662      	mov	r2, ip
 8002004:	431a      	orrs	r2, r3
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x51a>
 8002008:	e082      	b.n	8002110 <__aeabi_dsub+0x620>
 800200a:	000b      	movs	r3, r1
 800200c:	433b      	orrs	r3, r7
 800200e:	d11b      	bne.n	8002048 <__aeabi_dsub+0x558>
 8002010:	2480      	movs	r4, #128	; 0x80
 8002012:	2500      	movs	r5, #0
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	e6f9      	b.n	8001e0c <__aeabi_dsub+0x31c>
 8002018:	19dc      	adds	r4, r3, r7
 800201a:	429c      	cmp	r4, r3
 800201c:	419b      	sbcs	r3, r3
 800201e:	4461      	add	r1, ip
 8002020:	4689      	mov	r9, r1
 8002022:	425b      	negs	r3, r3
 8002024:	4499      	add	r9, r3
 8002026:	464b      	mov	r3, r9
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	d444      	bmi.n	80020b6 <__aeabi_dsub+0x5c6>
 800202c:	2301      	movs	r3, #1
 800202e:	4698      	mov	r8, r3
 8002030:	e6cc      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8002032:	1bdc      	subs	r4, r3, r7
 8002034:	4662      	mov	r2, ip
 8002036:	42a3      	cmp	r3, r4
 8002038:	419b      	sbcs	r3, r3
 800203a:	1a51      	subs	r1, r2, r1
 800203c:	425b      	negs	r3, r3
 800203e:	1acb      	subs	r3, r1, r3
 8002040:	4699      	mov	r9, r3
 8002042:	2301      	movs	r3, #1
 8002044:	4698      	mov	r8, r3
 8002046:	e5a4      	b.n	8001b92 <__aeabi_dsub+0xa2>
 8002048:	08ff      	lsrs	r7, r7, #3
 800204a:	074b      	lsls	r3, r1, #29
 800204c:	465d      	mov	r5, fp
 800204e:	433b      	orrs	r3, r7
 8002050:	08cc      	lsrs	r4, r1, #3
 8002052:	e6d7      	b.n	8001e04 <__aeabi_dsub+0x314>
 8002054:	4662      	mov	r2, ip
 8002056:	431a      	orrs	r2, r3
 8002058:	0014      	movs	r4, r2
 800205a:	1e63      	subs	r3, r4, #1
 800205c:	419c      	sbcs	r4, r3
 800205e:	e679      	b.n	8001d54 <__aeabi_dsub+0x264>
 8002060:	0015      	movs	r5, r2
 8002062:	4664      	mov	r4, ip
 8002064:	3d20      	subs	r5, #32
 8002066:	40ec      	lsrs	r4, r5
 8002068:	46a0      	mov	r8, r4
 800206a:	2a20      	cmp	r2, #32
 800206c:	d005      	beq.n	800207a <__aeabi_dsub+0x58a>
 800206e:	2540      	movs	r5, #64	; 0x40
 8002070:	4664      	mov	r4, ip
 8002072:	1aaa      	subs	r2, r5, r2
 8002074:	4094      	lsls	r4, r2
 8002076:	4323      	orrs	r3, r4
 8002078:	469a      	mov	sl, r3
 800207a:	4654      	mov	r4, sl
 800207c:	1e63      	subs	r3, r4, #1
 800207e:	419c      	sbcs	r4, r3
 8002080:	4643      	mov	r3, r8
 8002082:	4323      	orrs	r3, r4
 8002084:	e773      	b.n	8001f6e <__aeabi_dsub+0x47e>
 8002086:	4662      	mov	r2, ip
 8002088:	431a      	orrs	r2, r3
 800208a:	d023      	beq.n	80020d4 <__aeabi_dsub+0x5e4>
 800208c:	000a      	movs	r2, r1
 800208e:	433a      	orrs	r2, r7
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x5a4>
 8002092:	e0a0      	b.n	80021d6 <__aeabi_dsub+0x6e6>
 8002094:	4662      	mov	r2, ip
 8002096:	08db      	lsrs	r3, r3, #3
 8002098:	0752      	lsls	r2, r2, #29
 800209a:	4313      	orrs	r3, r2
 800209c:	4662      	mov	r2, ip
 800209e:	08d4      	lsrs	r4, r2, #3
 80020a0:	e6b0      	b.n	8001e04 <__aeabi_dsub+0x314>
 80020a2:	000b      	movs	r3, r1
 80020a4:	433b      	orrs	r3, r7
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x5ba>
 80020a8:	e728      	b.n	8001efc <__aeabi_dsub+0x40c>
 80020aa:	08ff      	lsrs	r7, r7, #3
 80020ac:	074b      	lsls	r3, r1, #29
 80020ae:	465d      	mov	r5, fp
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e697      	b.n	8001de6 <__aeabi_dsub+0x2f6>
 80020b6:	2302      	movs	r3, #2
 80020b8:	4698      	mov	r8, r3
 80020ba:	e736      	b.n	8001f2a <__aeabi_dsub+0x43a>
 80020bc:	1afc      	subs	r4, r7, r3
 80020be:	42a7      	cmp	r7, r4
 80020c0:	41bf      	sbcs	r7, r7
 80020c2:	4663      	mov	r3, ip
 80020c4:	427f      	negs	r7, r7
 80020c6:	1ac9      	subs	r1, r1, r3
 80020c8:	1bcb      	subs	r3, r1, r7
 80020ca:	4699      	mov	r9, r3
 80020cc:	2301      	movs	r3, #1
 80020ce:	465d      	mov	r5, fp
 80020d0:	4698      	mov	r8, r3
 80020d2:	e55e      	b.n	8001b92 <__aeabi_dsub+0xa2>
 80020d4:	074b      	lsls	r3, r1, #29
 80020d6:	08ff      	lsrs	r7, r7, #3
 80020d8:	433b      	orrs	r3, r7
 80020da:	08cc      	lsrs	r4, r1, #3
 80020dc:	e692      	b.n	8001e04 <__aeabi_dsub+0x314>
 80020de:	1bdc      	subs	r4, r3, r7
 80020e0:	4660      	mov	r0, ip
 80020e2:	42a3      	cmp	r3, r4
 80020e4:	41b6      	sbcs	r6, r6
 80020e6:	1a40      	subs	r0, r0, r1
 80020e8:	4276      	negs	r6, r6
 80020ea:	1b80      	subs	r0, r0, r6
 80020ec:	4681      	mov	r9, r0
 80020ee:	0200      	lsls	r0, r0, #8
 80020f0:	d560      	bpl.n	80021b4 <__aeabi_dsub+0x6c4>
 80020f2:	1afc      	subs	r4, r7, r3
 80020f4:	42a7      	cmp	r7, r4
 80020f6:	41bf      	sbcs	r7, r7
 80020f8:	4663      	mov	r3, ip
 80020fa:	427f      	negs	r7, r7
 80020fc:	1ac9      	subs	r1, r1, r3
 80020fe:	1bcb      	subs	r3, r1, r7
 8002100:	4699      	mov	r9, r3
 8002102:	465d      	mov	r5, fp
 8002104:	e576      	b.n	8001bf4 <__aeabi_dsub+0x104>
 8002106:	08ff      	lsrs	r7, r7, #3
 8002108:	074b      	lsls	r3, r1, #29
 800210a:	433b      	orrs	r3, r7
 800210c:	08cc      	lsrs	r4, r1, #3
 800210e:	e667      	b.n	8001de0 <__aeabi_dsub+0x2f0>
 8002110:	000a      	movs	r2, r1
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	433a      	orrs	r2, r7
 8002116:	d100      	bne.n	800211a <__aeabi_dsub+0x62a>
 8002118:	e66f      	b.n	8001dfa <__aeabi_dsub+0x30a>
 800211a:	4662      	mov	r2, ip
 800211c:	0752      	lsls	r2, r2, #29
 800211e:	4313      	orrs	r3, r2
 8002120:	4662      	mov	r2, ip
 8002122:	08d4      	lsrs	r4, r2, #3
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0312      	lsls	r2, r2, #12
 8002128:	4214      	tst	r4, r2
 800212a:	d007      	beq.n	800213c <__aeabi_dsub+0x64c>
 800212c:	08c8      	lsrs	r0, r1, #3
 800212e:	4210      	tst	r0, r2
 8002130:	d104      	bne.n	800213c <__aeabi_dsub+0x64c>
 8002132:	465d      	mov	r5, fp
 8002134:	0004      	movs	r4, r0
 8002136:	08fb      	lsrs	r3, r7, #3
 8002138:	0749      	lsls	r1, r1, #29
 800213a:	430b      	orrs	r3, r1
 800213c:	0f5a      	lsrs	r2, r3, #29
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	0752      	lsls	r2, r2, #29
 8002144:	4313      	orrs	r3, r2
 8002146:	e65d      	b.n	8001e04 <__aeabi_dsub+0x314>
 8002148:	074b      	lsls	r3, r1, #29
 800214a:	08ff      	lsrs	r7, r7, #3
 800214c:	433b      	orrs	r3, r7
 800214e:	08cc      	lsrs	r4, r1, #3
 8002150:	e649      	b.n	8001de6 <__aeabi_dsub+0x2f6>
 8002152:	19dc      	adds	r4, r3, r7
 8002154:	429c      	cmp	r4, r3
 8002156:	419b      	sbcs	r3, r3
 8002158:	4461      	add	r1, ip
 800215a:	4689      	mov	r9, r1
 800215c:	425b      	negs	r3, r3
 800215e:	4499      	add	r9, r3
 8002160:	464b      	mov	r3, r9
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	d400      	bmi.n	8002168 <__aeabi_dsub+0x678>
 8002166:	e631      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8002168:	464a      	mov	r2, r9
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <__aeabi_dsub+0x6d8>)
 800216c:	401a      	ands	r2, r3
 800216e:	2301      	movs	r3, #1
 8002170:	4691      	mov	r9, r2
 8002172:	4698      	mov	r8, r3
 8002174:	e62a      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 8002176:	0016      	movs	r6, r2
 8002178:	4664      	mov	r4, ip
 800217a:	3e20      	subs	r6, #32
 800217c:	40f4      	lsrs	r4, r6
 800217e:	46a0      	mov	r8, r4
 8002180:	2a20      	cmp	r2, #32
 8002182:	d005      	beq.n	8002190 <__aeabi_dsub+0x6a0>
 8002184:	2640      	movs	r6, #64	; 0x40
 8002186:	4664      	mov	r4, ip
 8002188:	1ab2      	subs	r2, r6, r2
 800218a:	4094      	lsls	r4, r2
 800218c:	4323      	orrs	r3, r4
 800218e:	469a      	mov	sl, r3
 8002190:	4654      	mov	r4, sl
 8002192:	1e63      	subs	r3, r4, #1
 8002194:	419c      	sbcs	r4, r3
 8002196:	4643      	mov	r3, r8
 8002198:	431c      	orrs	r4, r3
 800219a:	e5db      	b.n	8001d54 <__aeabi_dsub+0x264>
 800219c:	0002      	movs	r2, r0
 800219e:	2400      	movs	r4, #0
 80021a0:	2300      	movs	r3, #0
 80021a2:	e548      	b.n	8001c36 <__aeabi_dsub+0x146>
 80021a4:	19dc      	adds	r4, r3, r7
 80021a6:	42bc      	cmp	r4, r7
 80021a8:	41bf      	sbcs	r7, r7
 80021aa:	4461      	add	r1, ip
 80021ac:	4689      	mov	r9, r1
 80021ae:	427f      	negs	r7, r7
 80021b0:	44b9      	add	r9, r7
 80021b2:	e738      	b.n	8002026 <__aeabi_dsub+0x536>
 80021b4:	464b      	mov	r3, r9
 80021b6:	4323      	orrs	r3, r4
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x6cc>
 80021ba:	e69f      	b.n	8001efc <__aeabi_dsub+0x40c>
 80021bc:	e606      	b.n	8001dcc <__aeabi_dsub+0x2dc>
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	000007fe 	.word	0x000007fe
 80021c4:	000007ff 	.word	0x000007ff
 80021c8:	ff7fffff 	.word	0xff7fffff
 80021cc:	08ff      	lsrs	r7, r7, #3
 80021ce:	074b      	lsls	r3, r1, #29
 80021d0:	433b      	orrs	r3, r7
 80021d2:	08cc      	lsrs	r4, r1, #3
 80021d4:	e616      	b.n	8001e04 <__aeabi_dsub+0x314>
 80021d6:	4662      	mov	r2, ip
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	0752      	lsls	r2, r2, #29
 80021dc:	4313      	orrs	r3, r2
 80021de:	4662      	mov	r2, ip
 80021e0:	08d4      	lsrs	r4, r2, #3
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0312      	lsls	r2, r2, #12
 80021e6:	4214      	tst	r4, r2
 80021e8:	d007      	beq.n	80021fa <__aeabi_dsub+0x70a>
 80021ea:	08c8      	lsrs	r0, r1, #3
 80021ec:	4210      	tst	r0, r2
 80021ee:	d104      	bne.n	80021fa <__aeabi_dsub+0x70a>
 80021f0:	465d      	mov	r5, fp
 80021f2:	0004      	movs	r4, r0
 80021f4:	08fb      	lsrs	r3, r7, #3
 80021f6:	0749      	lsls	r1, r1, #29
 80021f8:	430b      	orrs	r3, r1
 80021fa:	0f5a      	lsrs	r2, r3, #29
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	0752      	lsls	r2, r2, #29
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4313      	orrs	r3, r2
 8002204:	e5fe      	b.n	8001e04 <__aeabi_dsub+0x314>
 8002206:	2300      	movs	r3, #0
 8002208:	4a01      	ldr	r2, [pc, #4]	; (8002210 <__aeabi_dsub+0x720>)
 800220a:	001c      	movs	r4, r3
 800220c:	e513      	b.n	8001c36 <__aeabi_dsub+0x146>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	000007ff 	.word	0x000007ff

08002214 <__aeabi_dcmpun>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	0005      	movs	r5, r0
 8002218:	480c      	ldr	r0, [pc, #48]	; (800224c <__aeabi_dcmpun+0x38>)
 800221a:	031c      	lsls	r4, r3, #12
 800221c:	0016      	movs	r6, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	030a      	lsls	r2, r1, #12
 8002222:	0049      	lsls	r1, r1, #1
 8002224:	0b12      	lsrs	r2, r2, #12
 8002226:	0d49      	lsrs	r1, r1, #21
 8002228:	0b24      	lsrs	r4, r4, #12
 800222a:	0d5b      	lsrs	r3, r3, #21
 800222c:	4281      	cmp	r1, r0
 800222e:	d008      	beq.n	8002242 <__aeabi_dcmpun+0x2e>
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <__aeabi_dcmpun+0x38>)
 8002232:	2000      	movs	r0, #0
 8002234:	4293      	cmp	r3, r2
 8002236:	d103      	bne.n	8002240 <__aeabi_dcmpun+0x2c>
 8002238:	0020      	movs	r0, r4
 800223a:	4330      	orrs	r0, r6
 800223c:	1e43      	subs	r3, r0, #1
 800223e:	4198      	sbcs	r0, r3
 8002240:	bd70      	pop	{r4, r5, r6, pc}
 8002242:	2001      	movs	r0, #1
 8002244:	432a      	orrs	r2, r5
 8002246:	d1fb      	bne.n	8002240 <__aeabi_dcmpun+0x2c>
 8002248:	e7f2      	b.n	8002230 <__aeabi_dcmpun+0x1c>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff

08002250 <__aeabi_d2iz>:
 8002250:	000a      	movs	r2, r1
 8002252:	b530      	push	{r4, r5, lr}
 8002254:	4c13      	ldr	r4, [pc, #76]	; (80022a4 <__aeabi_d2iz+0x54>)
 8002256:	0053      	lsls	r3, r2, #1
 8002258:	0309      	lsls	r1, r1, #12
 800225a:	0005      	movs	r5, r0
 800225c:	0b09      	lsrs	r1, r1, #12
 800225e:	2000      	movs	r0, #0
 8002260:	0d5b      	lsrs	r3, r3, #21
 8002262:	0fd2      	lsrs	r2, r2, #31
 8002264:	42a3      	cmp	r3, r4
 8002266:	dd04      	ble.n	8002272 <__aeabi_d2iz+0x22>
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <__aeabi_d2iz+0x58>)
 800226a:	4283      	cmp	r3, r0
 800226c:	dd02      	ble.n	8002274 <__aeabi_d2iz+0x24>
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <__aeabi_d2iz+0x5c>)
 8002270:	18d0      	adds	r0, r2, r3
 8002272:	bd30      	pop	{r4, r5, pc}
 8002274:	2080      	movs	r0, #128	; 0x80
 8002276:	0340      	lsls	r0, r0, #13
 8002278:	4301      	orrs	r1, r0
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <__aeabi_d2iz+0x60>)
 800227c:	1ac0      	subs	r0, r0, r3
 800227e:	281f      	cmp	r0, #31
 8002280:	dd08      	ble.n	8002294 <__aeabi_d2iz+0x44>
 8002282:	480c      	ldr	r0, [pc, #48]	; (80022b4 <__aeabi_d2iz+0x64>)
 8002284:	1ac3      	subs	r3, r0, r3
 8002286:	40d9      	lsrs	r1, r3
 8002288:	000b      	movs	r3, r1
 800228a:	4258      	negs	r0, r3
 800228c:	2a00      	cmp	r2, #0
 800228e:	d1f0      	bne.n	8002272 <__aeabi_d2iz+0x22>
 8002290:	0018      	movs	r0, r3
 8002292:	e7ee      	b.n	8002272 <__aeabi_d2iz+0x22>
 8002294:	4c08      	ldr	r4, [pc, #32]	; (80022b8 <__aeabi_d2iz+0x68>)
 8002296:	40c5      	lsrs	r5, r0
 8002298:	46a4      	mov	ip, r4
 800229a:	4463      	add	r3, ip
 800229c:	4099      	lsls	r1, r3
 800229e:	000b      	movs	r3, r1
 80022a0:	432b      	orrs	r3, r5
 80022a2:	e7f2      	b.n	800228a <__aeabi_d2iz+0x3a>
 80022a4:	000003fe 	.word	0x000003fe
 80022a8:	0000041d 	.word	0x0000041d
 80022ac:	7fffffff 	.word	0x7fffffff
 80022b0:	00000433 	.word	0x00000433
 80022b4:	00000413 	.word	0x00000413
 80022b8:	fffffbed 	.word	0xfffffbed

080022bc <__aeabi_i2d>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	2800      	cmp	r0, #0
 80022c0:	d016      	beq.n	80022f0 <__aeabi_i2d+0x34>
 80022c2:	17c3      	asrs	r3, r0, #31
 80022c4:	18c5      	adds	r5, r0, r3
 80022c6:	405d      	eors	r5, r3
 80022c8:	0fc4      	lsrs	r4, r0, #31
 80022ca:	0028      	movs	r0, r5
 80022cc:	f000 f8d4 	bl	8002478 <__clzsi2>
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <__aeabi_i2d+0x5c>)
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	280a      	cmp	r0, #10
 80022d6:	dc16      	bgt.n	8002306 <__aeabi_i2d+0x4a>
 80022d8:	0003      	movs	r3, r0
 80022da:	002e      	movs	r6, r5
 80022dc:	3315      	adds	r3, #21
 80022de:	409e      	lsls	r6, r3
 80022e0:	230b      	movs	r3, #11
 80022e2:	1a18      	subs	r0, r3, r0
 80022e4:	40c5      	lsrs	r5, r0
 80022e6:	0552      	lsls	r2, r2, #21
 80022e8:	032d      	lsls	r5, r5, #12
 80022ea:	0b2d      	lsrs	r5, r5, #12
 80022ec:	0d53      	lsrs	r3, r2, #21
 80022ee:	e003      	b.n	80022f8 <__aeabi_i2d+0x3c>
 80022f0:	2400      	movs	r4, #0
 80022f2:	2300      	movs	r3, #0
 80022f4:	2500      	movs	r5, #0
 80022f6:	2600      	movs	r6, #0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	432b      	orrs	r3, r5
 80022fc:	07e4      	lsls	r4, r4, #31
 80022fe:	4323      	orrs	r3, r4
 8002300:	0030      	movs	r0, r6
 8002302:	0019      	movs	r1, r3
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	380b      	subs	r0, #11
 8002308:	4085      	lsls	r5, r0
 800230a:	0552      	lsls	r2, r2, #21
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	2600      	movs	r6, #0
 8002310:	0b2d      	lsrs	r5, r5, #12
 8002312:	0d53      	lsrs	r3, r2, #21
 8002314:	e7f0      	b.n	80022f8 <__aeabi_i2d+0x3c>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	0000041e 	.word	0x0000041e

0800231c <__aeabi_ui2d>:
 800231c:	b510      	push	{r4, lr}
 800231e:	1e04      	subs	r4, r0, #0
 8002320:	d010      	beq.n	8002344 <__aeabi_ui2d+0x28>
 8002322:	f000 f8a9 	bl	8002478 <__clzsi2>
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <__aeabi_ui2d+0x48>)
 8002328:	1a1b      	subs	r3, r3, r0
 800232a:	280a      	cmp	r0, #10
 800232c:	dc11      	bgt.n	8002352 <__aeabi_ui2d+0x36>
 800232e:	220b      	movs	r2, #11
 8002330:	0021      	movs	r1, r4
 8002332:	1a12      	subs	r2, r2, r0
 8002334:	40d1      	lsrs	r1, r2
 8002336:	3015      	adds	r0, #21
 8002338:	030a      	lsls	r2, r1, #12
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	4084      	lsls	r4, r0
 800233e:	0b12      	lsrs	r2, r2, #12
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	e001      	b.n	8002348 <__aeabi_ui2d+0x2c>
 8002344:	2300      	movs	r3, #0
 8002346:	2200      	movs	r2, #0
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	4313      	orrs	r3, r2
 800234c:	0020      	movs	r0, r4
 800234e:	0019      	movs	r1, r3
 8002350:	bd10      	pop	{r4, pc}
 8002352:	0022      	movs	r2, r4
 8002354:	380b      	subs	r0, #11
 8002356:	4082      	lsls	r2, r0
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	0312      	lsls	r2, r2, #12
 800235c:	2400      	movs	r4, #0
 800235e:	0b12      	lsrs	r2, r2, #12
 8002360:	0d5b      	lsrs	r3, r3, #21
 8002362:	e7f1      	b.n	8002348 <__aeabi_ui2d+0x2c>
 8002364:	0000041e 	.word	0x0000041e

08002368 <__aeabi_d2f>:
 8002368:	0002      	movs	r2, r0
 800236a:	004b      	lsls	r3, r1, #1
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	0d5b      	lsrs	r3, r3, #21
 8002370:	030c      	lsls	r4, r1, #12
 8002372:	4e3d      	ldr	r6, [pc, #244]	; (8002468 <__aeabi_d2f+0x100>)
 8002374:	0a64      	lsrs	r4, r4, #9
 8002376:	0f40      	lsrs	r0, r0, #29
 8002378:	1c5f      	adds	r7, r3, #1
 800237a:	0fc9      	lsrs	r1, r1, #31
 800237c:	4304      	orrs	r4, r0
 800237e:	00d5      	lsls	r5, r2, #3
 8002380:	4237      	tst	r7, r6
 8002382:	d00a      	beq.n	800239a <__aeabi_d2f+0x32>
 8002384:	4839      	ldr	r0, [pc, #228]	; (800246c <__aeabi_d2f+0x104>)
 8002386:	181e      	adds	r6, r3, r0
 8002388:	2efe      	cmp	r6, #254	; 0xfe
 800238a:	dd16      	ble.n	80023ba <__aeabi_d2f+0x52>
 800238c:	20ff      	movs	r0, #255	; 0xff
 800238e:	2400      	movs	r4, #0
 8002390:	05c0      	lsls	r0, r0, #23
 8002392:	4320      	orrs	r0, r4
 8002394:	07c9      	lsls	r1, r1, #31
 8002396:	4308      	orrs	r0, r1
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <__aeabi_d2f+0x44>
 800239e:	432c      	orrs	r4, r5
 80023a0:	d026      	beq.n	80023f0 <__aeabi_d2f+0x88>
 80023a2:	2205      	movs	r2, #5
 80023a4:	0192      	lsls	r2, r2, #6
 80023a6:	0a54      	lsrs	r4, r2, #9
 80023a8:	b2d8      	uxtb	r0, r3
 80023aa:	e7f1      	b.n	8002390 <__aeabi_d2f+0x28>
 80023ac:	4325      	orrs	r5, r4
 80023ae:	d0ed      	beq.n	800238c <__aeabi_d2f+0x24>
 80023b0:	2080      	movs	r0, #128	; 0x80
 80023b2:	03c0      	lsls	r0, r0, #15
 80023b4:	4304      	orrs	r4, r0
 80023b6:	20ff      	movs	r0, #255	; 0xff
 80023b8:	e7ea      	b.n	8002390 <__aeabi_d2f+0x28>
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	dd1b      	ble.n	80023f6 <__aeabi_d2f+0x8e>
 80023be:	0192      	lsls	r2, r2, #6
 80023c0:	1e53      	subs	r3, r2, #1
 80023c2:	419a      	sbcs	r2, r3
 80023c4:	00e4      	lsls	r4, r4, #3
 80023c6:	0f6d      	lsrs	r5, r5, #29
 80023c8:	4322      	orrs	r2, r4
 80023ca:	432a      	orrs	r2, r5
 80023cc:	0753      	lsls	r3, r2, #29
 80023ce:	d048      	beq.n	8002462 <__aeabi_d2f+0xfa>
 80023d0:	230f      	movs	r3, #15
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d000      	beq.n	80023da <__aeabi_d2f+0x72>
 80023d8:	3204      	adds	r2, #4
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	04db      	lsls	r3, r3, #19
 80023de:	4013      	ands	r3, r2
 80023e0:	d03f      	beq.n	8002462 <__aeabi_d2f+0xfa>
 80023e2:	1c70      	adds	r0, r6, #1
 80023e4:	2efe      	cmp	r6, #254	; 0xfe
 80023e6:	d0d1      	beq.n	800238c <__aeabi_d2f+0x24>
 80023e8:	0192      	lsls	r2, r2, #6
 80023ea:	0a54      	lsrs	r4, r2, #9
 80023ec:	b2c0      	uxtb	r0, r0
 80023ee:	e7cf      	b.n	8002390 <__aeabi_d2f+0x28>
 80023f0:	2000      	movs	r0, #0
 80023f2:	2400      	movs	r4, #0
 80023f4:	e7cc      	b.n	8002390 <__aeabi_d2f+0x28>
 80023f6:	0032      	movs	r2, r6
 80023f8:	3217      	adds	r2, #23
 80023fa:	db22      	blt.n	8002442 <__aeabi_d2f+0xda>
 80023fc:	2080      	movs	r0, #128	; 0x80
 80023fe:	0400      	lsls	r0, r0, #16
 8002400:	4320      	orrs	r0, r4
 8002402:	241e      	movs	r4, #30
 8002404:	1ba4      	subs	r4, r4, r6
 8002406:	2c1f      	cmp	r4, #31
 8002408:	dd1d      	ble.n	8002446 <__aeabi_d2f+0xde>
 800240a:	2202      	movs	r2, #2
 800240c:	4252      	negs	r2, r2
 800240e:	1b96      	subs	r6, r2, r6
 8002410:	0002      	movs	r2, r0
 8002412:	40f2      	lsrs	r2, r6
 8002414:	0016      	movs	r6, r2
 8002416:	2c20      	cmp	r4, #32
 8002418:	d004      	beq.n	8002424 <__aeabi_d2f+0xbc>
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <__aeabi_d2f+0x108>)
 800241c:	4694      	mov	ip, r2
 800241e:	4463      	add	r3, ip
 8002420:	4098      	lsls	r0, r3
 8002422:	4305      	orrs	r5, r0
 8002424:	002a      	movs	r2, r5
 8002426:	1e53      	subs	r3, r2, #1
 8002428:	419a      	sbcs	r2, r3
 800242a:	4332      	orrs	r2, r6
 800242c:	2600      	movs	r6, #0
 800242e:	0753      	lsls	r3, r2, #29
 8002430:	d1ce      	bne.n	80023d0 <__aeabi_d2f+0x68>
 8002432:	2480      	movs	r4, #128	; 0x80
 8002434:	0013      	movs	r3, r2
 8002436:	04e4      	lsls	r4, r4, #19
 8002438:	2001      	movs	r0, #1
 800243a:	4023      	ands	r3, r4
 800243c:	4222      	tst	r2, r4
 800243e:	d1d3      	bne.n	80023e8 <__aeabi_d2f+0x80>
 8002440:	e7b0      	b.n	80023a4 <__aeabi_d2f+0x3c>
 8002442:	2300      	movs	r3, #0
 8002444:	e7ad      	b.n	80023a2 <__aeabi_d2f+0x3a>
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <__aeabi_d2f+0x10c>)
 8002448:	4694      	mov	ip, r2
 800244a:	002a      	movs	r2, r5
 800244c:	40e2      	lsrs	r2, r4
 800244e:	0014      	movs	r4, r2
 8002450:	002a      	movs	r2, r5
 8002452:	4463      	add	r3, ip
 8002454:	409a      	lsls	r2, r3
 8002456:	4098      	lsls	r0, r3
 8002458:	1e55      	subs	r5, r2, #1
 800245a:	41aa      	sbcs	r2, r5
 800245c:	4302      	orrs	r2, r0
 800245e:	4322      	orrs	r2, r4
 8002460:	e7e4      	b.n	800242c <__aeabi_d2f+0xc4>
 8002462:	0033      	movs	r3, r6
 8002464:	e79e      	b.n	80023a4 <__aeabi_d2f+0x3c>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	000007fe 	.word	0x000007fe
 800246c:	fffffc80 	.word	0xfffffc80
 8002470:	fffffca2 	.word	0xfffffca2
 8002474:	fffffc82 	.word	0xfffffc82

08002478 <__clzsi2>:
 8002478:	211c      	movs	r1, #28
 800247a:	2301      	movs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	4298      	cmp	r0, r3
 8002480:	d301      	bcc.n	8002486 <__clzsi2+0xe>
 8002482:	0c00      	lsrs	r0, r0, #16
 8002484:	3910      	subs	r1, #16
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	4298      	cmp	r0, r3
 800248a:	d301      	bcc.n	8002490 <__clzsi2+0x18>
 800248c:	0a00      	lsrs	r0, r0, #8
 800248e:	3908      	subs	r1, #8
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	4298      	cmp	r0, r3
 8002494:	d301      	bcc.n	800249a <__clzsi2+0x22>
 8002496:	0900      	lsrs	r0, r0, #4
 8002498:	3904      	subs	r1, #4
 800249a:	a202      	add	r2, pc, #8	; (adr r2, 80024a4 <__clzsi2+0x2c>)
 800249c:	5c10      	ldrb	r0, [r2, r0]
 800249e:	1840      	adds	r0, r0, r1
 80024a0:	4770      	bx	lr
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	02020304 	.word	0x02020304
 80024a8:	01010101 	.word	0x01010101
	...

080024b4 <apInit>:
bool Update_Modbus_MAP_From_Flash(uint8_t *info_data, uint8_t size);



void apInit(void)
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
  uint8_t cli_flag_buf[2];
  uint8_t buf[FLASH_BUF_SIZE];


  uartOpen(_DEF_UART1);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f001 ffac 	bl	8004418 <uartOpen>

  cliOpen(_DEF_UART1);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f000 fd93 	bl	8002fec <cliOpen>
  cli_uartInit(Holding_Registers_Database);
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <apInit+0x5c>)
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fa13 	bl	80028f4 <cli_uartInit>

  //Read cli Flag
  flashRead(_CLI_MODE_FLASH_ADDR, cli_flag_buf, 2);
 80024ce:	2414      	movs	r4, #20
 80024d0:	193b      	adds	r3, r7, r4
 80024d2:	4810      	ldr	r0, [pc, #64]	; (8002514 <apInit+0x60>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	0019      	movs	r1, r3
 80024d8:	f001 fe67 	bl	80041aa <flashRead>
  /*If CLI FLAG == 0xffff,
  * Update ModbusMap from Flash*/
  if (((uint16_t)cli_flag_buf[0] << 8 | cli_flag_buf[1]) == 0xffff)
 80024dc:	0022      	movs	r2, r4
 80024de:	18bb      	adds	r3, r7, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	18ba      	adds	r2, r7, r2
 80024e6:	7852      	ldrb	r2, [r2, #1]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <apInit+0x64>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d105      	bne.n	80024fc <apInit+0x48>
  {
    Update_Modbus_MAP_From_Flash(buf, FLASH_BUF_SIZE);
 80024f0:	003b      	movs	r3, r7
 80024f2:	2114      	movs	r1, #20
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f8e5 	bl	80026c4 <Update_Modbus_MAP_From_Flash>
   * Update Flash from ModbusMap(initial value)*/
  else
  {
    Update_Flash_From_Modbus_MAP(buf, FLASH_BUF_SIZE);
  }
}
 80024fa:	e004      	b.n	8002506 <apInit+0x52>
    Update_Flash_From_Modbus_MAP(buf, FLASH_BUF_SIZE);
 80024fc:	003b      	movs	r3, r7
 80024fe:	2114      	movs	r1, #20
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f863 	bl	80025cc <Update_Flash_From_Modbus_MAP>
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b007      	add	sp, #28
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	20000004 	.word	0x20000004
 8002514:	0800f00e 	.word	0x0800f00e
 8002518:	0000ffff 	.word	0x0000ffff

0800251c <apMain>:

void apMain(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  ap_time = millis();
 8002520:	f000 fa6a 	bl	80029f8 <millis>
 8002524:	0002      	movs	r2, r0
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <apMain+0x58>)
 8002528:	601a      	str	r2, [r3, #0]
  ap_State = INIT_STATE;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <apMain+0x5c>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  while(1)
  {
     switch (ap_State)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <apMain+0x5c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b03      	cmp	r3, #3
 8002536:	d014      	beq.n	8002562 <apMain+0x46>
 8002538:	dc16      	bgt.n	8002568 <apMain+0x4c>
 800253a:	2b02      	cmp	r3, #2
 800253c:	d00e      	beq.n	800255c <apMain+0x40>
 800253e:	dc13      	bgt.n	8002568 <apMain+0x4c>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <apMain+0x2e>
 8002544:	2b01      	cmp	r3, #1
 8002546:	d003      	beq.n	8002550 <apMain+0x34>
 8002548:	e00e      	b.n	8002568 <apMain+0x4c>
     {
                 case INIT_STATE:
                   InitStateHandler();
 800254a:	f000 f90b 	bl	8002764 <InitStateHandler>
                     break;
 800254e:	e010      	b.n	8002572 <apMain+0x56>

                 case MODE_STATE:
                   ModeStateHandler(ap_time);
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <apMain+0x58>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f92f 	bl	80027b8 <ModeStateHandler>
                     break;
 800255a:	e00a      	b.n	8002572 <apMain+0x56>

                 case MODBUS_DATA_STATE:
                   ModbusDataStateHandler();
 800255c:	f000 f952 	bl	8002804 <ModbusDataStateHandler>
                     break;
 8002560:	e007      	b.n	8002572 <apMain+0x56>

                 case CLE_STATE:
                   CLEStateHandler();
 8002562:	f000 f9ab 	bl	80028bc <CLEStateHandler>
                     break;
 8002566:	e004      	b.n	8002572 <apMain+0x56>

                 default:
                     printf("please check your State.\n");
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <apMain+0x60>)
 800256a:	0018      	movs	r0, r3
 800256c:	f005 fd2c 	bl	8007fc8 <puts>
                     break;
 8002570:	46c0      	nop			; (mov r8, r8)
     switch (ap_State)
 8002572:	e7dd      	b.n	8002530 <apMain+0x14>
 8002574:	20000298 	.word	0x20000298
 8002578:	20000294 	.word	0x20000294
 800257c:	0800b440 	.word	0x0800b440

08002580 <Read_Reed_state>:
     }
   }
}

uint8_t Read_Reed_state(void)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  GPIO_PinState state;

  state = buttonStateCheck(_DEF_BUTTON1);
 800258c:	1dbc      	adds	r4, r7, #6
 800258e:	2000      	movs	r0, #0
 8002590:	f000 fca0 	bl	8002ed4 <buttonStateCheck>
 8002594:	0003      	movs	r3, r0
 8002596:	7023      	strb	r3, [r4, #0]
  /*
   * GPIO_PIN_SET = 1
   * GPIO_PIN_RESET = 0
   */
  if (state == GPIO_PIN_SET)
 8002598:	1dbb      	adds	r3, r7, #6
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <Read_Reed_state+0x30>
  {
    /*push button*/
    ret = 1;
 80025a0:	1dfb      	adds	r3, r7, #7
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
    /*set the database to 0xffff*/
    Input_Registers_Database[0] = 0xffff;
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <Read_Reed_state+0x48>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	4252      	negs	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e005      	b.n	80025bc <Read_Reed_state+0x3c>
  }
  else
  {
    ret = 0;
 80025b0:	1dfb      	adds	r3, r7, #7
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    /*set the database to 0x1234*/
    Input_Registers_Database[0] = 0x0000;
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <Read_Reed_state+0x48>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 80025bc:	1dfb      	adds	r3, r7, #7
 80025be:	781b      	ldrb	r3, [r3, #0]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b003      	add	sp, #12
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	200002a0 	.word	0x200002a0

080025cc <Update_Flash_From_Modbus_MAP>:
bool Update_Flash_From_Modbus_MAP(uint8_t *flash_data, uint8_t size)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	000a      	movs	r2, r1
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 80025da:	230b      	movs	r3, #11
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]

  if (flashErase(_MODBUS_FLASH_ADDR, FLASH_BUF_SIZE) == true)
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <Update_Flash_From_Modbus_MAP+0xdc>)
 80025e4:	2114      	movs	r1, #20
 80025e6:	0018      	movs	r0, r3
 80025e8:	f001 fd26 	bl	8004038 <flashErase>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d04f      	beq.n	8002690 <Update_Flash_From_Modbus_MAP+0xc4>
  {
    uartPrintf(_DEF_UART1, "OK...\r\n");
 80025f0:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <Update_Flash_From_Modbus_MAP+0xe0>)
 80025f2:	0019      	movs	r1, r3
 80025f4:	2000      	movs	r0, #0
 80025f6:	f002 f853 	bl	80046a0 <uartPrintf>
    for(int i=0; i<10; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	e02b      	b.n	8002658 <Update_Flash_From_Modbus_MAP+0x8c>
    {
      flash_data[i*2] = (Holding_Registers_Database[i]>>8) & 0xff;
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <Update_Flash_From_Modbus_MAP+0xe4>)
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	0052      	lsls	r2, r2, #1
 8002606:	5ad3      	ldrh	r3, [r2, r3]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	185b      	adds	r3, r3, r1
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
      flash_data[(i*2)+1] = (Holding_Registers_Database[i]) & 0xff;
 800261a:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <Update_Flash_From_Modbus_MAP+0xe4>)
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	0052      	lsls	r2, r2, #1
 8002620:	5ad1      	ldrh	r1, [r2, r3]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	3301      	adds	r3, #1
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	18d3      	adds	r3, r2, r3
 800262c:	b2ca      	uxtb	r2, r1
 800262e:	701a      	strb	r2, [r3, #0]

      if (i == 9)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b09      	cmp	r3, #9
 8002634:	d10d      	bne.n	8002652 <Update_Flash_From_Modbus_MAP+0x86>
      {
        flash_data[(i*2)+2] = (Holding_Registers_Database[i+1]>>8) & 0xff;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <Update_Flash_From_Modbus_MAP+0xe4>)
 800263c:	0052      	lsls	r2, r2, #1
 800263e:	5ad3      	ldrh	r3, [r2, r3]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b299      	uxth	r1, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	3302      	adds	r3, #2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	18d3      	adds	r3, r2, r3
 800264e:	b2ca      	uxtb	r2, r1
 8002650:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<10; i++)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b09      	cmp	r3, #9
 800265c:	ddd0      	ble.n	8002600 <Update_Flash_From_Modbus_MAP+0x34>
      }
    }
    uartPrintf(_DEF_UART1, "Write..\r\n");
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <Update_Flash_From_Modbus_MAP+0xe8>)
 8002660:	0019      	movs	r1, r3
 8002662:	2000      	movs	r0, #0
 8002664:	f002 f81c 	bl	80046a0 <uartPrintf>

    if (flashWrite(_MODBUS_FLASH_ADDR, flash_data, FLASH_BUF_SIZE) == true)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	480f      	ldr	r0, [pc, #60]	; (80026a8 <Update_Flash_From_Modbus_MAP+0xdc>)
 800266c:	2214      	movs	r2, #20
 800266e:	0019      	movs	r1, r3
 8002670:	f001 fd44 	bl	80040fc <flashWrite>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d005      	beq.n	8002684 <Update_Flash_From_Modbus_MAP+0xb8>
    {
      uartPrintf(_DEF_UART1, "Write OK..\r\n");
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <Update_Flash_From_Modbus_MAP+0xec>)
 800267a:	0019      	movs	r1, r3
 800267c:	2000      	movs	r0, #0
 800267e:	f002 f80f 	bl	80046a0 <uartPrintf>
 8002682:	e00a      	b.n	800269a <Update_Flash_From_Modbus_MAP+0xce>
    }
    else
    {
      uartPrintf(_DEF_UART1, "Write Fail..\r\n");
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <Update_Flash_From_Modbus_MAP+0xf0>)
 8002686:	0019      	movs	r1, r3
 8002688:	2000      	movs	r0, #0
 800268a:	f002 f809 	bl	80046a0 <uartPrintf>
 800268e:	e004      	b.n	800269a <Update_Flash_From_Modbus_MAP+0xce>
    }
  }
  else
  {
    uartPrintf(_DEF_UART1, "Fail...\r\n");
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <Update_Flash_From_Modbus_MAP+0xf4>)
 8002692:	0019      	movs	r1, r3
 8002694:	2000      	movs	r0, #0
 8002696:	f002 f803 	bl	80046a0 <uartPrintf>
  }
  return ret;
 800269a:	230b      	movs	r3, #11
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	781b      	ldrb	r3, [r3, #0]
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	0800f000 	.word	0x0800f000
 80026ac:	0800b45c 	.word	0x0800b45c
 80026b0:	20000004 	.word	0x20000004
 80026b4:	0800b464 	.word	0x0800b464
 80026b8:	0800b470 	.word	0x0800b470
 80026bc:	0800b480 	.word	0x0800b480
 80026c0:	0800b490 	.word	0x0800b490

080026c4 <Update_Modbus_MAP_From_Flash>:


bool Update_Modbus_MAP_From_Flash(uint8_t *info_data, uint8_t size)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	000a      	movs	r2, r1
 80026ce:	1cfb      	adds	r3, r7, #3
 80026d0:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 80026d2:	230b      	movs	r3, #11
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]

  uartPrintf(_DEF_UART1, "Flash Read...\r\n");
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <Update_Modbus_MAP_From_Flash+0x94>)
 80026dc:	0019      	movs	r1, r3
 80026de:	2000      	movs	r0, #0
 80026e0:	f001 ffde 	bl	80046a0 <uartPrintf>
  flashRead(_MODBUS_FLASH_ADDR, info_data, size);
 80026e4:	1cfb      	adds	r3, r7, #3
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	481c      	ldr	r0, [pc, #112]	; (800275c <Update_Modbus_MAP_From_Flash+0x98>)
 80026ec:	0019      	movs	r1, r3
 80026ee:	f001 fd5c 	bl	80041aa <flashRead>

  for (int i=0; i<size; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e023      	b.n	8002740 <Update_Modbus_MAP_From_Flash+0x7c>
  {
    Holding_Registers_Database[i] =info_data[i*2]<< 8;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	001a      	movs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	189b      	adds	r3, r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	b299      	uxth	r1, r3
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <Update_Modbus_MAP_From_Flash+0x9c>)
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	52d1      	strh	r1, [r2, r3]
    Holding_Registers_Database[i] |= info_data[i*2+1] << 0;
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <Update_Modbus_MAP_From_Flash+0x9c>)
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	5ad2      	ldrh	r2, [r2, r3]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	3301      	adds	r3, #1
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	18cb      	adds	r3, r1, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4313      	orrs	r3, r2
 800272a:	b299      	uxth	r1, r3
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <Update_Modbus_MAP_From_Flash+0x9c>)
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	0052      	lsls	r2, r2, #1
 8002732:	52d1      	strh	r1, [r2, r3]
    i++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	3301      	adds	r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
  for (int i=0; i<size; i++)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	1cfb      	adds	r3, r7, #3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	dbd6      	blt.n	80026f8 <Update_Modbus_MAP_From_Flash+0x34>
  }


  //uartPrintf(_DEF_UART1, "0x%X : 0x%X\r\n", _MODBUS_FLASH_ADDR, modbus_fuction_03_database[0]);
  return ret;
 800274a:	230b      	movs	r3, #11
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}
 8002758:	0800b49c 	.word	0x0800b49c
 800275c:	0800f000 	.word	0x0800f000
 8002760:	20000004 	.word	0x20000004

08002764 <InitStateHandler>:

/*Event Handler*/

void InitStateHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
  uint8_t buf[FLASH_BUF_SIZE];

  printf("STATE.INIT_STATE\n");
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <InitStateHandler+0x44>)
 800276c:	0018      	movs	r0, r3
 800276e:	f005 fc2b 	bl	8007fc8 <puts>

  /*update from CLI*/
  if(reset_flag)
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <InitStateHandler+0x48>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <InitStateHandler+0x26>
  {
    Update_Flash_From_Modbus_MAP(buf, FLASH_BUF_SIZE);
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2114      	movs	r1, #20
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ff24 	bl	80025cc <Update_Flash_From_Modbus_MAP>
    reset_flag = false;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <InitStateHandler+0x48>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
  }
  set_uart_tbl(Holding_Registers_Database);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <InitStateHandler+0x4c>)
 800278c:	0018      	movs	r0, r3
 800278e:	f001 ffc3 	bl	8004718 <set_uart_tbl>
  /*uart open*/
  uartOpen(_DEF_UART1);
 8002792:	2000      	movs	r0, #0
 8002794:	f001 fe40 	bl	8004418 <uartOpen>

  ap_State = MODE_STATE;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <InitStateHandler+0x50>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b006      	add	sp, #24
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	0800b4ac 	.word	0x0800b4ac
 80027ac:	2000029c 	.word	0x2000029c
 80027b0:	20000004 	.word	0x20000004
 80027b4:	20000294 	.word	0x20000294

080027b8 <ModeStateHandler>:


void ModeStateHandler(uint32_t pre_time)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  printf("STATE.SELECT_MODE_STATE\n");
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <ModeStateHandler+0x40>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f005 fc00 	bl	8007fc8 <puts>

  if (millis()-pre_time >= 500)
 80027c8:	f000 f916 	bl	80029f8 <millis>
 80027cc:	0002      	movs	r2, r0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	1ad2      	subs	r2, r2, r3
 80027d2:	23fa      	movs	r3, #250	; 0xfa
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d306      	bcc.n	80027e8 <ModeStateHandler+0x30>
  {
    ap_time = millis();
 80027da:	f000 f90d 	bl	80029f8 <millis>
 80027de:	0002      	movs	r2, r0
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <ModeStateHandler+0x44>)
 80027e2:	601a      	str	r2, [r3, #0]
    Read_Reed_state();
 80027e4:	f7ff fecc 	bl	8002580 <Read_Reed_state>
    //uartPrintf(_DEF_UART1, "Reed : 0x%X\r\n", Input_Registers_Database[0]);
  }
  ap_State = MODBUS_DATA_STATE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <ModeStateHandler+0x48>)
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]

}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	0800b4c0 	.word	0x0800b4c0
 80027fc:	20000298 	.word	0x20000298
 8002800:	20000294 	.word	0x20000294

08002804 <ModbusDataStateHandler>:


void ModbusDataStateHandler(void)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
  printf("STATE.MODBUS_DATA_STATE\n");
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <ModbusDataStateHandler+0xa0>)
 8002812:	0018      	movs	r0, r3
 8002814:	f005 fbd8 	bl	8007fc8 <puts>

  slave_id = Holding_Registers_Database[0];
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <ModbusDataStateHandler+0xa4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b23      	ldr	r3, [pc, #140]	; (80028ac <ModbusDataStateHandler+0xa8>)
 8002820:	701a      	strb	r2, [r3, #0]

  /*the port get rx_data -> modbus protocol start point*/

  if (uartAvailable(_DEF_UART1)>0)
 8002822:	2000      	movs	r0, #0
 8002824:	f001 fec8 	bl	80045b8 <uartAvailable>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d02b      	beq.n	8002884 <ModbusDataStateHandler+0x80>
  {
    uartRead(_DEF_UART1);
 800282c:	2000      	movs	r0, #0
 800282e:	f001 feed 	bl	800460c <uartRead>
    if (RxData[0] == slave_id)
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <ModbusDataStateHandler+0xac>)
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <ModbusDataStateHandler+0xa8>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d122      	bne.n	8002884 <ModbusDataStateHandler+0x80>
    {
      switch (RxData[1])
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <ModbusDataStateHandler+0xac>)
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b06      	cmp	r3, #6
 8002844:	d00f      	beq.n	8002866 <ModbusDataStateHandler+0x62>
 8002846:	dc16      	bgt.n	8002876 <ModbusDataStateHandler+0x72>
 8002848:	2b03      	cmp	r3, #3
 800284a:	d002      	beq.n	8002852 <ModbusDataStateHandler+0x4e>
 800284c:	2b04      	cmp	r3, #4
 800284e:	d005      	beq.n	800285c <ModbusDataStateHandler+0x58>
 8002850:	e011      	b.n	8002876 <ModbusDataStateHandler+0x72>
      {
        case 0x03:
          readHoldingRegs(Holding_Registers_Database);
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <ModbusDataStateHandler+0xa4>)
 8002854:	0018      	movs	r0, r3
 8002856:	f002 f9f9 	bl	8004c4c <readHoldingRegs>
          break;
 800285a:	e010      	b.n	800287e <ModbusDataStateHandler+0x7a>
        case 0x04:
          readInputRegs(Input_Registers_Database);
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <ModbusDataStateHandler+0xb0>)
 800285e:	0018      	movs	r0, r3
 8002860:	f002 fa90 	bl	8004d84 <readInputRegs>
          break;
 8002864:	e00b      	b.n	800287e <ModbusDataStateHandler+0x7a>
        case 0x06:
         ret = writeSingleReg(Holding_Registers_Database);
 8002866:	1dfc      	adds	r4, r7, #7
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <ModbusDataStateHandler+0xa4>)
 800286a:	0018      	movs	r0, r3
 800286c:	f002 fb26 	bl	8004ebc <writeSingleReg>
 8002870:	0003      	movs	r3, r0
 8002872:	7023      	strb	r3, [r4, #0]
          break;
 8002874:	e003      	b.n	800287e <ModbusDataStateHandler+0x7a>
        default:
          modbusException(ILLEGAL_FUNCTION);
 8002876:	2001      	movs	r0, #1
 8002878:	f002 f9c4 	bl	8004c04 <modbusException>
          break;
 800287c:	46c0      	nop			; (mov r8, r8)
      }
   /*board LD3 Toggle*/
   ledToggle(_DEF_LED1);
 800287e:	2000      	movs	r0, #0
 8002880:	f001 fd92 	bl	80043a8 <ledToggle>
   }
  }

  if (ret == 2)
 8002884:	1dfb      	adds	r3, r7, #7
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d103      	bne.n	8002894 <ModbusDataStateHandler+0x90>
  {
    ap_State = CLE_STATE;
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <ModbusDataStateHandler+0xb4>)
 800288e:	2203      	movs	r2, #3
 8002890:	701a      	strb	r2, [r3, #0]
  else
  {
    ap_State = MODE_STATE;//MODE_STATE
  }

}
 8002892:	e002      	b.n	800289a <ModbusDataStateHandler+0x96>
    ap_State = MODE_STATE;//MODE_STATE
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <ModbusDataStateHandler+0xb4>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b003      	add	sp, #12
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	0800b4d8 	.word	0x0800b4d8
 80028a8:	20000004 	.word	0x20000004
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000b94 	.word	0x20000b94
 80028b4:	200002a0 	.word	0x200002a0
 80028b8:	20000294 	.word	0x20000294

080028bc <CLEStateHandler>:

void CLEStateHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  cliExit_Flag = true;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <CLEStateHandler+0x2c>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]

  while(cliExit_Flag)
 80028c6:	e001      	b.n	80028cc <CLEStateHandler+0x10>
  {
    cliMain();
 80028c8:	f000 fc5a 	bl	8003180 <cliMain>
  while(cliExit_Flag)
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <CLEStateHandler+0x2c>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <CLEStateHandler+0xc>
  }
  reset_flag = true;
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <CLEStateHandler+0x30>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]

  ap_State = INIT_STATE;
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <CLEStateHandler+0x34>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	20000074 	.word	0x20000074
 80028ec:	2000029c 	.word	0x2000029c
 80028f0:	20000294 	.word	0x20000294

080028f4 <cli_uartInit>:

uint16_t* Holding_Reg;


bool cli_uartInit(uint16_t* Holding_Registers_Database)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  bool ret = true;
 80028fc:	240f      	movs	r4, #15
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
  Holding_Reg = Holding_Registers_Database;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <cli_uartInit+0x30>)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
  cliAdd("uart", cli_uart);
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <cli_uartInit+0x34>)
 800290c:	4b07      	ldr	r3, [pc, #28]	; (800292c <cli_uartInit+0x38>)
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f001 fa0f 	bl	8003d34 <cliAdd>

  return ret;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	781b      	ldrb	r3, [r3, #0]
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b005      	add	sp, #20
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000304 	.word	0x20000304
 8002928:	08002931 	.word	0x08002931
 800292c:	0800b4f0 	.word	0x0800b4f0

08002930 <cli_uart>:

void cli_uart(cli_args_t *args)
{
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002938:	240f      	movs	r4, #15
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  uint32_t uart_baudrate;

  cliPrintf("uart baudrate\n");
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <cli_uart+0x6c>)
 8002942:	0018      	movs	r0, r3
 8002944:	f001 f8d2 	bl	8003aec <cliPrintf>

  if (args->argc == 1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d115      	bne.n	800297c <cli_uart+0x4c>
  {
    uart_baudrate = (uint32_t)args->getData(0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2000      	movs	r0, #0
 8002956:	4798      	blx	r3
 8002958:	0003      	movs	r3, r0
 800295a:	60bb      	str	r3, [r7, #8]

    Holding_Reg[1] = (uint16_t)(uart_baudrate >>16);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	0c1a      	lsrs	r2, r3, #16
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <cli_uart+0x70>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3302      	adds	r3, #2
 8002966:	b292      	uxth	r2, r2
 8002968:	801a      	strh	r2, [r3, #0]
    Holding_Reg[2] = (uint16_t)(uart_baudrate & 0xffff);
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <cli_uart+0x70>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3304      	adds	r3, #4
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	b292      	uxth	r2, r2
 8002974:	801a      	strh	r2, [r3, #0]

    ret = true;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
  }

  if (ret != true)
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4053      	eors	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <cli_uart+0x64>
  {
    cliPrintf("uart baudrate\n");
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <cli_uart+0x6c>)
 800298e:	0018      	movs	r0, r3
 8002990:	f001 f8ac 	bl	8003aec <cliPrintf>
  }
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b005      	add	sp, #20
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	0800b4f8 	.word	0x0800b4f8
 80029a0:	20000304 	.word	0x20000304

080029a4 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  HAL_Init();
 80029aa:	f002 fb53 	bl	8005054 <HAL_Init>
  SystemClock_Config();
 80029ae:	f000 f82b 	bl	8002a08 <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <bspInit+0x50>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <bspInit+0x50>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	03c9      	lsls	r1, r1, #15
 80029bc:	430a      	orrs	r2, r1
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <bspInit+0x50>)
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	03db      	lsls	r3, r3, #15
 80029c8:	4013      	ands	r3, r2
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <bspInit+0x50>)
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <bspInit+0x50>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0289      	lsls	r1, r1, #10
 80029d8:	430a      	orrs	r2, r1
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <bspInit+0x50>)
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	4013      	ands	r3, r2
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40021000 	.word	0x40021000

080029f8 <millis>:
{
 HAL_Delay(ms);
}

uint32_t millis(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80029fc:	f002 fb84 	bl	8005108 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b097      	sub	sp, #92	; 0x5c
 8002a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0e:	2428      	movs	r4, #40	; 0x28
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	0018      	movs	r0, r3
 8002a14:	2330      	movs	r3, #48	; 0x30
 8002a16:	001a      	movs	r2, r3
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f005 fa5a 	bl	8007ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1e:	2318      	movs	r3, #24
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	0018      	movs	r0, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	001a      	movs	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f005 fa52 	bl	8007ed2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	0018      	movs	r0, r3
 8002a32:	2314      	movs	r3, #20
 8002a34:	001a      	movs	r2, r3
 8002a36:	2100      	movs	r1, #0
 8002a38:	f005 fa4b 	bl	8007ed2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2201      	movs	r2, #1
 8002a48:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0252      	lsls	r2, r2, #9
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	0352      	lsls	r2, r2, #13
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2200      	movs	r2, #0
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f003 fabb 	bl	8005fe4 <HAL_RCC_OscConfig>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002a72:	f000 f828 	bl	8002ac6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a76:	2118      	movs	r1, #24
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2202      	movs	r2, #2
 8002a82:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2101      	movs	r1, #1
 8002a94:	0018      	movs	r0, r3
 8002a96:	f003 fdbf 	bl	8006618 <HAL_RCC_ClockConfig>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d001      	beq.n	8002aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a9e:	f000 f812 	bl	8002ac6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f003 fef5 	bl	80068a0 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002aba:	f000 f804 	bl	8002ac6 <Error_Handler>
  }
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b017      	add	sp, #92	; 0x5c
 8002ac4:	bd90      	pop	{r4, r7, pc}

08002ac6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aca:	b672      	cpsid	i
}
 8002acc:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ace:	e7fe      	b.n	8002ace <Error_Handler+0x8>

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_MspInit+0x44>)
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_MspInit+0x44>)
 8002adc:	2101      	movs	r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	619a      	str	r2, [r3, #24]
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <HAL_MspInit+0x44>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4013      	ands	r3, r2
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_MspInit+0x44>)
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_MspInit+0x44>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	0549      	lsls	r1, r1, #21
 8002af8:	430a      	orrs	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_MspInit+0x44>)
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	055b      	lsls	r3, r3, #21
 8002b04:	4013      	ands	r3, r2
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	40021000 	.word	0x40021000

08002b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <NMI_Handler+0x4>

08002b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <HardFault_Handler+0x4>

08002b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b3c:	f002 fad2 	bl	80050e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <USART1_IRQHandler+0x14>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f004 f8b6 	bl	8006cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20000ac8 	.word	0x20000ac8

08002b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  return 1;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_kill>:

int _kill(int pid, int sig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b76:	f005 f979 	bl	8007e6c <__errno>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	2216      	movs	r2, #22
 8002b7e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	425b      	negs	r3, r3
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_exit>:

void _exit (int status)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b94:	2301      	movs	r3, #1
 8002b96:	425a      	negs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff ffe5 	bl	8002b6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ba2:	e7fe      	b.n	8002ba2 <_exit+0x16>

08002ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e00a      	b.n	8002bcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bb6:	e000      	b.n	8002bba <_read+0x16>
 8002bb8:	bf00      	nop
 8002bba:	0001      	movs	r1, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	60ba      	str	r2, [r7, #8]
 8002bc2:	b2ca      	uxtb	r2, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbf0      	blt.n	8002bb6 <_read+0x12>
  }

  return len;
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	e009      	b.n	8002c04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	e000      	b.n	8002bfe <_write+0x20>
 8002bfc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	3301      	adds	r3, #1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	dbf1      	blt.n	8002bf0 <_write+0x12>
  }
  return len;
 8002c0c:	687b      	ldr	r3, [r7, #4]
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_close>:

int _close(int file)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	425b      	negs	r3, r3
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	0192      	lsls	r2, r2, #6
 8002c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b002      	add	sp, #8
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_isatty>:

int _isatty(int file)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <_sbrk+0x5c>)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <_sbrk+0x60>)
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d102      	bne.n	8002c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <_sbrk+0x64>)
 8002c8e:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <_sbrk+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d207      	bcs.n	8002cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca0:	f005 f8e4 	bl	8007e6c <__errno>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	425b      	negs	r3, r3
 8002cae:	e009      	b.n	8002cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	18d2      	adds	r2, r2, r3
 8002cbe:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <_sbrk+0x64>)
 8002cc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b006      	add	sp, #24
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20002000 	.word	0x20002000
 8002cd0:	00000400 	.word	0x00000400
 8002cd4:	20000308 	.word	0x20000308
 8002cd8:	20000ec8 	.word	0x20000ec8

08002cdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cec:	f7ff fff6 	bl	8002cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <LoopForever+0xe>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d08:	4c0a      	ldr	r4, [pc, #40]	; (8002d34 <LoopForever+0x16>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d16:	f005 f8af 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d1a:	f005 f89a 	bl	8007e52 <main>

08002d1e <LoopForever>:

LoopForever:
  b LoopForever
 8002d1e:	e7fe      	b.n	8002d1e <LoopForever>
  ldr   r0, =_estack
 8002d20:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002d2c:	0800bd7c 	.word	0x0800bd7c
  ldr r2, =_sbss
 8002d30:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002d34:	20000ec8 	.word	0x20000ec8

08002d38 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_COMP_IRQHandler>

08002d3a <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002d46:	2117      	movs	r1, #23
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]

  p_node->in    = 0;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	60da      	str	r2, [r3, #12]

  return ret;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b006      	add	sp, #24
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <qbufferRead>:
    }
  }
  return ret;
}
bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b088      	sub	sp, #32
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002d7e:	231f      	movs	r3, #31
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]

  uint8_t buf1;
  uint8_t buf2;

  for (int i=0; i<length; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	e039      	b.n	8002e00 <qbufferRead+0x8e>
  {
    if (p_node -> p_buf != NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d019      	beq.n	8002dc8 <qbufferRead+0x56>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	18d2      	adds	r2, r2, r3
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	18cb      	adds	r3, r1, r3
 8002da4:	7812      	ldrb	r2, [r2, #0]
 8002da6:	701a      	strb	r2, [r3, #0]
      buf1 = p_data[i];
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	18d2      	adds	r2, r2, r3
 8002dae:	2317      	movs	r3, #23
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	701a      	strb	r2, [r3, #0]
      buf2 = p_node->p_buf[p_node->out];
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	18d2      	adds	r2, r2, r3
 8002dc0:	2316      	movs	r3, #22
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
    }
    if (p_node->out != p_node->in)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d00d      	beq.n	8002df0 <qbufferRead+0x7e>
    {
      p_node->out = (p_node->out + 1) %p_node->len;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	0019      	movs	r1, r3
 8002de0:	0010      	movs	r0, r2
 8002de2:	f7fd fa3d 	bl	8000260 <__aeabi_uidivmod>
 8002de6:	000b      	movs	r3, r1
 8002de8:	001a      	movs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e004      	b.n	8002dfa <qbufferRead+0x88>
    }
    else
    {
      ret = false;
 8002df0:	231f      	movs	r3, #31
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
      break;
 8002df8:	e006      	b.n	8002e08 <qbufferRead+0x96>
  for (int i=0; i<length; i++)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8c1      	bhi.n	8002d8c <qbufferRead+0x1a>
    }
  }
  return ret;
 8002e08:	231f      	movs	r3, #31
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b008      	add	sp, #32
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node -> len;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	1ad2      	subs	r2, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	0010      	movs	r0, r2
 8002e30:	f7fd fa16 	bl	8000260 <__aeabi_uidivmod>
 8002e34:	000b      	movs	r3, r1
 8002e36:	60fb      	str	r3, [r7, #12]

  return ret;
 8002e38:	68fb      	ldr	r3, [r7, #12]
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <buttonInit>:
        {GPIOA, GPIO_PIN_0},
    };


bool buttonInit(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
  bool ret = true;
 8002e4a:	231b      	movs	r3, #27
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <buttonInit+0x88>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <buttonInit+0x88>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	0289      	lsls	r1, r1, #10
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <buttonInit+0x88>)
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	029b      	lsls	r3, r3, #10
 8002e68:	4013      	ands	r3, r2
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	0018      	movs	r0, r3
 8002e72:	2314      	movs	r3, #20
 8002e74:	001a      	movs	r2, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	f005 f82b 	bl	8007ed2 <memset>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	2200      	movs	r2, #0
 8002e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2200      	movs	r2, #0
 8002e86:	609a      	str	r2, [r3, #8]

  for (int i = 0; i<BUTTON_MAX_CH; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	e014      	b.n	8002eb8 <buttonInit+0x74>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <buttonInit+0x8c>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	3304      	adds	r3, #4
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <buttonInit+0x8c>)
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	00d2      	lsls	r2, r2, #3
 8002ea6:	58d3      	ldr	r3, [r2, r3]
 8002ea8:	1d3a      	adds	r2, r7, #4
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f002 fe03 	bl	8005ab8 <HAL_GPIO_Init>
  for (int i = 0; i<BUTTON_MAX_CH; i++)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	dde7      	ble.n	8002e8e <buttonInit+0x4a>
  }

  return ret;
 8002ebe:	231b      	movs	r3, #27
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]

}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b008      	add	sp, #32
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	2000006c 	.word	0x2000006c

08002ed4 <buttonStateCheck>:

GPIO_PinState buttonStateCheck(uint8_t ch)
{
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	0002      	movs	r2, r0
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	701a      	strb	r2, [r3, #0]
  if (ch >= BUTTON_MAX_CH) return;
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <buttonStateCheck+0x40>
  GPIO_PinState state = HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin);
 8002ee8:	1dfb      	adds	r3, r7, #7
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <buttonStateCheck+0x4c>)
 8002eee:	00d2      	lsls	r2, r2, #3
 8002ef0:	58d0      	ldr	r0, [r2, r3]
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <buttonStateCheck+0x4c>)
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	18d3      	adds	r3, r2, r3
 8002efc:	3304      	adds	r3, #4
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	250f      	movs	r5, #15
 8002f02:	197c      	adds	r4, r7, r5
 8002f04:	0019      	movs	r1, r3
 8002f06:	f003 f817 	bl	8005f38 <HAL_GPIO_ReadPin>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	7023      	strb	r3, [r4, #0]

  return state;
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	e001      	b.n	8002f18 <buttonStateCheck+0x44>
  if (ch >= BUTTON_MAX_CH) return;
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46c0      	nop			; (mov r8, r8)
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b004      	add	sp, #16
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f20:	2000006c 	.word	0x2000006c

08002f24 <cliInit>:
void cliMemoryDump(cli_args_t *args);
void cliExit(cli_args_t *args);


bool cliInit(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <cliInit+0x9c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8002f2e:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <cliInit+0x9c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <cliInit+0x9c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <cliInit+0x9c>)
 8002f3c:	2396      	movs	r3, #150	; 0x96
 8002f3e:	33ff      	adds	r3, #255	; 0xff
 8002f40:	2100      	movs	r1, #0
 8002f42:	54d1      	strb	r1, [r2, r3]
  cli_node.hist_line_last  = 0;
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <cliInit+0x9c>)
 8002f46:	23cb      	movs	r3, #203	; 0xcb
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	54d1      	strb	r1, [r2, r3]
  cli_node.hist_line_count = 0;
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <cliInit+0x9c>)
 8002f50:	2398      	movs	r3, #152	; 0x98
 8002f52:	33ff      	adds	r3, #255	; 0xff
 8002f54:	2100      	movs	r1, #0
 8002f56:	54d1      	strb	r1, [r2, r3]
  cli_node.hist_line_new   = false;
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <cliInit+0x9c>)
 8002f5a:	23ca      	movs	r3, #202	; 0xca
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2100      	movs	r1, #0
 8002f60:	54d1      	strb	r1, [r2, r3]

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <cliInit+0x9c>)
 8002f64:	23e5      	movs	r3, #229	; 0xe5
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4916      	ldr	r1, [pc, #88]	; (8002fc4 <cliInit+0xa0>)
 8002f6a:	50d1      	str	r1, [r2, r3]
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <cliInit+0x9c>)
 8002f6e:	23e6      	movs	r3, #230	; 0xe6
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4915      	ldr	r1, [pc, #84]	; (8002fc8 <cliInit+0xa4>)
 8002f74:	50d1      	str	r1, [r2, r3]
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <cliInit+0x9c>)
 8002f78:	23e7      	movs	r3, #231	; 0xe7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4913      	ldr	r1, [pc, #76]	; (8002fcc <cliInit+0xa8>)
 8002f7e:	50d1      	str	r1, [r2, r3]
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <cliInit+0x9c>)
 8002f82:	23e8      	movs	r3, #232	; 0xe8
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4912      	ldr	r1, [pc, #72]	; (8002fd0 <cliInit+0xac>)
 8002f88:	50d1      	str	r1, [r2, r3]

  cliLineClean(&cli_node);
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <cliInit+0x9c>)
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fbcd 	bl	800372c <cliLineClean>


  cliAdd("help", cliShowList);
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <cliInit+0xb0>)
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <cliInit+0xb4>)
 8002f96:	0011      	movs	r1, r2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fecb 	bl	8003d34 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8002f9e:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <cliInit+0xb8>)
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <cliInit+0xbc>)
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 fec5 	bl	8003d34 <cliAdd>
  cliAdd("exit", cliExit);
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <cliInit+0xc0>)
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <cliInit+0xc4>)
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 febf 	bl	8003d34 <cliAdd>

  return true;
 8002fb6:	2301      	movs	r3, #1
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	2000030c 	.word	0x2000030c
 8002fc4:	08003bcd 	.word	0x08003bcd
 8002fc8:	08003c25 	.word	0x08003c25
 8002fcc:	08003c7d 	.word	0x08003c7d
 8002fd0:	08003cc9 	.word	0x08003cc9
 8002fd4:	08003ded 	.word	0x08003ded
 8002fd8:	0800b508 	.word	0x0800b508
 8002fdc:	08003e89 	.word	0x08003e89
 8002fe0:	0800b510 	.word	0x0800b510
 8002fe4:	08003e6d 	.word	0x08003e6d
 8002fe8:	0800b514 	.word	0x0800b514

08002fec <cliOpen>:

bool cliOpen(uint8_t ch)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	701a      	strb	r2, [r3, #0]
  cli_node.ch = ch;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <cliOpen+0x34>)
 8002ffa:	1dfa      	adds	r2, r7, #7
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	701a      	strb	r2, [r3, #0]

  cli_node.is_open = uartOpen(ch);
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	0018      	movs	r0, r3
 8003006:	f001 fa07 	bl	8004418 <uartOpen>
 800300a:	0003      	movs	r3, r0
 800300c:	001a      	movs	r2, r3
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <cliOpen+0x34>)
 8003010:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8003012:	4b03      	ldr	r3, [pc, #12]	; (8003020 <cliOpen+0x34>)
 8003014:	7a1b      	ldrb	r3, [r3, #8]
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	2000030c 	.word	0x2000030c

08003024 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800302c:	4b3b      	ldr	r3, [pc, #236]	; (800311c <cliShowLog+0xf8>)
 800302e:	7a5b      	ldrb	r3, [r3, #9]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d06f      	beq.n	8003114 <cliShowLog+0xf0>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7a98      	ldrb	r0, [r3, #10]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a39      	ldr	r2, [pc, #228]	; (8003120 <cliShowLog+0xfc>)
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	001a      	movs	r2, r3
 8003040:	4b38      	ldr	r3, [pc, #224]	; (8003124 <cliShowLog+0x100>)
 8003042:	0019      	movs	r1, r3
 8003044:	f001 fb2c 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7a98      	ldrb	r0, [r3, #10]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a36      	ldr	r2, [pc, #216]	; (8003128 <cliShowLog+0x104>)
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	001a      	movs	r2, r3
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <cliShowLog+0x108>)
 8003056:	0019      	movs	r1, r3
 8003058:	f001 fb22 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7a98      	ldrb	r0, [r3, #10]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	2391      	movs	r3, #145	; 0x91
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	001a      	movs	r2, r3
 800306a:	4b31      	ldr	r3, [pc, #196]	; (8003130 <cliShowLog+0x10c>)
 800306c:	0019      	movs	r1, r3
 800306e:	f001 fb17 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7a98      	ldrb	r0, [r3, #10]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2289      	movs	r2, #137	; 0x89
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	189a      	adds	r2, r3, r2
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <cliShowLog+0x110>)
 8003080:	0019      	movs	r1, r3
 8003082:	f001 fb0d 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7a98      	ldrb	r0, [r3, #10]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	2396      	movs	r3, #150	; 0x96
 800308e:	33ff      	adds	r3, #255	; 0xff
 8003090:	56d3      	ldrsb	r3, [r2, r3]
 8003092:	001a      	movs	r2, r3
 8003094:	4b28      	ldr	r3, [pc, #160]	; (8003138 <cliShowLog+0x114>)
 8003096:	0019      	movs	r1, r3
 8003098:	f001 fb02 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7a98      	ldrb	r0, [r3, #10]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	23cb      	movs	r3, #203	; 0xcb
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	5cd3      	ldrb	r3, [r2, r3]
 80030a8:	001a      	movs	r2, r3
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <cliShowLog+0x118>)
 80030ac:	0019      	movs	r1, r3
 80030ae:	f001 faf7 	bl	80046a0 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7a98      	ldrb	r0, [r3, #10]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	2398      	movs	r3, #152	; 0x98
 80030ba:	33ff      	adds	r3, #255	; 0xff
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	001a      	movs	r2, r3
 80030c0:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <cliShowLog+0x11c>)
 80030c2:	0019      	movs	r1, r3
 80030c4:	f001 faec 	bl	80046a0 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e013      	b.n	80030f6 <cliShowLog+0xd2>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7a98      	ldrb	r0, [r3, #10]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	0013      	movs	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	1ad2      	subs	r2, r2, r3
 80030de:	0013      	movs	r3, r2
 80030e0:	3399      	adds	r3, #153	; 0x99
 80030e2:	33ff      	adds	r3, #255	; 0xff
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	18d3      	adds	r3, r2, r3
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4916      	ldr	r1, [pc, #88]	; (8003144 <cliShowLog+0x120>)
 80030ec:	f001 fad8 	bl	80046a0 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3301      	adds	r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	2398      	movs	r3, #152	; 0x98
 80030fa:	33ff      	adds	r3, #255	; 0xff
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	001a      	movs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4293      	cmp	r3, r2
 8003104:	dbe3      	blt.n	80030ce <cliShowLog+0xaa>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7a9b      	ldrb	r3, [r3, #10]
 800310a:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <cliShowLog+0x124>)
 800310c:	0011      	movs	r1, r2
 800310e:	0018      	movs	r0, r3
 8003110:	f001 fac6 	bl	80046a0 <uartPrintf>
  }
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b004      	add	sp, #16
 800311a:	bd80      	pop	{r7, pc}
 800311c:	2000030c 	.word	0x2000030c
 8003120:	00000245 	.word	0x00000245
 8003124:	0800b51c 	.word	0x0800b51c
 8003128:	00000246 	.word	0x00000246
 800312c:	0800b52c 	.word	0x0800b52c
 8003130:	0800b53c 	.word	0x0800b53c
 8003134:	0800b54c 	.word	0x0800b54c
 8003138:	0800b55c 	.word	0x0800b55c
 800313c:	0800b56c 	.word	0x0800b56c
 8003140:	0800b57c 	.word	0x0800b57c
 8003144:	0800b58c 	.word	0x0800b58c
 8003148:	0800b59c 	.word	0x0800b59c

0800314c <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4a07      	ldr	r2, [pc, #28]	; (8003178 <cliShowPrompt+0x2c>)
 800315a:	0011      	movs	r1, r2
 800315c:	0018      	movs	r0, r3
 800315e:	f001 fa9f 	bl	80046a0 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4a05      	ldr	r2, [pc, #20]	; (800317c <cliShowPrompt+0x30>)
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f001 fa98 	bl	80046a0 <uartPrintf>
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	0800b5a0 	.word	0x0800b5a0
 800317c:	0800b5a4 	.word	0x0800b5a4

08003180 <cliMain>:

bool cliMain(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]

  if (cli_node.is_open != true)
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <cliMain+0x6c>)
 800318c:	7a1b      	ldrb	r3, [r3, #8]
 800318e:	2201      	movs	r2, #1
 8003190:	4053      	eors	r3, r2
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <cliMain+0x1c>
  {
    return false;
 8003198:	2300      	movs	r3, #0
 800319a:	e022      	b.n	80031e2 <cliMain+0x62>
  }

  ret = uartAvailable(cli_node.ch);
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <cliMain+0x6c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f001 fa09 	bl	80045b8 <uartAvailable>
 80031a6:	0003      	movs	r3, r0
 80031a8:	603b      	str	r3, [r7, #0]
    if (ret > 0)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d017      	beq.n	80031e0 <cliMain+0x60>
    {
      uartRead(cli_node.ch);
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <cliMain+0x6c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f001 fa29 	bl	800460c <uartRead>
      for (int i=0; i<ret; i++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	e00b      	b.n	80031d8 <cliMain+0x58>
      {
        //uartPrintf(cli_node.ch, "Rx : 0x%X\r\n", RxData[i]);
        cliUpdate(&cli_node, RxData[i]);
 80031c0:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <cliMain+0x70>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	18d3      	adds	r3, r2, r3
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <cliMain+0x6c>)
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f811 	bl	80031f4 <cliUpdate>
      for (int i=0; i<ret; i++)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3301      	adds	r3, #1
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d8ef      	bhi.n	80031c0 <cliMain+0x40>
      }


    }

  return true;
 80031e0:	2301      	movs	r3, #1
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	2000030c 	.word	0x2000030c
 80031f0:	20000b94 	.word	0x20000b94

080031f4 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b08d      	sub	sp, #52	; 0x34
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	000a      	movs	r2, r1
 80031fe:	1cfb      	adds	r3, r7, #3
 8003200:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 8003202:	2323      	movs	r3, #35	; 0x23
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2289      	movs	r2, #137	; 0x89
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4694      	mov	ip, r2
 8003212:	4463      	add	r3, ip
 8003214:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	7c1b      	ldrb	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d000      	beq.n	8003220 <cliUpdate+0x2c>
 800321e:	e17b      	b.n	8003518 <cliUpdate+0x324>
  {
    switch(rx_data)
 8003220:	1cfb      	adds	r3, r7, #3
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b7f      	cmp	r3, #127	; 0x7f
 8003226:	d02b      	beq.n	8003280 <cliUpdate+0x8c>
 8003228:	dd00      	ble.n	800322c <cliUpdate+0x38>
 800322a:	e0e5      	b.n	80033f8 <cliUpdate+0x204>
 800322c:	2b1b      	cmp	r3, #27
 800322e:	d023      	beq.n	8003278 <cliUpdate+0x84>
 8003230:	dd00      	ble.n	8003234 <cliUpdate+0x40>
 8003232:	e0e1      	b.n	80033f8 <cliUpdate+0x204>
 8003234:	2b08      	cmp	r3, #8
 8003236:	d06a      	beq.n	800330e <cliUpdate+0x11a>
 8003238:	2b0d      	cmp	r3, #13
 800323a:	d000      	beq.n	800323e <cliUpdate+0x4a>
 800323c:	e0dc      	b.n	80033f8 <cliUpdate+0x204>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2222      	movs	r2, #34	; 0x22
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <cliUpdate+0x64>
        {
          cliLineAdd(p_cli);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fa8c 	bl	8003768 <cliLineAdd>
          cliRunCmd(p_cli);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0018      	movs	r0, r3
 8003254:	f000 fb82 	bl	800395c <cliRunCmd>
        }

        line->count = 0;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2222      	movs	r2, #34	; 0x22
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]
        line->cursor = 0;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2221      	movs	r2, #33	; 0x21
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]
        line->buf[0] = 0;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff ff6b 	bl	800314c <cliShowPrompt>
        break;
 8003276:	e156      	b.n	8003526 <cliUpdate+0x332>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	741a      	strb	r2, [r3, #16]
        break;
 800327e:	e152      	b.n	8003526 <cliUpdate+0x332>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2221      	movs	r2, #33	; 0x21
 8003284:	5c9a      	ldrb	r2, [r3, r2]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2122      	movs	r1, #34	; 0x22
 800328a:	5c5b      	ldrb	r3, [r3, r1]
 800328c:	429a      	cmp	r2, r3
 800328e:	d300      	bcc.n	8003292 <cliUpdate+0x9e>
 8003290:	e144      	b.n	800351c <cliUpdate+0x328>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2222      	movs	r2, #34	; 0x22
 8003296:	5c99      	ldrb	r1, [r3, r2]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2221      	movs	r2, #33	; 0x21
 800329c:	5c9a      	ldrb	r2, [r3, r2]
 800329e:	231b      	movs	r3, #27
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	1a8a      	subs	r2, r1, r2
 80032a4:	701a      	strb	r2, [r3, #0]
          for (int i=1; i<mov_len; i++)
 80032a6:	2301      	movs	r3, #1
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	e013      	b.n	80032d4 <cliUpdate+0xe0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	5c9b      	ldrb	r3, [r3, r2]
 80032b2:	001a      	movs	r2, r3
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	18d2      	adds	r2, r2, r3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2121      	movs	r1, #33	; 0x21
 80032bc:	5c5b      	ldrb	r3, [r3, r1]
 80032be:	0019      	movs	r1, r3
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	18cb      	adds	r3, r1, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	69f9      	ldr	r1, [r7, #28]
 80032c8:	5c89      	ldrb	r1, [r1, r2]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	3301      	adds	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d4:	231b      	movs	r3, #27
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	dbe5      	blt.n	80032ac <cliUpdate+0xb8>
          }

          line->count--;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2222      	movs	r2, #34	; 0x22
 80032e4:	5c9b      	ldrb	r3, [r3, r2]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b2d9      	uxtb	r1, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	2222      	movs	r2, #34	; 0x22
 80032ee:	5499      	strb	r1, [r3, r2]
          line->buf[line->count] = 0;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2222      	movs	r2, #34	; 0x22
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	001a      	movs	r2, r3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4a95      	ldr	r2, [pc, #596]	; (8003558 <cliUpdate+0x364>)
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f001 f9ca 	bl	80046a0 <uartPrintf>
        }
        break;
 800330c:	e106      	b.n	800351c <cliUpdate+0x328>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	2222      	movs	r2, #34	; 0x22
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d059      	beq.n	80033cc <cliUpdate+0x1d8>
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2221      	movs	r2, #33	; 0x21
 800331c:	5c9b      	ldrb	r3, [r3, r2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d054      	beq.n	80033cc <cliUpdate+0x1d8>
        {
          if (line->cursor == line->count)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2221      	movs	r2, #33	; 0x21
 8003326:	5c9a      	ldrb	r2, [r3, r2]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2122      	movs	r1, #34	; 0x22
 800332c:	5c5b      	ldrb	r3, [r3, r1]
 800332e:	429a      	cmp	r2, r3
 8003330:	d10e      	bne.n	8003350 <cliUpdate+0x15c>
          {
            line->count--;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2222      	movs	r2, #34	; 0x22
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	3b01      	subs	r3, #1
 800333a:	b2d9      	uxtb	r1, r3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2222      	movs	r2, #34	; 0x22
 8003340:	5499      	strb	r1, [r3, r2]
            line->buf[line->count] = 0;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	2222      	movs	r2, #34	; 0x22
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	001a      	movs	r2, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2100      	movs	r1, #0
 800334e:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	5c9a      	ldrb	r2, [r3, r2]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2122      	movs	r1, #34	; 0x22
 800335a:	5c5b      	ldrb	r3, [r3, r1]
 800335c:	429a      	cmp	r2, r3
 800335e:	d235      	bcs.n	80033cc <cliUpdate+0x1d8>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2222      	movs	r2, #34	; 0x22
 8003364:	5c99      	ldrb	r1, [r3, r2]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	5c9a      	ldrb	r2, [r3, r2]
 800336c:	231a      	movs	r3, #26
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	1a8a      	subs	r2, r1, r2
 8003372:	701a      	strb	r2, [r3, #0]

            for (int i=0; i<mov_len; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
 8003378:	e013      	b.n	80033a2 <cliUpdate+0x1ae>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	001a      	movs	r2, r3
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	18d2      	adds	r2, r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2121      	movs	r1, #33	; 0x21
 800338a:	5c5b      	ldrb	r3, [r3, r1]
 800338c:	0019      	movs	r1, r3
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	18cb      	adds	r3, r1, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	5c89      	ldrb	r1, [r1, r2]
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	3301      	adds	r3, #1
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a2:	231a      	movs	r3, #26
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033aa:	429a      	cmp	r2, r3
 80033ac:	dbe5      	blt.n	800337a <cliUpdate+0x186>
            }

            line->count--;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2222      	movs	r2, #34	; 0x22
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b2d9      	uxtb	r1, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2222      	movs	r2, #34	; 0x22
 80033bc:	5499      	strb	r1, [r3, r2]
            line->buf[line->count] = 0;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2222      	movs	r2, #34	; 0x22
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	001a      	movs	r2, r3
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2221      	movs	r2, #33	; 0x21
 80033d0:	5c9b      	ldrb	r3, [r3, r2]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d100      	bne.n	80033d8 <cliUpdate+0x1e4>
 80033d6:	e0a3      	b.n	8003520 <cliUpdate+0x32c>
        {
          line->cursor--;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2221      	movs	r2, #33	; 0x21
 80033dc:	5c9b      	ldrb	r3, [r3, r2]
 80033de:	3b01      	subs	r3, #1
 80033e0:	b2d9      	uxtb	r1, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2221      	movs	r2, #33	; 0x21
 80033e6:	5499      	strb	r1, [r3, r2]
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4a5b      	ldr	r2, [pc, #364]	; (800355c <cliUpdate+0x368>)
 80033ee:	0011      	movs	r1, r2
 80033f0:	0018      	movs	r0, r3
 80033f2:	f001 f955 	bl	80046a0 <uartPrintf>
        }
        break;
 80033f6:	e093      	b.n	8003520 <cliUpdate+0x32c>


      default:
        if ((line->count + 1) < line->buf_len)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2222      	movs	r2, #34	; 0x22
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	3301      	adds	r3, #1
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	2120      	movs	r1, #32
 8003404:	5c52      	ldrb	r2, [r2, r1]
 8003406:	4293      	cmp	r3, r2
 8003408:	db00      	blt.n	800340c <cliUpdate+0x218>
 800340a:	e08b      	b.n	8003524 <cliUpdate+0x330>
        {
          if (line->cursor == line->count)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2221      	movs	r2, #33	; 0x21
 8003410:	5c9a      	ldrb	r2, [r3, r2]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2122      	movs	r1, #34	; 0x22
 8003416:	5c5b      	ldrb	r3, [r3, r1]
 8003418:	429a      	cmp	r2, r3
 800341a:	d125      	bne.n	8003468 <cliUpdate+0x274>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	1cf9      	adds	r1, r7, #3
 8003422:	2201      	movs	r2, #1
 8003424:	0018      	movs	r0, r3
 8003426:	f001 f913 	bl	8004650 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2221      	movs	r2, #33	; 0x21
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	001a      	movs	r2, r3
 8003432:	1cfb      	adds	r3, r7, #3
 8003434:	7819      	ldrb	r1, [r3, #0]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	5499      	strb	r1, [r3, r2]
            line->count++;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2222      	movs	r2, #34	; 0x22
 800343e:	5c9b      	ldrb	r3, [r3, r2]
 8003440:	3301      	adds	r3, #1
 8003442:	b2d9      	uxtb	r1, r3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2222      	movs	r2, #34	; 0x22
 8003448:	5499      	strb	r1, [r3, r2]
            line->cursor++;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2221      	movs	r2, #33	; 0x21
 800344e:	5c9b      	ldrb	r3, [r3, r2]
 8003450:	3301      	adds	r3, #1
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2221      	movs	r2, #33	; 0x21
 8003458:	5499      	strb	r1, [r3, r2]
            line->buf[line->count] = 0;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2222      	movs	r2, #34	; 0x22
 800345e:	5c9b      	ldrb	r3, [r3, r2]
 8003460:	001a      	movs	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2221      	movs	r2, #33	; 0x21
 800346c:	5c9a      	ldrb	r2, [r3, r2]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2122      	movs	r1, #34	; 0x22
 8003472:	5c5b      	ldrb	r3, [r3, r1]
 8003474:	429a      	cmp	r2, r3
 8003476:	d255      	bcs.n	8003524 <cliUpdate+0x330>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2222      	movs	r2, #34	; 0x22
 800347c:	5c99      	ldrb	r1, [r3, r2]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2221      	movs	r2, #33	; 0x21
 8003482:	5c9a      	ldrb	r2, [r3, r2]
 8003484:	2319      	movs	r3, #25
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	1a8a      	subs	r2, r1, r2
 800348a:	701a      	strb	r2, [r3, #0]
            for (int i=0; i<mov_len; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e013      	b.n	80034ba <cliUpdate+0x2c6>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2222      	movs	r2, #34	; 0x22
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	001a      	movs	r2, r3
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	1e5a      	subs	r2, r3, #1
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2122      	movs	r1, #34	; 0x22
 80034a4:	5c5b      	ldrb	r3, [r3, r1]
 80034a6:	0019      	movs	r1, r3
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1acb      	subs	r3, r1, r3
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	5c89      	ldrb	r1, [r1, r2]
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	3301      	adds	r3, #1
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	2319      	movs	r3, #25
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	429a      	cmp	r2, r3
 80034c4:	dbe5      	blt.n	8003492 <cliUpdate+0x29e>
            }
            line->buf[line->cursor] = rx_data;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2221      	movs	r2, #33	; 0x21
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	001a      	movs	r2, r3
 80034ce:	1cfb      	adds	r3, r7, #3
 80034d0:	7819      	ldrb	r1, [r3, #0]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	5499      	strb	r1, [r3, r2]
            line->count++;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2222      	movs	r2, #34	; 0x22
 80034da:	5c9b      	ldrb	r3, [r3, r2]
 80034dc:	3301      	adds	r3, #1
 80034de:	b2d9      	uxtb	r1, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2222      	movs	r2, #34	; 0x22
 80034e4:	5499      	strb	r1, [r3, r2]
            line->cursor++;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	2221      	movs	r2, #33	; 0x21
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	3301      	adds	r3, #1
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2221      	movs	r2, #33	; 0x21
 80034f4:	5499      	strb	r1, [r3, r2]
            line->buf[line->count] = 0;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2222      	movs	r2, #34	; 0x22
 80034fa:	5c9b      	ldrb	r3, [r3, r2]
 80034fc:	001a      	movs	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7818      	ldrb	r0, [r3, #0]
 8003508:	1cfb      	adds	r3, r7, #3
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	001a      	movs	r2, r3
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <cliUpdate+0x36c>)
 8003510:	0019      	movs	r1, r3
 8003512:	f001 f8c5 	bl	80046a0 <uartPrintf>
          }
        }
        break;
 8003516:	e005      	b.n	8003524 <cliUpdate+0x330>
    }
  }
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	e004      	b.n	8003526 <cliUpdate+0x332>
        break;
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	e002      	b.n	8003526 <cliUpdate+0x332>
        break;
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	e000      	b.n	8003526 <cliUpdate+0x332>
        break;
 8003524:	46c0      	nop			; (mov r8, r8)

  switch(p_cli->state)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7c1b      	ldrb	r3, [r3, #16]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d100      	bne.n	8003530 <cliUpdate+0x33c>
 800352e:	e0e8      	b.n	8003702 <cliUpdate+0x50e>
 8003530:	dd00      	ble.n	8003534 <cliUpdate+0x340>
 8003532:	e0eb      	b.n	800370c <cliUpdate+0x518>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d015      	beq.n	8003564 <cliUpdate+0x370>
 8003538:	dd00      	ble.n	800353c <cliUpdate+0x348>
 800353a:	e0e7      	b.n	800370c <cliUpdate+0x518>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <cliUpdate+0x352>
 8003540:	2b02      	cmp	r3, #2
 8003542:	d004      	beq.n	800354e <cliUpdate+0x35a>
 8003544:	e0e2      	b.n	800370c <cliUpdate+0x518>
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	741a      	strb	r2, [r3, #16]
      break;
 800354c:	e0de      	b.n	800370c <cliUpdate+0x518>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	741a      	strb	r2, [r3, #16]
      break;
 8003554:	e0da      	b.n	800370c <cliUpdate+0x518>
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	0800b5ac 	.word	0x0800b5ac
 800355c:	0800b5b4 	.word	0x0800b5b4
 8003560:	0800b5bc 	.word	0x0800b5bc

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800356a:	1cfb      	adds	r3, r7, #3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b44      	cmp	r3, #68	; 0x44
 8003570:	d11e      	bne.n	80035b0 <cliUpdate+0x3bc>
      {
        if (line->cursor > 0)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	2221      	movs	r2, #33	; 0x21
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d019      	beq.n	80035b0 <cliUpdate+0x3bc>
        {
          line->cursor--;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2221      	movs	r2, #33	; 0x21
 8003580:	5c9b      	ldrb	r3, [r3, r2]
 8003582:	3b01      	subs	r3, #1
 8003584:	b2d9      	uxtb	r1, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2221      	movs	r2, #33	; 0x21
 800358a:	5499      	strb	r1, [r3, r2]
          tx_buf[0] = 0x1B;
 800358c:	210c      	movs	r1, #12
 800358e:	187b      	adds	r3, r7, r1
 8003590:	221b      	movs	r2, #27
 8003592:	701a      	strb	r2, [r3, #0]
          tx_buf[1] = 0x5B;
 8003594:	187b      	adds	r3, r7, r1
 8003596:	225b      	movs	r2, #91	; 0x5b
 8003598:	705a      	strb	r2, [r3, #1]
          tx_buf[2] = rx_data;
 800359a:	1cfb      	adds	r3, r7, #3
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	709a      	strb	r2, [r3, #2]
          uartWrite(p_cli->ch, tx_buf, 3);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	1879      	adds	r1, r7, r1
 80035a8:	2203      	movs	r2, #3
 80035aa:	0018      	movs	r0, r3
 80035ac:	f001 f850 	bl	8004650 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80035b0:	1cfb      	adds	r3, r7, #3
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b43      	cmp	r3, #67	; 0x43
 80035b6:	d121      	bne.n	80035fc <cliUpdate+0x408>
      {
        if (line->cursor < line->buf_len)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2221      	movs	r2, #33	; 0x21
 80035bc:	5c9a      	ldrb	r2, [r3, r2]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2120      	movs	r1, #32
 80035c2:	5c5b      	ldrb	r3, [r3, r1]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <cliUpdate+0x3e4>
        {
          line->cursor++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2221      	movs	r2, #33	; 0x21
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	3301      	adds	r3, #1
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	5499      	strb	r1, [r3, r2]
        }
        tx_buf[0] = 0x1B;
 80035d8:	210c      	movs	r1, #12
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	221b      	movs	r2, #27
 80035de:	701a      	strb	r2, [r3, #0]
        tx_buf[1] = 0x5B;
 80035e0:	187b      	adds	r3, r7, r1
 80035e2:	225b      	movs	r2, #91	; 0x5b
 80035e4:	705a      	strb	r2, [r3, #1]
        tx_buf[2] = rx_data;
 80035e6:	1cfb      	adds	r3, r7, #3
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	709a      	strb	r2, [r3, #2]
        uartWrite(p_cli->ch, tx_buf, 3);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	1879      	adds	r1, r7, r1
 80035f4:	2203      	movs	r2, #3
 80035f6:	0018      	movs	r0, r3
 80035f8:	f001 f82a 	bl	8004650 <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 80035fc:	1cfb      	adds	r3, r7, #3
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b41      	cmp	r3, #65	; 0x41
 8003602:	d10f      	bne.n	8003624 <cliUpdate+0x430>
      {
        cliLineChange(p_cli, true);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2101      	movs	r1, #1
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f8ff 	bl	800380c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2189      	movs	r1, #137	; 0x89
 8003616:	0089      	lsls	r1, r1, #2
 8003618:	468c      	mov	ip, r1
 800361a:	4463      	add	r3, ip
 800361c:	0019      	movs	r1, r3
 800361e:	0010      	movs	r0, r2
 8003620:	f001 f83e 	bl	80046a0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8003624:	1cfb      	adds	r3, r7, #3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b42      	cmp	r3, #66	; 0x42
 800362a:	d10f      	bne.n	800364c <cliUpdate+0x458>
      {
        cliLineChange(p_cli, false);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2100      	movs	r1, #0
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f8eb 	bl	800380c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2189      	movs	r1, #137	; 0x89
 800363e:	0089      	lsls	r1, r1, #2
 8003640:	468c      	mov	ip, r1
 8003642:	4463      	add	r3, ip
 8003644:	0019      	movs	r1, r3
 8003646:	0010      	movs	r0, r2
 8003648:	f001 f82a 	bl	80046a0 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800364c:	1cfb      	adds	r3, r7, #3
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b31      	cmp	r3, #49	; 0x31
 8003652:	d110      	bne.n	8003676 <cliUpdate+0x482>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7818      	ldrb	r0, [r3, #0]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	5c9b      	ldrb	r3, [r3, r2]
 800365e:	001a      	movs	r2, r3
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <cliUpdate+0x530>)
 8003662:	0019      	movs	r1, r3
 8003664:	f001 f81c 	bl	80046a0 <uartPrintf>
        line->cursor = 0;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

        p_cli->state = CLI_RX_SP4;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2204      	movs	r2, #4
 8003674:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8003676:	1cfb      	adds	r3, r7, #3
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b34      	cmp	r3, #52	; 0x34
 800367c:	d145      	bne.n	800370a <cliUpdate+0x516>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2221      	movs	r2, #33	; 0x21
 8003682:	5c9a      	ldrb	r2, [r3, r2]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2122      	movs	r1, #34	; 0x22
 8003688:	5c5b      	ldrb	r3, [r3, r1]
 800368a:	429a      	cmp	r2, r3
 800368c:	d213      	bcs.n	80036b6 <cliUpdate+0x4c2>
        {
          mov_len = line->count - line->cursor;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2222      	movs	r2, #34	; 0x22
 8003692:	5c9b      	ldrb	r3, [r3, r2]
 8003694:	b299      	uxth	r1, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2221      	movs	r2, #33	; 0x21
 800369a:	5c9b      	ldrb	r3, [r3, r2]
 800369c:	b29a      	uxth	r2, r3
 800369e:	2416      	movs	r4, #22
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	1a8a      	subs	r2, r1, r2
 80036a4:	801a      	strh	r2, [r3, #0]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7818      	ldrb	r0, [r3, #0]
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <cliUpdate+0x534>)
 80036b0:	0019      	movs	r1, r3
 80036b2:	f000 fff5 	bl	80046a0 <uartPrintf>
        }
        if (line->cursor > line->count)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	2221      	movs	r2, #33	; 0x21
 80036ba:	5c9a      	ldrb	r2, [r3, r2]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2122      	movs	r1, #34	; 0x22
 80036c0:	5c5b      	ldrb	r3, [r3, r1]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d913      	bls.n	80036ee <cliUpdate+0x4fa>
        {
          mov_len = line->cursor - line->count;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2221      	movs	r2, #33	; 0x21
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b299      	uxth	r1, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2222      	movs	r2, #34	; 0x22
 80036d2:	5c9b      	ldrb	r3, [r3, r2]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	2416      	movs	r4, #22
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	1a8a      	subs	r2, r1, r2
 80036dc:	801a      	strh	r2, [r3, #0]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7818      	ldrb	r0, [r3, #0]
 80036e2:	193b      	adds	r3, r7, r4
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <cliUpdate+0x530>)
 80036e8:	0019      	movs	r1, r3
 80036ea:	f000 ffd9 	bl	80046a0 <uartPrintf>
        }
        line->cursor = line->count;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	2222      	movs	r2, #34	; 0x22
 80036f2:	5c99      	ldrb	r1, [r3, r2]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2221      	movs	r2, #33	; 0x21
 80036f8:	5499      	strb	r1, [r3, r2]
        p_cli->state = CLI_RX_SP4;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2204      	movs	r2, #4
 80036fe:	741a      	strb	r2, [r3, #16]
      }
      break;
 8003700:	e003      	b.n	800370a <cliUpdate+0x516>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	741a      	strb	r2, [r3, #16]
      break;
 8003708:	e000      	b.n	800370c <cliUpdate+0x518>
      break;
 800370a:	46c0      	nop			; (mov r8, r8)
  }



  cliShowLog(p_cli);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff fc88 	bl	8003024 <cliShowLog>

  return ret;
 8003714:	2323      	movs	r3, #35	; 0x23
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	781b      	ldrb	r3, [r3, #0]
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b00d      	add	sp, #52	; 0x34
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	0800b5c8 	.word	0x0800b5c8
 8003728:	0800b5d0 	.word	0x0800b5d0

0800372c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <cliLineClean+0x34>)
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]
  p_cli->line.cursor  = 0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <cliLineClean+0x38>)
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	2391      	movs	r3, #145	; 0x91
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	211f      	movs	r1, #31
 800374c:	54d1      	strb	r1, [r2, r3]
  p_cli->line.buf[0]  = 0;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	2389      	movs	r3, #137	; 0x89
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	2100      	movs	r1, #0
 8003756:	54d1      	strb	r1, [r2, r3]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}
 8003760:	00000246 	.word	0x00000246
 8003764:	00000245 	.word	0x00000245

08003768 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	23cb      	movs	r3, #203	; 0xcb
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	001a      	movs	r2, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	23cc      	movs	r3, #204	; 0xcc
 800377e:	0059      	lsls	r1, r3, #1
 8003780:	0013      	movs	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	189b      	adds	r3, r3, r2
 8003786:	00da      	lsls	r2, r3, #3
 8003788:	1ad2      	subs	r2, r2, r3
 800378a:	1883      	adds	r3, r0, r2
 800378c:	1859      	adds	r1, r3, r1
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	2389      	movs	r3, #137	; 0x89
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	0008      	movs	r0, r1
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	2223      	movs	r2, #35	; 0x23
 800379a:	0019      	movs	r1, r3
 800379c:	f004 fb90 	bl	8007ec0 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	2398      	movs	r3, #152	; 0x98
 80037a4:	33ff      	adds	r3, #255	; 0xff
 80037a6:	5cd3      	ldrb	r3, [r2, r3]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d809      	bhi.n	80037c0 <cliLineAdd+0x58>
  {
    p_cli->hist_line_count++;
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	2398      	movs	r3, #152	; 0x98
 80037b0:	33ff      	adds	r3, #255	; 0xff
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	3301      	adds	r3, #1
 80037b6:	b2d9      	uxtb	r1, r3
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	2398      	movs	r3, #152	; 0x98
 80037bc:	33ff      	adds	r3, #255	; 0xff
 80037be:	54d1      	strb	r1, [r2, r3]
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	23cb      	movs	r3, #203	; 0xcb
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	5cd3      	ldrb	r3, [r2, r3]
 80037c8:	b259      	sxtb	r1, r3
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	2396      	movs	r3, #150	; 0x96
 80037ce:	33ff      	adds	r3, #255	; 0xff
 80037d0:	54d1      	strb	r1, [r2, r3]
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	23cb      	movs	r3, #203	; 0xcb
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	3301      	adds	r3, #1
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <cliLineAdd+0xa0>)
 80037de:	4013      	ands	r3, r2
 80037e0:	d504      	bpl.n	80037ec <cliLineAdd+0x84>
 80037e2:	3b01      	subs	r3, #1
 80037e4:	2204      	movs	r2, #4
 80037e6:	4252      	negs	r2, r2
 80037e8:	4313      	orrs	r3, r2
 80037ea:	3301      	adds	r3, #1
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	23cb      	movs	r3, #203	; 0xcb
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	54d1      	strb	r1, [r2, r3]
  p_cli->hist_line_new  = true;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	23ca      	movs	r3, #202	; 0xca
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2101      	movs	r1, #1
 80037fe:	54d1      	strb	r1, [r2, r3]
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	80000003 	.word	0x80000003

0800380c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800380c:	b5b0      	push	{r4, r5, r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	000a      	movs	r2, r1
 8003816:	1cfb      	adds	r3, r7, #3
 8003818:	701a      	strb	r2, [r3, #0]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	2398      	movs	r3, #152	; 0x98
 800381e:	33ff      	adds	r3, #255	; 0xff
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <cliLineChange+0x1c>
 8003826:	e08c      	b.n	8003942 <cliLineChange+0x136>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a48      	ldr	r2, [pc, #288]	; (800394c <cliLineChange+0x140>)
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <cliLineChange+0x3a>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7818      	ldrb	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a44      	ldr	r2, [pc, #272]	; (800394c <cliLineChange+0x140>)
 800383a:	5c9b      	ldrb	r3, [r3, r2]
 800383c:	001a      	movs	r2, r3
 800383e:	4b44      	ldr	r3, [pc, #272]	; (8003950 <cliLineChange+0x144>)
 8003840:	0019      	movs	r1, r3
 8003842:	f000 ff2d 	bl	80046a0 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a42      	ldr	r2, [pc, #264]	; (8003954 <cliLineChange+0x148>)
 800384a:	5c9b      	ldrb	r3, [r3, r2]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <cliLineChange+0x58>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7818      	ldrb	r0, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <cliLineChange+0x148>)
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	001a      	movs	r2, r3
 800385c:	4b3e      	ldr	r3, [pc, #248]	; (8003958 <cliLineChange+0x14c>)
 800385e:	0019      	movs	r1, r3
 8003860:	f000 ff1e 	bl	80046a0 <uartPrintf>
  }


  if (key_up == true)
 8003864:	1cfb      	adds	r3, r7, #3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b25b      	sxtb	r3, r3
 800386a:	2b01      	cmp	r3, #1
 800386c:	d12e      	bne.n	80038cc <cliLineChange+0xc0>
  {
    if (p_cli->hist_line_new == true)
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	23ca      	movs	r3, #202	; 0xca
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <cliLineChange+0x80>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	23cb      	movs	r3, #203	; 0xcb
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	b259      	sxtb	r1, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	2396      	movs	r3, #150	; 0x96
 8003888:	33ff      	adds	r3, #255	; 0xff
 800388a:	54d1      	strb	r1, [r2, r3]
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	2396      	movs	r3, #150	; 0x96
 8003890:	33ff      	adds	r3, #255	; 0xff
 8003892:	56d3      	ldrsb	r3, [r2, r3]
 8003894:	0019      	movs	r1, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	2398      	movs	r3, #152	; 0x98
 800389a:	33ff      	adds	r3, #255	; 0xff
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	18cb      	adds	r3, r1, r3
 80038a0:	1e58      	subs	r0, r3, #1
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	2398      	movs	r3, #152	; 0x98
 80038a6:	33ff      	adds	r3, #255	; 0xff
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	0019      	movs	r1, r3
 80038ac:	f7fc fdc2 	bl	8000434 <__aeabi_idivmod>
 80038b0:	000b      	movs	r3, r1
 80038b2:	b259      	sxtb	r1, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2396      	movs	r3, #150	; 0x96
 80038b8:	33ff      	adds	r3, #255	; 0xff
 80038ba:	54d1      	strb	r1, [r2, r3]
    change_i = p_cli->hist_line_i;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	2396      	movs	r3, #150	; 0x96
 80038c0:	33ff      	adds	r3, #255	; 0xff
 80038c2:	56d2      	ldrsb	r2, [r2, r3]
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e018      	b.n	80038fe <cliLineChange+0xf2>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	2396      	movs	r3, #150	; 0x96
 80038d0:	33ff      	adds	r3, #255	; 0xff
 80038d2:	56d3      	ldrsb	r3, [r2, r3]
 80038d4:	1c58      	adds	r0, r3, #1
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	2398      	movs	r3, #152	; 0x98
 80038da:	33ff      	adds	r3, #255	; 0xff
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	0019      	movs	r1, r3
 80038e0:	f7fc fda8 	bl	8000434 <__aeabi_idivmod>
 80038e4:	000b      	movs	r3, r1
 80038e6:	b259      	sxtb	r1, r3
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	2396      	movs	r3, #150	; 0x96
 80038ec:	33ff      	adds	r3, #255	; 0xff
 80038ee:	54d1      	strb	r1, [r2, r3]
    change_i = p_cli->hist_line_i;
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	2396      	movs	r3, #150	; 0x96
 80038f4:	33ff      	adds	r3, #255	; 0xff
 80038f6:	56d2      	ldrsb	r2, [r2, r3]
 80038f8:	230f      	movs	r3, #15
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	701a      	strb	r2, [r3, #0]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	2389      	movs	r3, #137	; 0x89
 8003908:	0099      	lsls	r1, r3, #2
 800390a:	687d      	ldr	r5, [r7, #4]
 800390c:	23cc      	movs	r3, #204	; 0xcc
 800390e:	005c      	lsls	r4, r3, #1
 8003910:	0013      	movs	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	189b      	adds	r3, r3, r2
 8003916:	00da      	lsls	r2, r3, #3
 8003918:	1ad2      	subs	r2, r2, r3
 800391a:	18ab      	adds	r3, r5, r2
 800391c:	191a      	adds	r2, r3, r4
 800391e:	1843      	adds	r3, r0, r1
 8003920:	0011      	movs	r1, r2
 8003922:	2223      	movs	r2, #35	; 0x23
 8003924:	0018      	movs	r0, r3
 8003926:	f004 facb 	bl	8007ec0 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a09      	ldr	r2, [pc, #36]	; (8003954 <cliLineChange+0x148>)
 800392e:	5c99      	ldrb	r1, [r3, r2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a06      	ldr	r2, [pc, #24]	; (800394c <cliLineChange+0x140>)
 8003934:	5499      	strb	r1, [r3, r2]

  p_cli->hist_line_new = false;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	23ca      	movs	r3, #202	; 0xca
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2100      	movs	r1, #0
 800393e:	54d1      	strb	r1, [r2, r3]
 8003940:	e000      	b.n	8003944 <cliLineChange+0x138>
    return;
 8003942:	46c0      	nop			; (mov r8, r8)
}
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bdb0      	pop	{r4, r5, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	00000245 	.word	0x00000245
 8003950:	0800b5c8 	.word	0x0800b5c8
 8003954:	00000246 	.word	0x00000246
 8003958:	0800b5d8 	.word	0x0800b5d8

0800395c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003964:	230b      	movs	r3, #11
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]


  if (cliParseArgs(p_cli) == true)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f85e 	bl	8003a30 <cliParseArgs>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d052      	beq.n	8003a1e <cliRunCmd+0xc2>
  {
    cliPrintf("\r\n");
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <cliRunCmd+0xd0>)
 800397a:	0018      	movs	r0, r3
 800397c:	f000 f8b6 	bl	8003aec <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	238a      	movs	r3, #138	; 0x8a
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	58d3      	ldr	r3, [r2, r3]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 f8d5 	bl	8003b38 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e03c      	b.n	8003a0e <cliRunCmd+0xb2>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	238a      	movs	r3, #138	; 0x8a
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	58d0      	ldr	r0, [r2, r3]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	0013      	movs	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	2292      	movs	r2, #146	; 0x92
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4694      	mov	ip, r2
 80039ac:	4463      	add	r3, ip
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	3304      	adds	r3, #4
 80039b4:	0019      	movs	r1, r3
 80039b6:	f7fc fba7 	bl	8000108 <strcmp>
 80039ba:	1e03      	subs	r3, r0, #0
 80039bc:	d124      	bne.n	8003a08 <cliRunCmd+0xac>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	2389      	movs	r3, #137	; 0x89
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	5ad3      	ldrh	r3, [r2, r3]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b299      	uxth	r1, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	23e3      	movs	r3, #227	; 0xe3
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	52d1      	strh	r1, [r2, r3]
        p_cli->cmd_args.argv = &p_cli->argv[1];
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3319      	adds	r3, #25
 80039d6:	33ff      	adds	r3, #255	; 0xff
 80039d8:	0019      	movs	r1, r3
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	23e4      	movs	r3, #228	; 0xe4
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	50d1      	str	r1, [r2, r3]
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	2397      	movs	r3, #151	; 0x97
 80039e8:	0099      	lsls	r1, r3, #2
 80039ea:	0013      	movs	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	18c3      	adds	r3, r0, r3
 80039f4:	185b      	adds	r3, r3, r1
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	21e3      	movs	r1, #227	; 0xe3
 80039fc:	0089      	lsls	r1, r1, #2
 80039fe:	468c      	mov	ip, r1
 8003a00:	4463      	add	r3, ip
 8003a02:	0018      	movs	r0, r3
 8003a04:	4790      	blx	r2
        break;
 8003a06:	e00a      	b.n	8003a1e <cliRunCmd+0xc2>
    for (int i=0; i<p_cli->cmd_count; i++)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	2392      	movs	r3, #146	; 0x92
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	5ad3      	ldrh	r3, [r2, r3]
 8003a16:	001a      	movs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	dbba      	blt.n	8003994 <cliRunCmd+0x38>
      }
    }
  }

  return ret;
 8003a1e:	230b      	movs	r3, #11
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	781b      	ldrb	r3, [r3, #0]
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	0800b5e0 	.word	0x0800b5e0

08003a30 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003a38:	231f      	movs	r3, #31
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8003a40:	2016      	movs	r0, #22
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	2200      	movs	r2, #0
 8003a46:	801a      	strh	r2, [r3, #0]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	2389      	movs	r3, #137	; 0x89
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2100      	movs	r1, #0
 8003a50:	52d1      	strh	r1, [r2, r3]

  cmdline = (char *)p_cli->line.buf;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2289      	movs	r2, #137	; 0x89
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4694      	mov	ip, r2
 8003a5a:	4463      	add	r3, ip
 8003a5c:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3315      	adds	r3, #21
 8003a62:	33ff      	adds	r3, #255	; 0xff
 8003a64:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	18d3      	adds	r3, r2, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <cliParseArgs+0xb8>)
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	2308      	movs	r3, #8
 8003a7a:	18fa      	adds	r2, r7, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f005 f965 	bl	8008d4e <strtok_r>
 8003a84:	0003      	movs	r3, r0
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e014      	b.n	8003ab4 <cliParseArgs+0x84>
  {
    argv[argc++] = tok;
 8003a8a:	2216      	movs	r2, #22
 8003a8c:	18bb      	adds	r3, r7, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	18ba      	adds	r2, r7, r2
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	8011      	strh	r1, [r2, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	18d3      	adds	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <cliParseArgs+0xb8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	18ba      	adds	r2, r7, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f005 f94f 	bl	8008d4e <strtok_r>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e7      	bne.n	8003a8a <cliParseArgs+0x5a>
  }

  p_cli->argc = argc;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	2016      	movs	r0, #22
 8003abe:	1839      	adds	r1, r7, r0
 8003ac0:	2389      	movs	r3, #137	; 0x89
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	8809      	ldrh	r1, [r1, #0]
 8003ac6:	52d1      	strh	r1, [r2, r3]

  if (argc > 0)
 8003ac8:	183b      	adds	r3, r7, r0
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <cliParseArgs+0xa8>
  {
    ret = true;
 8003ad0:	231f      	movs	r3, #31
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003ad8:	231f      	movs	r3, #31
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	781b      	ldrb	r3, [r3, #0]
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b008      	add	sp, #32
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20000078 	.word	0x20000078

08003aec <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8003aec:	b40f      	push	{r0, r1, r2, r3}
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8003af4:	231c      	movs	r3, #28
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <cliPrintf+0x48>)
 8003afc:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3311      	adds	r3, #17
 8003b02:	0018      	movs	r0, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	0049      	lsls	r1, r1, #1
 8003b0c:	f005 f9e6 	bl	8008edc <vsniprintf>
 8003b10:	0003      	movs	r3, r0
 8003b12:	60bb      	str	r3, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	7818      	ldrb	r0, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3311      	adds	r3, #17
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f000 fd96 	bl	8004650 <uartWrite>
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	bc08      	pop	{r3}
 8003b2e:	b004      	add	sp, #16
 8003b30:	4718      	bx	r3
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	2000030c 	.word	0x2000030c

08003b38 <cliToUpper>:

void cliToUpper(char *str)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003b40:	230e      	movs	r3, #14
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	2200      	movs	r2, #0
 8003b46:	801a      	strh	r2, [r3, #0]
 8003b48:	e028      	b.n	8003b9c <cliToUpper+0x64>
  {
    str_ch = str[i];
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	18d2      	adds	r2, r2, r3
 8003b54:	210d      	movs	r1, #13
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	701a      	strb	r2, [r3, #0]

    if (str_ch == 0)
 8003b5c:	000a      	movs	r2, r1
 8003b5e:	18bb      	adds	r3, r7, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <cliToUpper+0x70>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8003b66:	18bb      	adds	r3, r7, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b60      	cmp	r3, #96	; 0x60
 8003b6c:	d908      	bls.n	8003b80 <cliToUpper+0x48>
 8003b6e:	18bb      	adds	r3, r7, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b7a      	cmp	r3, #122	; 0x7a
 8003b74:	d804      	bhi.n	8003b80 <cliToUpper+0x48>
    {
      str_ch = str_ch - 'a' + 'A';
 8003b76:	18bb      	adds	r3, r7, r2
 8003b78:	18ba      	adds	r2, r7, r2
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	3a20      	subs	r2, #32
 8003b7e:	701a      	strb	r2, [r3, #0]
    }
    str[i] = str_ch;
 8003b80:	210e      	movs	r1, #14
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	220d      	movs	r2, #13
 8003b8c:	18ba      	adds	r2, r7, r2
 8003b8e:	7812      	ldrb	r2, [r2, #0]
 8003b90:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	3201      	adds	r2, #1
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	230e      	movs	r3, #14
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d9d1      	bls.n	8003b4a <cliToUpper+0x12>
 8003ba6:	e000      	b.n	8003baa <cliToUpper+0x72>
      break;
 8003ba8:	46c0      	nop			; (mov r8, r8)
  }

  if (i == CLI_CMD_NAME_MAX)
 8003baa:	220e      	movs	r2, #14
 8003bac:	18bb      	adds	r3, r7, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d106      	bne.n	8003bc2 <cliToUpper+0x8a>
  {
    str[i-1] = 0;
 8003bb4:	18bb      	adds	r3, r7, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	18d3      	adds	r3, r2, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
  }
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	701a      	strb	r2, [r3, #0]
  int32_t ret = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <cliArgsGetData+0x54>)
 8003bde:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	23e3      	movs	r3, #227	; 0xe3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	5acb      	ldrh	r3, [r1, r3]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d301      	bcc.n	8003bf6 <cliArgsGetData+0x2a>
  {
    return 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e010      	b.n	8003c18 <cliArgsGetData+0x4c>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	23e4      	movs	r3, #228	; 0xe4
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	58d2      	ldr	r2, [r2, r3]
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f005 f92d 	bl	8008e6c <strtoul>
 8003c12:	0003      	movs	r3, r0
 8003c14:	60fb      	str	r3, [r7, #12]

  return ret;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b004      	add	sp, #16
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	2000030c 	.word	0x2000030c

08003c24 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	1dfb      	adds	r3, r7, #7
 8003c2e:	701a      	strb	r2, [r3, #0]
  float ret = 0.0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <cliArgsGetFloat+0x54>)
 8003c36:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	23e3      	movs	r3, #227	; 0xe3
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	5acb      	ldrh	r3, [r1, r3]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d301      	bcc.n	8003c4e <cliArgsGetFloat+0x2a>
  {
    return 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e00f      	b.n	8003c6e <cliArgsGetFloat+0x4a>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	23e4      	movs	r3, #228	; 0xe4
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	58d2      	ldr	r2, [r2, r3]
 8003c56:	1dfb      	adds	r3, r7, #7
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2100      	movs	r1, #0
 8003c62:	0018      	movs	r0, r3
 8003c64:	f004 ffee 	bl	8008c44 <strtof>
 8003c68:	1c03      	adds	r3, r0, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  return ret;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
}
 8003c6e:	1c18      	adds	r0, r3, #0
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	2000030c 	.word	0x2000030c

08003c7c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	0002      	movs	r2, r0
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	701a      	strb	r2, [r3, #0]
  char *ret = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <cliArgsGetStr+0x48>)
 8003c8e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	23e3      	movs	r3, #227	; 0xe3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	5acb      	ldrh	r3, [r1, r3]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d301      	bcc.n	8003ca6 <cliArgsGetStr+0x2a>
  {
    return 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e00a      	b.n	8003cbc <cliArgsGetStr+0x40>
  }

  ret = p_cli->cmd_args.argv[index];
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	23e4      	movs	r3, #228	; 0xe4
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	58d2      	ldr	r2, [r2, r3]
 8003cae:	1dfb      	adds	r3, r7, #7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	18d3      	adds	r3, r2, r3
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]

  return ret;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000030c 	.word	0x2000030c

08003cc8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	0002      	movs	r2, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
  cli_t *p_cli = &cli_node;
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <cliArgsIsStr+0x68>)
 8003ce0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	23e3      	movs	r3, #227	; 0xe3
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	5acb      	ldrh	r3, [r1, r3]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d301      	bcc.n	8003cf8 <cliArgsIsStr+0x30>
  {
    return 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e016      	b.n	8003d26 <cliArgsIsStr+0x5e>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	23e4      	movs	r3, #228	; 0xe4
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	58d2      	ldr	r2, [r2, r3]
 8003d00:	1dfb      	adds	r3, r7, #7
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7fc f9fa 	bl	8000108 <strcmp>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d103      	bne.n	8003d20 <cliArgsIsStr+0x58>
  {
    ret = true;
 8003d18:	230f      	movs	r3, #15
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003d20:	230f      	movs	r3, #15
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	781b      	ldrb	r3, [r3, #0]
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b004      	add	sp, #16
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	2000030c 	.word	0x2000030c

08003d34 <cliAdd>:
    return false;
  }
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8003d3e:	2317      	movs	r3, #23
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
  cli_t *p_cli = &cli_node;
 8003d46:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <cliAdd+0xb4>)
 8003d48:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	2392      	movs	r3, #146	; 0x92
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	5ad3      	ldrh	r3, [r2, r3]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d901      	bls.n	8003d5a <cliAdd+0x26>
  {
    return false;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e042      	b.n	8003de0 <cliAdd+0xac>
  }

  index = p_cli->cmd_count;
 8003d5a:	240e      	movs	r4, #14
 8003d5c:	193b      	adds	r3, r7, r4
 8003d5e:	6939      	ldr	r1, [r7, #16]
 8003d60:	2292      	movs	r2, #146	; 0x92
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	5a8a      	ldrh	r2, [r1, r2]
 8003d66:	801a      	strh	r2, [r3, #0]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	0013      	movs	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	2292      	movs	r2, #146	; 0x92
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4694      	mov	ip, r2
 8003d7a:	4463      	add	r3, ip
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	18d3      	adds	r3, r2, r3
 8003d80:	3304      	adds	r3, #4
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f004 f928 	bl	8007fdc <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	881a      	ldrh	r2, [r3, #0]
 8003d90:	6938      	ldr	r0, [r7, #16]
 8003d92:	2397      	movs	r3, #151	; 0x97
 8003d94:	0099      	lsls	r1, r3, #2
 8003d96:	0013      	movs	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	18c3      	adds	r3, r0, r3
 8003da0:	185b      	adds	r3, r3, r1
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	0013      	movs	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	189b      	adds	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	2292      	movs	r2, #146	; 0x92
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4694      	mov	ip, r2
 8003db8:	4463      	add	r3, ip
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f7ff feb9 	bl	8003b38 <cliToUpper>

  p_cli->cmd_count++;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	2392      	movs	r3, #146	; 0x92
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	5ad3      	ldrh	r3, [r2, r3]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	b299      	uxth	r1, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	2392      	movs	r3, #146	; 0x92
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	52d1      	strh	r1, [r2, r3]

  return ret;
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b007      	add	sp, #28
 8003de6:	bd90      	pop	{r4, r7, pc}
 8003de8:	2000030c 	.word	0x2000030c

08003dec <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <cliShowList+0x70>)
 8003df6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <cliShowList+0x74>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fe76 	bl	8003aec <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <cliShowList+0x78>)
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7ff fe72 	bl	8003aec <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e015      	b.n	8003e3a <cliShowList+0x4e>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	0013      	movs	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	2292      	movs	r2, #146	; 0x92
 8003e1a:	0092      	lsls	r2, r2, #2
 8003e1c:	4694      	mov	ip, r2
 8003e1e:	4463      	add	r3, ip
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	3304      	adds	r3, #4
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff fe60 	bl	8003aec <cliPrintf>
    cliPrintf("\r\n");
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <cliShowList+0x74>)
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fe5c 	bl	8003aec <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	2392      	movs	r3, #146	; 0x92
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	5ad3      	ldrh	r3, [r2, r3]
 8003e42:	001a      	movs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4293      	cmp	r3, r2
 8003e48:	dbe1      	blt.n	8003e0e <cliShowList+0x22>
  }

  cliPrintf("-----------------------------\r\n");
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <cliShowList+0x7c>)
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7ff fe4d 	bl	8003aec <cliPrintf>
}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	2000030c 	.word	0x2000030c
 8003e60:	0800b5e0 	.word	0x0800b5e0
 8003e64:	0800b5e4 	.word	0x0800b5e4
 8003e68:	0800b604 	.word	0x0800b604

08003e6c <cliExit>:

void cliExit(cli_args_t *args)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  cliExit_Flag = false;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <cliExit+0x18>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	20000074 	.word	0x20000074

08003e88 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	; 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8003e90:	2310      	movs	r3, #16
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <cliMemoryDump+0x2a>
  {
    cliPrintf(">> md addr [size] \n");
 8003ea8:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <cliMemoryDump+0x140>)
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f7ff fe1e 	bl	8003aec <cliPrintf>
 8003eb0:	e086      	b.n	8003fc0 <cliMemoryDump+0x138>
    return;
  }

  if(argc > 1)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	dd09      	ble.n	8003ecc <cliMemoryDump+0x44>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f004 ffd2 	bl	8008e6c <strtoul>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f004 ffc9 	bl	8008e6c <strtoul>
 8003eda:	0003      	movs	r3, r0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8003ee2:	4b3a      	ldr	r3, [pc, #232]	; (8003fcc <cliMemoryDump+0x144>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fe01 	bl	8003aec <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eee:	e063      	b.n	8003fb8 <cliMemoryDump+0x130>
  {
    if((idx%4) == 0)
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d105      	bne.n	8003f04 <cliMemoryDump+0x7c>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <cliMemoryDump+0x148>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fdf4 	bl	8003aec <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <cliMemoryDump+0x14c>)
 8003f0a:	0011      	movs	r1, r2
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fded 	bl	8003aec <cliPrintf>

    if ((idx%4) == 3)
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <cliMemoryDump+0x150>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	d504      	bpl.n	8003f24 <cliMemoryDump+0x9c>
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	4252      	negs	r2, r2
 8003f20:	4313      	orrs	r3, r2
 8003f22:	3301      	adds	r3, #1
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d141      	bne.n	8003fac <cliMemoryDump+0x124>
    {
      cliPrintf ("  |");
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <cliMemoryDump+0x154>)
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fdde 	bl	8003aec <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
 8003f34:	e033      	b.n	8003f9e <cliMemoryDump+0x116>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8003f36:	230c      	movs	r3, #12
 8003f38:	18fa      	adds	r2, r7, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2304      	movs	r3, #4
 8003f42:	001a      	movs	r2, r3
 8003f44:	f003 ffbc 	bl	8007ec0 <memcpy>
        for (i=0;i<4;i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e01e      	b.n	8003f8c <cliMemoryDump+0x104>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8003f4e:	210c      	movs	r1, #12
 8003f50:	187a      	adds	r2, r7, r1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	18d3      	adds	r3, r2, r3
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b1f      	cmp	r3, #31
 8003f5a:	d910      	bls.n	8003f7e <cliMemoryDump+0xf6>
 8003f5c:	187a      	adds	r2, r7, r1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	18d3      	adds	r3, r2, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b7e      	cmp	r3, #126	; 0x7e
 8003f66:	d80a      	bhi.n	8003f7e <cliMemoryDump+0xf6>
          {
            cliPrintf("%c", asc[i]);
 8003f68:	187a      	adds	r2, r7, r1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	001a      	movs	r2, r3
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <cliMemoryDump+0x158>)
 8003f74:	0011      	movs	r1, r2
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff fdb8 	bl	8003aec <cliPrintf>
 8003f7c:	e003      	b.n	8003f86 <cliMemoryDump+0xfe>
          }
          else
          {
            cliPrintf(".");
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <cliMemoryDump+0x15c>)
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff fdb3 	bl	8003aec <cliPrintf>
        for (i=0;i<4;i++)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	dddd      	ble.n	8003f4e <cliMemoryDump+0xc6>
          }
        }
        ascptr+=1;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	3304      	adds	r3, #4
 8003f96:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	ddc8      	ble.n	8003f36 <cliMemoryDump+0xae>
      }
      cliPrintf("|\n   ");
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <cliMemoryDump+0x160>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fda0 	bl	8003aec <cliPrintf>
    }
    addr++;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	3304      	adds	r3, #4
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	db97      	blt.n	8003ef0 <cliMemoryDump+0x68>
  }
}
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b00c      	add	sp, #48	; 0x30
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	0800b624 	.word	0x0800b624
 8003fcc:	0800b638 	.word	0x0800b638
 8003fd0:	0800b640 	.word	0x0800b640
 8003fd4:	0800b64c 	.word	0x0800b64c
 8003fd8:	80000003 	.word	0x80000003
 8003fdc:	0800b654 	.word	0x0800b654
 8003fe0:	0800b658 	.word	0x0800b658
 8003fe4:	0800b65c 	.word	0x0800b65c
 8003fe8:	0800b660 	.word	0x0800b660

08003fec <flashInit>:

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);


bool flashInit(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  for (int i=0; i<FLASH_MAX_PAGE; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	e015      	b.n	8004024 <flashInit+0x38>
  {
    flash_tbl[i].addr = 0x8000000 +i*1024;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	0292      	lsls	r2, r2, #10
 8003ffe:	4694      	mov	ip, r2
 8004000:	4463      	add	r3, ip
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	0019      	movs	r1, r3
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <flashInit+0x48>)
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	00d2      	lsls	r2, r2, #3
 800400c:	50d1      	str	r1, [r2, r3]
    flash_tbl[i].length = 1024;
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <flashInit+0x48>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	18d3      	adds	r3, r2, r3
 8004016:	3304      	adds	r3, #4
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	00d2      	lsls	r2, r2, #3
 800401c:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<FLASH_MAX_PAGE; i++)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3301      	adds	r3, #1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b3f      	cmp	r3, #63	; 0x3f
 8004028:	dde6      	ble.n	8003ff8 <flashInit+0xc>
  }

  return true;
 800402a:	2301      	movs	r3, #1
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b002      	add	sp, #8
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200006b0 	.word	0x200006b0

08004038 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8004042:	2327      	movs	r3, #39	; 0x27
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t start_sector_num = -1;
 800404a:	2324      	movs	r3, #36	; 0x24
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	2201      	movs	r2, #1
 8004050:	4252      	negs	r2, r2
 8004052:	801a      	strh	r2, [r3, #0]
  uint32_t sector_count = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	623b      	str	r3, [r7, #32]


  for (int i=0; i<FLASH_MAX_PAGE; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	e017      	b.n	800408e <flashErase+0x56>
  {
    if (flashInSector(i, addr, length) == true)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	b29b      	uxth	r3, r3
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f8c4 	bl	80041f4 <flashInSector>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d00b      	beq.n	8004088 <flashErase+0x50>
    {
      if (start_sector_num < 0)
 8004070:	2224      	movs	r2, #36	; 0x24
 8004072:	18bb      	adds	r3, r7, r2
 8004074:	2100      	movs	r1, #0
 8004076:	5e5b      	ldrsh	r3, [r3, r1]
 8004078:	2b00      	cmp	r3, #0
 800407a:	da02      	bge.n	8004082 <flashErase+0x4a>
      {
        start_sector_num = i;
 800407c:	18bb      	adds	r3, r7, r2
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	801a      	strh	r2, [r3, #0]
      }
      sector_count++;
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	3301      	adds	r3, #1
 8004086:	623b      	str	r3, [r7, #32]
  for (int i=0; i<FLASH_MAX_PAGE; i++)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	3301      	adds	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b3f      	cmp	r3, #63	; 0x3f
 8004092:	dde4      	ble.n	800405e <flashErase+0x26>
    }
  }

  if (sector_count > 0)
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d026      	beq.n	80040e8 <flashErase+0xb0>
  {
    HAL_FLASH_Unlock();
 800409a:	f001 fba1 	bl	80057e0 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_PAGES;
 800409e:	210c      	movs	r1, #12
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    init.PageAddress = flash_tbl[start_sector_num].addr;
 80040a6:	2324      	movs	r3, #36	; 0x24
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2200      	movs	r2, #0
 80040ac:	5e9a      	ldrsh	r2, [r3, r2]
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <flashErase+0xc0>)
 80040b0:	00d2      	lsls	r2, r2, #3
 80040b2:	58d2      	ldr	r2, [r2, r3]
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	605a      	str	r2, [r3, #4]
    init.NbPages     = sector_count;
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	609a      	str	r2, [r3, #8]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80040be:	251b      	movs	r5, #27
 80040c0:	197c      	adds	r4, r7, r5
 80040c2:	2308      	movs	r3, #8
 80040c4:	18fa      	adds	r2, r7, r3
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	0011      	movs	r1, r2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f001 fc48 	bl	8005960 <HAL_FLASHEx_Erase>
 80040d0:	0003      	movs	r3, r0
 80040d2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80040d4:	197b      	adds	r3, r7, r5
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <flashErase+0xac>
    {
      ret = true;
 80040dc:	2327      	movs	r3, #39	; 0x27
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
    }

    HAL_FLASH_Lock();
 80040e4:	f001 fba2 	bl	800582c <HAL_FLASH_Lock>
  }


  return ret;
 80040e8:	2327      	movs	r3, #39	; 0x27
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b00a      	add	sp, #40	; 0x28
 80040f4:	bdb0      	pop	{r4, r5, r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	200006b0 	.word	0x200006b0

080040fc <flashWrite>:



bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8004108:	231f      	movs	r3, #31
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	2201      	movs	r2, #1
 800410e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status;

  if (addr %2 != 0)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	4013      	ands	r3, r2
 8004116:	d001      	beq.n	800411c <flashWrite+0x20>
  {
    return false;
 8004118:	2300      	movs	r3, #0
 800411a:	e042      	b.n	80041a2 <flashWrite+0xa6>
  }

  HAL_FLASH_Unlock();
 800411c:	f001 fb60 	bl	80057e0 <HAL_FLASH_Unlock>

  /*FLASH_TYPEPROGRAM_HALFWORD :!<Program a half-word (16-bit) at a specified address.*/
  for (int i=0; i<length; i+=2)
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e034      	b.n	8004190 <flashWrite+0x94>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	18d3      	adds	r3, r2, r3
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	2116      	movs	r1, #22
 8004130:	187b      	adds	r3, r7, r1
 8004132:	801a      	strh	r2, [r3, #0]
    data |= p_data[i+1] << 8;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	3301      	adds	r3, #1
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	18d3      	adds	r3, r2, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	b21a      	sxth	r2, r3
 8004142:	187b      	adds	r3, r7, r1
 8004144:	2000      	movs	r0, #0
 8004146:	5e1b      	ldrsh	r3, [r3, r0]
 8004148:	4313      	orrs	r3, r2
 800414a:	b21a      	sxth	r2, r3
 800414c:	0008      	movs	r0, r1
 800414e:	187b      	adds	r3, r7, r1
 8004150:	801a      	strh	r2, [r3, #0]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	18d1      	adds	r1, r2, r3
 8004158:	183b      	adds	r3, r7, r0
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	001c      	movs	r4, r3
 8004160:	2300      	movs	r3, #0
 8004162:	001d      	movs	r5, r3
 8004164:	2315      	movs	r3, #21
 8004166:	18fe      	adds	r6, r7, r3
 8004168:	0022      	movs	r2, r4
 800416a:	002b      	movs	r3, r5
 800416c:	2001      	movs	r0, #1
 800416e:	f001 faa1 	bl	80056b4 <HAL_FLASH_Program>
 8004172:	0003      	movs	r3, r0
 8004174:	7033      	strb	r3, [r6, #0]

    if(status != HAL_OK)
 8004176:	2315      	movs	r3, #21
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <flashWrite+0x8e>
    {
      ret = false;
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
      break;
 8004188:	e006      	b.n	8004198 <flashWrite+0x9c>
  for (int i=0; i<length; i+=2)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3302      	adds	r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d8c6      	bhi.n	8004126 <flashWrite+0x2a>
    }
  }



  HAL_FLASH_Lock();
 8004198:	f001 fb48 	bl	800582c <HAL_FLASH_Lock>


  return ret;
 800419c:	231f      	movs	r3, #31
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	781b      	ldrb	r3, [r3, #0]
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b009      	add	sp, #36	; 0x24
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041aa <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80041b6:	231b      	movs	r3, #27
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]

  uint8_t *p_byte = (uint8_t *)addr;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	617b      	str	r3, [r7, #20]


  for (int i=0; i<length; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	e00a      	b.n	80041de <flashRead+0x34>
  {
    p_data[i] = p_byte[i];
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	18d2      	adds	r2, r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	18cb      	adds	r3, r1, r3
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<length; i++)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d8f0      	bhi.n	80041c8 <flashRead+0x1e>
  }

  return ret;
 80041e6:	231b      	movs	r3, #27
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	781b      	ldrb	r3, [r3, #0]
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b008      	add	sp, #32
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <flashInSector>:
 * Checking - address contain sector
 * addr, length - flash section to erase
 * sector number - sector number for checking
 * */
bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	210e      	movs	r1, #14
 8004200:	187b      	adds	r3, r7, r1
 8004202:	1c02      	adds	r2, r0, #0
 8004204:	801a      	strh	r2, [r3, #0]
  bool ret = false;
 8004206:	2027      	movs	r0, #39	; 0x27
 8004208:	183b      	adds	r3, r7, r0
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	881a      	ldrh	r2, [r3, #0]
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <flashInSector+0xc0>)
 8004214:	00d2      	lsls	r2, r2, #3
 8004216:	58d3      	ldr	r3, [r2, r3]
 8004218:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800421a:	187b      	adds	r3, r7, r1
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <flashInSector+0xc0>)
 8004220:	00d2      	lsls	r2, r2, #3
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	187a      	adds	r2, r7, r1
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	4922      	ldr	r1, [pc, #136]	; (80042b4 <flashInSector+0xc0>)
 800422a:	00d2      	lsls	r2, r2, #3
 800422c:	188a      	adds	r2, r1, r2
 800422e:	3204      	adds	r2, #4
 8004230:	8812      	ldrh	r2, [r2, #0]
 8004232:	189b      	adds	r3, r3, r2
 8004234:	3b01      	subs	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
  flash_start = addr;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61bb      	str	r3, [r7, #24]
  flash_end   = addr + length - 1;
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	18d3      	adds	r3, r2, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]


  if(sector_start >= flash_start && sector_start <= flash_end)
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d306      	bcc.n	800425c <flashInSector+0x68>
 800424e:	6a3a      	ldr	r2, [r7, #32]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	429a      	cmp	r2, r3
 8004254:	d802      	bhi.n	800425c <flashInSector+0x68>
  {
    ret = true;
 8004256:	183b      	adds	r3, r7, r0
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
  }

  if(sector_end >= flash_start && sector_end <= flash_end)
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d307      	bcc.n	8004274 <flashInSector+0x80>
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	429a      	cmp	r2, r3
 800426a:	d803      	bhi.n	8004274 <flashInSector+0x80>
  {
    ret = true;
 800426c:	2327      	movs	r3, #39	; 0x27
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
  }

  if(flash_start >= sector_start && flash_start <= sector_end)
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	429a      	cmp	r2, r3
 800427a:	d307      	bcc.n	800428c <flashInSector+0x98>
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	429a      	cmp	r2, r3
 8004282:	d803      	bhi.n	800428c <flashInSector+0x98>
  {
    ret = true;
 8004284:	2327      	movs	r3, #39	; 0x27
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
  }

  if(flash_end >= sector_start && flash_end <= sector_end)
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	429a      	cmp	r2, r3
 8004292:	d307      	bcc.n	80042a4 <flashInSector+0xb0>
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d803      	bhi.n	80042a4 <flashInSector+0xb0>
  {
    ret = true;
 800429c:	2327      	movs	r3, #39	; 0x27
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
  }


  return ret;
 80042a4:	2327      	movs	r3, #39	; 0x27
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	781b      	ldrb	r3, [r3, #0]
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b00a      	add	sp, #40	; 0x28
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	200006b0 	.word	0x200006b0

080042b8 <ledInit>:
        {GPIOC, GPIO_PIN_9, GPIO_PIN_SET, GPIO_PIN_RESET},
    };


bool ledInit(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
  bool ret = true;
 80042be:	231b      	movs	r3, #27
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <ledInit+0x98>)
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <ledInit+0x98>)
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	0309      	lsls	r1, r1, #12
 80042d0:	430a      	orrs	r2, r1
 80042d2:	615a      	str	r2, [r3, #20]
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <ledInit+0x98>)
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	031b      	lsls	r3, r3, #12
 80042dc:	4013      	ands	r3, r2
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e2:	1d3b      	adds	r3, r7, #4
 80042e4:	0018      	movs	r0, r3
 80042e6:	2314      	movs	r3, #20
 80042e8:	001a      	movs	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f003 fdf1 	bl	8007ed2 <memset>

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	2201      	movs	r2, #1
 80042f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]


  for (int i = 0; i<LED_MAX_CH; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e019      	b.n	800433c <ledInit+0x84>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <ledInit+0x9c>)
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	18d3      	adds	r3, r2, r3
 8004310:	3304      	adds	r3, #4
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	001a      	movs	r2, r3
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <ledInit+0x9c>)
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	00d2      	lsls	r2, r2, #3
 8004320:	58d3      	ldr	r3, [r2, r3]
 8004322:	1d3a      	adds	r2, r7, #4
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f001 fbc6 	bl	8005ab8 <HAL_GPIO_Init>

    ledOff(i);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f811 	bl	8004358 <ledOff>
  for (int i = 0; i<LED_MAX_CH; i++)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3301      	adds	r3, #1
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	dde2      	ble.n	8004308 <ledInit+0x50>
  }

  return ret;
 8004342:	231b      	movs	r3, #27
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b008      	add	sp, #32
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	2000007c 	.word	0x2000007c

08004358 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	0002      	movs	r2, r0
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	701a      	strb	r2, [r3, #0]
  if (ch >= LED_MAX_CH) return;
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <ledOff+0x42>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800436c:	1dfb      	adds	r3, r7, #7
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <ledOff+0x4c>)
 8004372:	00d2      	lsls	r2, r2, #3
 8004374:	58d0      	ldr	r0, [r2, r3]
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <ledOff+0x4c>)
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	18d3      	adds	r3, r2, r3
 8004380:	3304      	adds	r3, #4
 8004382:	8819      	ldrh	r1, [r3, #0]
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4a06      	ldr	r2, [pc, #24]	; (80043a4 <ledOff+0x4c>)
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	18d3      	adds	r3, r2, r3
 800438e:	3307      	adds	r3, #7
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	001a      	movs	r2, r3
 8004394:	f001 fded 	bl	8005f72 <HAL_GPIO_WritePin>
 8004398:	e000      	b.n	800439c <ledOff+0x44>
  if (ch >= LED_MAX_CH) return;
 800439a:	46c0      	nop			; (mov r8, r8)
}
 800439c:	46bd      	mov	sp, r7
 800439e:	b002      	add	sp, #8
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	2000007c 	.word	0x2000007c

080043a8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	0002      	movs	r2, r0
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	701a      	strb	r2, [r3, #0]
  if (ch >= LED_MAX_CH) return;
 80043b4:	1dfb      	adds	r3, r7, #7
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10f      	bne.n	80043dc <ledToggle+0x34>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80043bc:	1dfb      	adds	r3, r7, #7
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <ledToggle+0x3c>)
 80043c2:	00d2      	lsls	r2, r2, #3
 80043c4:	58d0      	ldr	r0, [r2, r3]
 80043c6:	1dfb      	adds	r3, r7, #7
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <ledToggle+0x3c>)
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	18d3      	adds	r3, r2, r3
 80043d0:	3304      	adds	r3, #4
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	0019      	movs	r1, r3
 80043d6:	f001 fde9 	bl	8005fac <HAL_GPIO_TogglePin>
 80043da:	e000      	b.n	80043de <ledToggle+0x36>
  if (ch >= LED_MAX_CH) return;
 80043dc:	46c0      	nop			; (mov r8, r8)
}
 80043de:	46bd      	mov	sp, r7
 80043e0:	b002      	add	sp, #8
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	2000007c 	.word	0x2000007c

080043e8 <uartInit>:




bool uartInit(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e007      	b.n	8004404 <uartInit+0x1c>
    {
      is_open[i] = false;
 80043f4:	4a07      	ldr	r2, [pc, #28]	; (8004414 <uartInit+0x2c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3301      	adds	r3, #1
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	ddf4      	ble.n	80043f4 <uartInit+0xc>
    }
  return true;
 800440a:	2301      	movs	r3, #1
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200008b0 	.word	0x200008b0

08004418 <uartOpen>:

bool uartOpen(uint8_t ch)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	0002      	movs	r2, r0
 8004420:	1dfb      	adds	r3, r7, #7
 8004422:	701a      	strb	r2, [r3, #0]
  bool ret = false;
 8004424:	2317      	movs	r3, #23
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]


  switch(ch)
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d000      	beq.n	8004436 <uartOpen+0x1e>
 8004434:	e0a6      	b.n	8004584 <uartOpen+0x16c>
  {
    case _DEF_UART1:


      huart1.Instance                    = USART1;
 8004436:	4b57      	ldr	r3, [pc, #348]	; (8004594 <uartOpen+0x17c>)
 8004438:	4a57      	ldr	r2, [pc, #348]	; (8004598 <uartOpen+0x180>)
 800443a:	601a      	str	r2, [r3, #0]
      huart1.Init.Mode                   = UART_MODE_TX_RX;
 800443c:	4b55      	ldr	r3, [pc, #340]	; (8004594 <uartOpen+0x17c>)
 800443e:	220c      	movs	r2, #12
 8004440:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling           = UART_OVERSAMPLING_16;
 8004442:	4b54      	ldr	r3, [pc, #336]	; (8004594 <uartOpen+0x17c>)
 8004444:	2200      	movs	r2, #0
 8004446:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8004448:	4b52      	ldr	r3, [pc, #328]	; (8004594 <uartOpen+0x17c>)
 800444a:	2200      	movs	r2, #0
 800444c:	621a      	str	r2, [r3, #32]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800444e:	4b51      	ldr	r3, [pc, #324]	; (8004594 <uartOpen+0x17c>)
 8004450:	2200      	movs	r2, #0
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

      for (int i = 0; i<UART_MAX_CH; i++)
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e037      	b.n	80044ca <uartOpen+0xb2>
        {
          huart1.Init.BaudRate               = uart_tbl[i].baudrate;
 800445a:	4950      	ldr	r1, [pc, #320]	; (800459c <uartOpen+0x184>)
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	0013      	movs	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	189b      	adds	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	585a      	ldr	r2, [r3, r1]
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <uartOpen+0x17c>)
 800446a:	605a      	str	r2, [r3, #4]
          huart1.Init.WordLength             = uart_tbl[i].databit;
 800446c:	494b      	ldr	r1, [pc, #300]	; (800459c <uartOpen+0x184>)
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	0013      	movs	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	189b      	adds	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	18cb      	adds	r3, r1, r3
 800447a:	3304      	adds	r3, #4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b45      	ldr	r3, [pc, #276]	; (8004594 <uartOpen+0x17c>)
 8004480:	609a      	str	r2, [r3, #8]
          huart1.Init.StopBits               = uart_tbl[i].stopbit;
 8004482:	4946      	ldr	r1, [pc, #280]	; (800459c <uartOpen+0x184>)
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	0013      	movs	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	189b      	adds	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	18cb      	adds	r3, r1, r3
 8004490:	3308      	adds	r3, #8
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <uartOpen+0x17c>)
 8004496:	60da      	str	r2, [r3, #12]
          huart1.Init.Parity                 = uart_tbl[i].parity;
 8004498:	4940      	ldr	r1, [pc, #256]	; (800459c <uartOpen+0x184>)
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	0013      	movs	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	18cb      	adds	r3, r1, r3
 80044a6:	330c      	adds	r3, #12
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <uartOpen+0x17c>)
 80044ac:	611a      	str	r2, [r3, #16]
          huart1.Init.HwFlowCtl              = uart_tbl[i].flowCtl;
 80044ae:	493b      	ldr	r1, [pc, #236]	; (800459c <uartOpen+0x184>)
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	0013      	movs	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	18cb      	adds	r3, r1, r3
 80044bc:	3310      	adds	r3, #16
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b34      	ldr	r3, [pc, #208]	; (8004594 <uartOpen+0x17c>)
 80044c2:	619a      	str	r2, [r3, #24]
      for (int i = 0; i<UART_MAX_CH; i++)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3301      	adds	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	ddc4      	ble.n	800445a <uartOpen+0x42>
        }

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <uartOpen+0x188>)
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	2280      	movs	r2, #128	; 0x80
 80044dc:	0052      	lsls	r2, r2, #1
 80044de:	4931      	ldr	r1, [pc, #196]	; (80045a4 <uartOpen+0x18c>)
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fe fc2a 	bl	8002d3a <qbufferCreate>

      HAL_UART_DeInit(&huart1);
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <uartOpen+0x17c>)
 80044e8:	0018      	movs	r0, r3
 80044ea:	f002 fb0b 	bl	8006b04 <HAL_UART_DeInit>

      __HAL_RCC_DMA1_CLK_ENABLE();
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <uartOpen+0x190>)
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <uartOpen+0x190>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	615a      	str	r2, [r3, #20]
 80044fa:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <uartOpen+0x190>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2201      	movs	r2, #1
 8004500:	4013      	ands	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	200a      	movs	r0, #10
 800450c:	f000 fed4 	bl	80052b8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004510:	200a      	movs	r0, #10
 8004512:	f000 fee6 	bl	80052e2 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart1) != HAL_OK)
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <uartOpen+0x17c>)
 8004518:	0018      	movs	r0, r3
 800451a:	f002 fa9f 	bl	8006a5c <HAL_UART_Init>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d004      	beq.n	800452c <uartOpen+0x114>
      {
        ret = false;
 8004522:	2317      	movs	r3, #23
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);

        qbuffer[ch].in = 0;
        qbuffer[ch].out = 0;
      }
      break;
 800452a:	e02a      	b.n	8004582 <uartOpen+0x16a>
        ret = true;
 800452c:	2417      	movs	r4, #23
 800452e:	193b      	adds	r3, r7, r4
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
        is_open[ch] = true;
 8004534:	1dfb      	adds	r3, r7, #7
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <uartOpen+0x194>)
 800453a:	2101      	movs	r1, #1
 800453c:	54d1      	strb	r1, [r2, r3]
        if(HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&rx_dma_buf[0], 256) != HAL_OK)
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	005a      	lsls	r2, r3, #1
 8004542:	491b      	ldr	r1, [pc, #108]	; (80045b0 <uartOpen+0x198>)
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <uartOpen+0x17c>)
 8004546:	0018      	movs	r0, r3
 8004548:	f003 fc1b 	bl	8007d82 <HAL_UARTEx_ReceiveToIdle_DMA>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d002      	beq.n	8004556 <uartOpen+0x13e>
            ret = false;
 8004550:	193b      	adds	r3, r7, r4
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <uartOpen+0x19c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <uartOpen+0x19c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2104      	movs	r1, #4
 8004562:	438a      	bics	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
        qbuffer[ch].in = 0;
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <uartOpen+0x188>)
 800456c:	0112      	lsls	r2, r2, #4
 800456e:	2100      	movs	r1, #0
 8004570:	50d1      	str	r1, [r2, r3]
        qbuffer[ch].out = 0;
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <uartOpen+0x188>)
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	18d3      	adds	r3, r2, r3
 800457c:	3304      	adds	r3, #4
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
      break;
 8004582:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004584:	2317      	movs	r3, #23
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b007      	add	sp, #28
 8004590:	bd90      	pop	{r4, r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	20000ac8 	.word	0x20000ac8
 8004598:	40013800 	.word	0x40013800
 800459c:	20000084 	.word	0x20000084
 80045a0:	200008b4 	.word	0x200008b4
 80045a4:	200008c4 	.word	0x200008c4
 80045a8:	40021000 	.word	0x40021000
 80045ac:	200008b0 	.word	0x200008b0
 80045b0:	200009c4 	.word	0x200009c4
 80045b4:	20000b50 	.word	0x20000b50

080045b8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	0002      	movs	r2, r0
 80045c0:	1dfb      	adds	r3, r7, #7
 80045c2:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  if(available_flag)
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <uartAvailable+0x4c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <uartAvailable+0x3a>
  {
    switch(ch)
 80045d0:	1dfb      	adds	r3, r7, #7
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10f      	bne.n	80045f8 <uartAvailable+0x40>
    {
      case _DEF_UART1:
          ret= qbufferAvailable(&qbuffer[_DEF_UART1]);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <uartAvailable+0x50>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f7fe fc1b 	bl	8002e16 <qbufferAvailable>
 80045e0:	0003      	movs	r3, r0
 80045e2:	60fb      	str	r3, [r7, #12]
          if(ret == 0)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d105      	bne.n	80045f6 <uartAvailable+0x3e>
          {
            available_flag = false;
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <uartAvailable+0x4c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
          }
        break;
 80045f0:	e001      	b.n	80045f6 <uartAvailable+0x3e>
    }
  }
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	e000      	b.n	80045f8 <uartAvailable+0x40>
        break;
 80045f6:	46c0      	nop			; (mov r8, r8)
  return ret;
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	20000ac4 	.word	0x20000ac4
 8004608:	200008b4 	.word	0x200008b4

0800460c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	0002      	movs	r2, r0
 8004614:	1dfb      	adds	r3, r7, #7
 8004616:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8004618:	230f      	movs	r3, #15
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]

  switch(ch)
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <uartRead+0x2c>
  {
    case _DEF_UART1:
      //sizeof(rx_buf)+1
      qbufferRead(&qbuffer[_DEF_UART1], RxData, 256);
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	005a      	lsls	r2, r3, #1
 800462c:	4906      	ldr	r1, [pc, #24]	; (8004648 <uartRead+0x3c>)
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <uartRead+0x40>)
 8004630:	0018      	movs	r0, r3
 8004632:	f7fe fb9e 	bl	8002d72 <qbufferRead>
      break;
 8004636:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004638:	230f      	movs	r3, #15
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	20000b94 	.word	0x20000b94
 800464c:	200008b4 	.word	0x200008b4

08004650 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8004650:	b5b0      	push	{r4, r5, r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	210f      	movs	r1, #15
 800465c:	187b      	adds	r3, r7, r1
 800465e:	1c02      	adds	r2, r0, #0
 8004660:	701a      	strb	r2, [r3, #0]
  uint32_t ret = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8004666:	187b      	adds	r3, r7, r1
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d111      	bne.n	8004692 <uartWrite+0x42>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	b29a      	uxth	r2, r3
 8004672:	2513      	movs	r5, #19
 8004674:	197c      	adds	r4, r7, r5
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <uartWrite+0x4c>)
 800467a:	2364      	movs	r3, #100	; 0x64
 800467c:	f002 fa80 	bl	8006b80 <HAL_UART_Transmit>
 8004680:	0003      	movs	r3, r0
 8004682:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8004684:	197b      	adds	r3, r7, r5
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <uartWrite+0x40>
      {
        ret = length;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	617b      	str	r3, [r7, #20]
      }
      break;
 8004690:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bdb0      	pop	{r4, r5, r7, pc}
 800469c:	20000ac8 	.word	0x20000ac8

080046a0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80046a0:	b40e      	push	{r1, r2, r3}
 80046a2:	b5b0      	push	{r4, r5, r7, lr}
 80046a4:	b0c7      	sub	sp, #284	; 0x11c
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	0002      	movs	r2, r0
 80046aa:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <uartPrintf+0x74>)
 80046ac:	248c      	movs	r4, #140	; 0x8c
 80046ae:	0064      	lsls	r4, r4, #1
 80046b0:	191b      	adds	r3, r3, r4
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80046b6:	2394      	movs	r3, #148	; 0x94
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	2108      	movs	r1, #8
 80046bc:	185b      	adds	r3, r3, r1
 80046be:	19db      	adds	r3, r3, r7
 80046c0:	60fb      	str	r3, [r7, #12]

  len = vsnprintf(buf, 256, fmt, args);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2292      	movs	r2, #146	; 0x92
 80046c6:	0052      	lsls	r2, r2, #1
 80046c8:	1852      	adds	r2, r2, r1
 80046ca:	19d2      	adds	r2, r2, r7
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	0049      	lsls	r1, r1, #1
 80046d2:	2510      	movs	r5, #16
 80046d4:	1978      	adds	r0, r7, r5
 80046d6:	f004 fc01 	bl	8008edc <vsniprintf>
 80046da:	0003      	movs	r3, r0
 80046dc:	228a      	movs	r2, #138	; 0x8a
 80046de:	0052      	lsls	r2, r2, #1
 80046e0:	18b9      	adds	r1, r7, r2
 80046e2:	600b      	str	r3, [r1, #0]

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80046e4:	18bb      	adds	r3, r7, r2
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	1979      	adds	r1, r7, r5
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <uartPrintf+0x74>)
 80046ec:	191b      	adds	r3, r3, r4
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7ff ffac 	bl	8004650 <uartWrite>
 80046f8:	0003      	movs	r3, r0
 80046fa:	2288      	movs	r2, #136	; 0x88
 80046fc:	0052      	lsls	r2, r2, #1
 80046fe:	18b9      	adds	r1, r7, r2
 8004700:	600b      	str	r3, [r1, #0]

  va_end(args);

  return ret;
 8004702:	18bb      	adds	r3, r7, r2
 8004704:	681b      	ldr	r3, [r3, #0]
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b047      	add	sp, #284	; 0x11c
 800470c:	bcb0      	pop	{r4, r5, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	b003      	add	sp, #12
 8004712:	4718      	bx	r3
 8004714:	fffffeef 	.word	0xfffffeef

08004718 <set_uart_tbl>:
 * 2 : stopbit
 * 3 : parity
 * 4 : flowCtl
 */
bool set_uart_tbl(uint16_t* Holding_Registers_Database)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8004720:	2317      	movs	r3, #23
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]

    for (int i=0; i<UART_MAX_CH; i++)
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e08b      	b.n	8004846 <set_uart_tbl+0x12e>
    {
      is_open[i] = false;
 800472e:	4a4b      	ldr	r2, [pc, #300]	; (800485c <set_uart_tbl+0x144>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	18d3      	adds	r3, r2, r3
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]

      for (int j=0; j<5; j++)
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	e07c      	b.n	8004838 <set_uart_tbl+0x120>
      {
        int uart_tbl_mem_tag = j;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	60bb      	str	r3, [r7, #8]

        switch (uart_tbl_mem_tag)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d868      	bhi.n	800481a <set_uart_tbl+0x102>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	4b44      	ldr	r3, [pc, #272]	; (8004860 <set_uart_tbl+0x148>)
 800474e:	18d3      	adds	r3, r2, r3
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	469f      	mov	pc, r3
        {
          case 0:
            uart_tbl[i].baudrate = (uint32_t)Holding_Registers_Database[uart_tbl_mem_tag+1]<<8 | (uint32_t)Holding_Registers_Database[uart_tbl_mem_tag+2]<<0;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3301      	adds	r3, #1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	18d3      	adds	r3, r2, r3
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	3202      	adds	r2, #2
 8004766:	0052      	lsls	r2, r2, #1
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	188a      	adds	r2, r1, r2
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	0018      	movs	r0, r3
 8004772:	493c      	ldr	r1, [pc, #240]	; (8004864 <set_uart_tbl+0x14c>)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	0013      	movs	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	189b      	adds	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	5058      	str	r0, [r3, r1]
            break;
 8004780:	e057      	b.n	8004832 <set_uart_tbl+0x11a>

          case 1:
            if(Holding_Registers_Database[uart_tbl_mem_tag+2] == 0x08)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3302      	adds	r3, #2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d148      	bne.n	8004824 <set_uart_tbl+0x10c>
            {
              uart_tbl[i].databit = (uint32_t)UART_WORDLENGTH_8B;
 8004792:	4934      	ldr	r1, [pc, #208]	; (8004864 <set_uart_tbl+0x14c>)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	0013      	movs	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	189b      	adds	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	18cb      	adds	r3, r1, r3
 80047a0:	3304      	adds	r3, #4
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
            }
            break;
 80047a6:	e03d      	b.n	8004824 <set_uart_tbl+0x10c>

          case 2:
            if(Holding_Registers_Database[uart_tbl_mem_tag+2] == 0x01)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3302      	adds	r3, #2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d137      	bne.n	8004828 <set_uart_tbl+0x110>
            {
              uart_tbl[i].stopbit = (uint32_t)UART_STOPBITS_1;
 80047b8:	492a      	ldr	r1, [pc, #168]	; (8004864 <set_uart_tbl+0x14c>)
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	0013      	movs	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	18cb      	adds	r3, r1, r3
 80047c6:	3308      	adds	r3, #8
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
            }
            break;
 80047cc:	e02c      	b.n	8004828 <set_uart_tbl+0x110>

          case 3:
            if(Holding_Registers_Database[uart_tbl_mem_tag+2] == 0x00)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3302      	adds	r3, #2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	18d3      	adds	r3, r2, r3
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d126      	bne.n	800482c <set_uart_tbl+0x114>
            {
              uart_tbl[i].parity = (uint32_t)UART_PARITY_NONE;
 80047de:	4921      	ldr	r1, [pc, #132]	; (8004864 <set_uart_tbl+0x14c>)
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	0013      	movs	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	18cb      	adds	r3, r1, r3
 80047ec:	330c      	adds	r3, #12
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
            }
            break;
 80047f2:	e01b      	b.n	800482c <set_uart_tbl+0x114>

          case 4:
            if((uint32_t)Holding_Registers_Database[uart_tbl_mem_tag+2] == 0x00)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3302      	adds	r3, #2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	18d3      	adds	r3, r2, r3
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d115      	bne.n	8004830 <set_uart_tbl+0x118>
            {
              uart_tbl[i].flowCtl = (uint32_t)UART_HWCONTROL_NONE;
 8004804:	4917      	ldr	r1, [pc, #92]	; (8004864 <set_uart_tbl+0x14c>)
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	0013      	movs	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	189b      	adds	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	18cb      	adds	r3, r1, r3
 8004812:	3310      	adds	r3, #16
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
            }
            break;
 8004818:	e00a      	b.n	8004830 <set_uart_tbl+0x118>

          default:
            ret = false;
 800481a:	2317      	movs	r3, #23
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
            break;
 8004822:	e006      	b.n	8004832 <set_uart_tbl+0x11a>
            break;
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	e004      	b.n	8004832 <set_uart_tbl+0x11a>
            break;
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	e002      	b.n	8004832 <set_uart_tbl+0x11a>
            break;
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	e000      	b.n	8004832 <set_uart_tbl+0x11a>
            break;
 8004830:	46c0      	nop			; (mov r8, r8)
      for (int j=0; j<5; j++)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b04      	cmp	r3, #4
 800483c:	dc00      	bgt.n	8004840 <set_uart_tbl+0x128>
 800483e:	e77e      	b.n	800473e <set_uart_tbl+0x26>
    for (int i=0; i<UART_MAX_CH; i++)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	3301      	adds	r3, #1
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	dc00      	bgt.n	800484e <set_uart_tbl+0x136>
 800484c:	e76f      	b.n	800472e <set_uart_tbl+0x16>
        }
      }
    }
    return ret;
 800484e:	2317      	movs	r3, #23
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	781b      	ldrb	r3, [r3, #0]
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200008b0 	.word	0x200008b0
 8004860:	0800b708 	.word	0x0800b708
 8004864:	20000084 	.word	0x20000084

08004868 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
    {

    }
}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b002      	add	sp, #8
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	000a      	movs	r2, r1
 8004882:	1cbb      	adds	r3, r7, #2
 8004884:	801a      	strh	r2, [r3, #0]
  uint16_t availableSpace = 256 - qbuffer[_DEF_UART1].in;
 8004886:	4b36      	ldr	r3, [pc, #216]	; (8004960 <HAL_UARTEx_RxEventCallback+0xe8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29a      	uxth	r2, r3
 800488c:	200a      	movs	r0, #10
 800488e:	183b      	adds	r3, r7, r0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	0049      	lsls	r1, r1, #1
 8004894:	1a8a      	subs	r2, r1, r2
 8004896:	801a      	strh	r2, [r3, #0]

  bool ret = true;
 8004898:	2309      	movs	r3, #9
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]

  if (huart->Instance == USART1) //case _DEF_UART1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <HAL_UARTEx_RxEventCallback+0xec>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d156      	bne.n	8004958 <HAL_UARTEx_RxEventCallback+0xe0>
  {

    qbuffer[_DEF_UART1].in = 0;
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_UARTEx_RxEventCallback+0xe8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
    qbuffer[_DEF_UART1].out = 0;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_UARTEx_RxEventCallback+0xe8>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]

    if (Size > availableSpace)
 80048b6:	1cba      	adds	r2, r7, #2
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	8812      	ldrh	r2, [r2, #0]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d849      	bhi.n	8004956 <HAL_UARTEx_RxEventCallback+0xde>
    {
           // 처리할 수 없는 크기의 데이터가 수신됨
           // 예외 처리 또는 에러 처리를 수행
      return;
    }
    qbuffer[_DEF_UART1].in = qbuffer[_DEF_UART1].len - hdma_usart1_rx.Instance->CNDTR;
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_UARTEx_RxEventCallback+0xe8>)
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_UARTEx_RxEventCallback+0xf0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	1ad2      	subs	r2, r2, r3
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_UARTEx_RxEventCallback+0xe8>)
 80048d0:	601a      	str	r2, [r3, #0]

    for(int i=0; i<Size; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	e00b      	b.n	80048f0 <HAL_UARTEx_RxEventCallback+0x78>
    {
      rx_buf[i] = rx_dma_buf[i];
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <HAL_UARTEx_RxEventCallback+0xf4>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	18d3      	adds	r3, r2, r3
 80048de:	7819      	ldrb	r1, [r3, #0]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_UARTEx_RxEventCallback+0xf8>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	18d3      	adds	r3, r2, r3
 80048e6:	1c0a      	adds	r2, r1, #0
 80048e8:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<Size; i++)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	1cbb      	adds	r3, r7, #2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	dbee      	blt.n	80048d8 <HAL_UARTEx_RxEventCallback+0x60>
    }
    available_flag = true;
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_UARTEx_RxEventCallback+0xfc>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]

    HAL_UART_DeInit(&huart1);
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_UARTEx_RxEventCallback+0x100>)
 8004902:	0018      	movs	r0, r3
 8004904:	f002 f8fe 	bl	8006b04 <HAL_UART_DeInit>
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_UARTEx_RxEventCallback+0x100>)
 800490a:	0018      	movs	r0, r3
 800490c:	f002 f8a6 	bl	8006a5c <HAL_UART_Init>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d004      	beq.n	800491e <HAL_UARTEx_RxEventCallback+0xa6>
    {
      ret = false;
 8004914:	2309      	movs	r3, #9
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e01c      	b.n	8004958 <HAL_UARTEx_RxEventCallback+0xe0>
    }
    else
    {
      ret = true;
 800491e:	2409      	movs	r4, #9
 8004920:	193b      	adds	r3, r7, r4
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
      is_open[_DEF_UART1] = true;
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <HAL_UARTEx_RxEventCallback+0x104>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]

      /*DMA*/
      if(HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)&rx_dma_buf[0], 256) != HAL_OK)
 800492c:	2380      	movs	r3, #128	; 0x80
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	490e      	ldr	r1, [pc, #56]	; (800496c <HAL_UARTEx_RxEventCallback+0xf4>)
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_UARTEx_RxEventCallback+0x100>)
 8004934:	0018      	movs	r0, r3
 8004936:	f003 fa24 	bl	8007d82 <HAL_UARTEx_ReceiveToIdle_DMA>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	d002      	beq.n	8004944 <HAL_UARTEx_RxEventCallback+0xcc>
      {
        ret = false;
 800493e:	193b      	adds	r3, r7, r4
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
      }
      __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_UARTEx_RxEventCallback+0xf0>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <HAL_UARTEx_RxEventCallback+0xf0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2104      	movs	r1, #4
 8004950:	438a      	bics	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e000      	b.n	8004958 <HAL_UARTEx_RxEventCallback+0xe0>
      return;
 8004956:	46c0      	nop			; (mov r8, r8)

      }

  }

}
 8004958:	46bd      	mov	sp, r7
 800495a:	b005      	add	sp, #20
 800495c:	bd90      	pop	{r4, r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	200008b4 	.word	0x200008b4
 8004964:	40013800 	.word	0x40013800
 8004968:	20000b50 	.word	0x20000b50
 800496c:	200009c4 	.word	0x200009c4
 8004970:	200008c4 	.word	0x200008c4
 8004974:	20000ac4 	.word	0x20000ac4
 8004978:	20000ac8 	.word	0x20000ac8
 800497c:	200008b0 	.word	0x200008b0

08004980 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART1], 1);
  }
#endif
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b08b      	sub	sp, #44	; 0x2c
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	2414      	movs	r4, #20
 800499a:	193b      	adds	r3, r7, r4
 800499c:	0018      	movs	r0, r3
 800499e:	2314      	movs	r3, #20
 80049a0:	001a      	movs	r2, r3
 80049a2:	2100      	movs	r1, #0
 80049a4:	f003 fa95 	bl	8007ed2 <memset>
  if(uartHandle->Instance==USART1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <HAL_UART_MspInit+0xf0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d161      	bne.n	8004a76 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049b2:	4b34      	ldr	r3, [pc, #208]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	4b33      	ldr	r3, [pc, #204]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	01c9      	lsls	r1, r1, #7
 80049bc:	430a      	orrs	r2, r1
 80049be:	619a      	str	r2, [r3, #24]
 80049c0:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0289      	lsls	r1, r1, #10
 80049d8:	430a      	orrs	r2, r1
 80049da:	615a      	str	r2, [r3, #20]
 80049dc:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <HAL_UART_MspInit+0xf4>)
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	029b      	lsls	r3, r3, #10
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049ea:	193b      	adds	r3, r7, r4
 80049ec:	22c0      	movs	r2, #192	; 0xc0
 80049ee:	00d2      	lsls	r2, r2, #3
 80049f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f2:	0021      	movs	r1, r4
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	2202      	movs	r2, #2
 80049f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	2200      	movs	r2, #0
 80049fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	2203      	movs	r2, #3
 8004a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2201      	movs	r2, #1
 8004a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0c:	187a      	adds	r2, r7, r1
 8004a0e:	2390      	movs	r3, #144	; 0x90
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	0011      	movs	r1, r2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f001 f84f 	bl	8005ab8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <HAL_UART_MspInit+0xfc>)
 8004a1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a40:	2220      	movs	r2, #32
 8004a42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]

    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 fc75 	bl	800533c <HAL_DMA_Init>
 8004a52:	1e03      	subs	r3, r0, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a56:	f7fe f836 	bl	8002ac6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a5e:	675a      	str	r2, [r3, #116]	; 0x74
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_UART_MspInit+0xf8>)
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a66:	2200      	movs	r2, #0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	201b      	movs	r0, #27
 8004a6c:	f000 fc24 	bl	80052b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a70:	201b      	movs	r0, #27
 8004a72:	f000 fc36 	bl	80052e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b00b      	add	sp, #44	; 0x2c
 8004a7c:	bd90      	pop	{r4, r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40021000 	.word	0x40021000
 8004a88:	20000b50 	.word	0x20000b50
 8004a8c:	40020030 	.word	0x40020030

08004a90 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <HAL_UART_MspDeInit+0x48>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d115      	bne.n	8004ace <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_UART_MspDeInit+0x4c>)
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <HAL_UART_MspDeInit+0x4c>)
 8004aa8:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <HAL_UART_MspDeInit+0x50>)
 8004aaa:	400a      	ands	r2, r1
 8004aac:	619a      	str	r2, [r3, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	00da      	lsls	r2, r3, #3
 8004ab2:	2390      	movs	r3, #144	; 0x90
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	0011      	movs	r1, r2
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f001 f96d 	bl	8005d98 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 fc82 	bl	80053cc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004ac8:	201b      	movs	r0, #27
 8004aca:	f000 fc1a 	bl	8005302 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b002      	add	sp, #8
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	ffffbfff 	.word	0xffffbfff

08004ae4 <ModbusInit>:
uint8_t TxData[256];
uint8_t buffData[256];


bool ModbusInit(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
  bool ret = false;
 8004aea:	1dfb      	adds	r3, r7, #7
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]


  return ret;
 8004af0:	1dfb      	adds	r3, r7, #7
 8004af2:	781b      	ldrb	r3, [r3, #0]
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <sendData>:

void sendData (uint8_t *data, int size)
{
 8004afc:	b5b0      	push	{r4, r5, r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  // we will calculate the CRC in this function itself
  uint16_t crc = crc16(data, size);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	250e      	movs	r5, #14
 8004b0c:	197c      	adds	r4, r7, r5
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0011      	movs	r1, r2
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 fa44 	bl	8004fa0 <crc16>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	8023      	strh	r3, [r4, #0]
  data[size] = crc&0xFF;   // CRC LOW
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	18d3      	adds	r3, r2, r3
 8004b22:	197a      	adds	r2, r7, r5
 8004b24:	8812      	ldrh	r2, [r2, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
  data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8004b2a:	197b      	adds	r3, r7, r5
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	b299      	uxth	r1, r3
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	18d3      	adds	r3, r2, r3
 8004b3a:	b2ca      	uxtb	r2, r1
 8004b3c:	701a      	strb	r2, [r3, #0]

  uartWrite(_DEF_UART1, data, size+2);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	3302      	adds	r3, #2
 8004b42:	001a      	movs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	0019      	movs	r1, r3
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f7ff fd81 	bl	8004650 <uartWrite>
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b004      	add	sp, #16
 8004b54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004b58 <checkData>:

bool checkData (uint8_t *data, int size)
{
 8004b58:	b5b0      	push	{r4, r5, r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8004b62:	2317      	movs	r3, #23
 8004b64:	18fb      	adds	r3, r7, r3
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
  // check the CRC
  uint16_t crc_HH;
  uint16_t crc_LO;

  for (int i=0; i<size; i++)
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	e00b      	b.n	8004b88 <checkData+0x30>
  {
    buffData[i] = data[i];
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	18d3      	adds	r3, r2, r3
 8004b76:	7819      	ldrb	r1, [r3, #0]
 8004b78:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <checkData+0xa8>)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	18d3      	adds	r3, r2, r3
 8004b7e:	1c0a      	adds	r2, r1, #0
 8004b80:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<size; i++)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	dbef      	blt.n	8004b70 <checkData+0x18>
  }

  uint16_t crc = crc16(buffData, size);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	250e      	movs	r5, #14
 8004b96:	197c      	adds	r4, r7, r5
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <checkData+0xa8>)
 8004b9a:	0011      	movs	r1, r2
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 f9ff 	bl	8004fa0 <crc16>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	8023      	strh	r3, [r4, #0]
  crc_LO = crc&0xFF;   // CRC LOW
 8004ba6:	240c      	movs	r4, #12
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	0028      	movs	r0, r5
 8004bac:	183a      	adds	r2, r7, r0
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	21ff      	movs	r1, #255	; 0xff
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	801a      	strh	r2, [r3, #0]
  crc_HH = (crc>>8)&0xFF;  // CRC HIGH
 8004bb6:	210a      	movs	r1, #10
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	183a      	adds	r2, r7, r0
 8004bbc:	8812      	ldrh	r2, [r2, #0]
 8004bbe:	0a12      	lsrs	r2, r2, #8
 8004bc0:	801a      	strh	r2, [r3, #0]

  if(crc_HH == data[size+1] && crc_LO == data[size] )
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	18d3      	adds	r3, r2, r3
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	187a      	adds	r2, r7, r1
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d10c      	bne.n	8004bf0 <checkData+0x98>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	18d3      	adds	r3, r2, r3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	193a      	adds	r2, r7, r4
 8004be2:	8812      	ldrh	r2, [r2, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d103      	bne.n	8004bf0 <checkData+0x98>
  {
    ret = true;
 8004be8:	2317      	movs	r3, #23
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004bf0:	2317      	movs	r3, #23
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	781b      	ldrb	r3, [r3, #0]
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b006      	add	sp, #24
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	20000d94 	.word	0x20000d94

08004c04 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	701a      	strb	r2, [r3, #0]
  //| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
  //| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

  TxData[0] = RxData[0];       // slave ID
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <modbusException+0x40>)
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <modbusException+0x44>)
 8004c16:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 8004c18:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <modbusException+0x40>)
 8004c1a:	785b      	ldrb	r3, [r3, #1]
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	4252      	negs	r2, r2
 8004c20:	4313      	orrs	r3, r2
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <modbusException+0x44>)
 8004c26:	705a      	strb	r2, [r3, #1]
  TxData[2] = exceptioncode;   // Load the Exception code
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <modbusException+0x44>)
 8004c2a:	1dfa      	adds	r2, r7, #7
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	709a      	strb	r2, [r3, #2]
  sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <modbusException+0x44>)
 8004c32:	2103      	movs	r1, #3
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff ff61 	bl	8004afc <sendData>
}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000b94 	.word	0x20000b94
 8004c48:	20000c94 	.word	0x20000c94

08004c4c <readHoldingRegs>:


uint8_t readHoldingRegs (uint16_t* Holding_Registers_Database)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

  /*check RX Data CRC*/
  if (checkData(RxData, 6) != true)  // maximum no. of Registers as per the PDF
 8004c54:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <readHoldingRegs+0x130>)
 8004c56:	2106      	movs	r1, #6
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff ff7d 	bl	8004b58 <checkData>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	001a      	movs	r2, r3
 8004c62:	2301      	movs	r3, #1
 8004c64:	4053      	eors	r3, r2
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <readHoldingRegs+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004c6c:	2003      	movs	r0, #3
 8004c6e:	f7ff ffc9 	bl	8004c04 <modbusException>
      return 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e07e      	b.n	8004d74 <readHoldingRegs+0x128>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <readHoldingRegs+0x130>)
 8004c78:	789b      	ldrb	r3, [r3, #2]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <readHoldingRegs+0x130>)
 8004c80:	78db      	ldrb	r3, [r3, #3]
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	b21a      	sxth	r2, r3
 8004c88:	2316      	movs	r3, #22
 8004c8a:	18fb      	adds	r3, r7, r3
 8004c8c:	801a      	strh	r2, [r3, #0]
  uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <readHoldingRegs+0x130>)
 8004c90:	791b      	ldrb	r3, [r3, #4]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	b21a      	sxth	r2, r3
 8004c96:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <readHoldingRegs+0x130>)
 8004c98:	795b      	ldrb	r3, [r3, #5]
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	b21a      	sxth	r2, r3
 8004ca0:	210a      	movs	r1, #10
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	801a      	strh	r2, [r3, #0]
  if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8004ca6:	000a      	movs	r2, r1
 8004ca8:	18bb      	adds	r3, r7, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <readHoldingRegs+0x6c>
 8004cb0:	18bb      	adds	r3, r7, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	2b7d      	cmp	r3, #125	; 0x7d
 8004cb6:	d904      	bls.n	8004cc2 <readHoldingRegs+0x76>
  {
    modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004cb8:	2003      	movs	r0, #3
 8004cba:	f7ff ffa3 	bl	8004c04 <modbusException>
    return 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e058      	b.n	8004d74 <readHoldingRegs+0x128>
  }

  uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8004cc2:	2316      	movs	r3, #22
 8004cc4:	18fa      	adds	r2, r7, r3
 8004cc6:	230a      	movs	r3, #10
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	8812      	ldrh	r2, [r2, #0]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	801a      	strh	r2, [r3, #0]
  if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	2b31      	cmp	r3, #49	; 0x31
 8004ce0:	d904      	bls.n	8004cec <readHoldingRegs+0xa0>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	f7ff ff8e 	bl	8004c04 <modbusException>
    return 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e043      	b.n	8004d74 <readHoldingRegs+0x128>
  // Prepare TxData buffer

  //| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
  //| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

  TxData[0] = SLAVE_ID;  // slave ID
 8004cec:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <readHoldingRegs+0x134>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];  // function code
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <readHoldingRegs+0x130>)
 8004cf4:	785a      	ldrb	r2, [r3, #1]
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <readHoldingRegs+0x134>)
 8004cf8:	705a      	strb	r2, [r3, #1]
  TxData[2] = numRegs*2;  // Byte count
 8004cfa:	230a      	movs	r3, #10
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	18db      	adds	r3, r3, r3
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <readHoldingRegs+0x134>)
 8004d08:	709a      	strb	r2, [r3, #2]
  int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	613b      	str	r3, [r7, #16]

  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e022      	b.n	8004d5a <readHoldingRegs+0x10e>
  {
    TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8004d14:	2016      	movs	r0, #22
 8004d16:	183b      	adds	r3, r7, r0
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	18d3      	adds	r3, r2, r3
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	b299      	uxth	r1, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	613a      	str	r2, [r7, #16]
 8004d2c:	b2c9      	uxtb	r1, r1
 8004d2e:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <readHoldingRegs+0x134>)
 8004d30:	54d1      	strb	r1, [r2, r3]
    TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	18d3      	adds	r3, r2, r3
 8004d3c:	8819      	ldrh	r1, [r3, #0]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	613a      	str	r2, [r7, #16]
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <readHoldingRegs+0x134>)
 8004d48:	54d1      	strb	r1, [r2, r3]
    startAddr++;  // increment the register address
 8004d4a:	183b      	adds	r3, r7, r0
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	3201      	adds	r2, #1
 8004d52:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	230a      	movs	r3, #10
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	dbd6      	blt.n	8004d14 <readHoldingRegs+0xc8>
  }

  sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <readHoldingRegs+0x134>)
 8004d6a:	0011      	movs	r1, r2
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff fec5 	bl	8004afc <sendData>
  return 1;   // success
 8004d72:	2301      	movs	r3, #1
}
 8004d74:	0018      	movs	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b006      	add	sp, #24
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000b94 	.word	0x20000b94
 8004d80:	20000c94 	.word	0x20000c94

08004d84 <readInputRegs>:

uint8_t readInputRegs (uint16_t* Input_Registers_Database)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /*check RX Data CRC*/
  if (checkData(RxData, 6) != true)  // maximum no. of Registers as per the PDF
 8004d8c:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <readInputRegs+0x130>)
 8004d8e:	2106      	movs	r1, #6
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff fee1 	bl	8004b58 <checkData>
 8004d96:	0003      	movs	r3, r0
 8004d98:	001a      	movs	r2, r3
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4053      	eors	r3, r2
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <readInputRegs+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004da4:	2003      	movs	r0, #3
 8004da6:	f7ff ff2d 	bl	8004c04 <modbusException>
      return 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e07e      	b.n	8004eac <readInputRegs+0x128>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <readInputRegs+0x130>)
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	b21a      	sxth	r2, r3
 8004db6:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <readInputRegs+0x130>)
 8004db8:	78db      	ldrb	r3, [r3, #3]
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b21a      	sxth	r2, r3
 8004dc0:	2316      	movs	r3, #22
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	801a      	strh	r2, [r3, #0]
  uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <readInputRegs+0x130>)
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	b21a      	sxth	r2, r3
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <readInputRegs+0x130>)
 8004dd0:	795b      	ldrb	r3, [r3, #5]
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	b21a      	sxth	r2, r3
 8004dd8:	210a      	movs	r1, #10
 8004dda:	187b      	adds	r3, r7, r1
 8004ddc:	801a      	strh	r2, [r3, #0]
  if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8004dde:	000a      	movs	r2, r1
 8004de0:	18bb      	adds	r3, r7, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <readInputRegs+0x6c>
 8004de8:	18bb      	adds	r3, r7, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	2b7d      	cmp	r3, #125	; 0x7d
 8004dee:	d904      	bls.n	8004dfa <readInputRegs+0x76>
  {
    modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004df0:	2003      	movs	r0, #3
 8004df2:	f7ff ff07 	bl	8004c04 <modbusException>
    return 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e058      	b.n	8004eac <readInputRegs+0x128>
  }

  uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8004dfa:	2316      	movs	r3, #22
 8004dfc:	18fa      	adds	r2, r7, r3
 8004dfe:	230a      	movs	r3, #10
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	8812      	ldrh	r2, [r2, #0]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	18d3      	adds	r3, r2, r3
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	801a      	strh	r2, [r3, #0]
  if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	2b31      	cmp	r3, #49	; 0x31
 8004e18:	d904      	bls.n	8004e24 <readInputRegs+0xa0>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8004e1a:	2002      	movs	r0, #2
 8004e1c:	f7ff fef2 	bl	8004c04 <modbusException>
    return 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e043      	b.n	8004eac <readInputRegs+0x128>
  // Prepare TxData buffer

  //| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
  //| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

  TxData[0] = SLAVE_ID;  // slave ID
 8004e24:	4b24      	ldr	r3, [pc, #144]	; (8004eb8 <readInputRegs+0x134>)
 8004e26:	2201      	movs	r2, #1
 8004e28:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];  // function code
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <readInputRegs+0x130>)
 8004e2c:	785a      	ldrb	r2, [r3, #1]
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <readInputRegs+0x134>)
 8004e30:	705a      	strb	r2, [r3, #1]
  TxData[2] = numRegs*2;  // Byte count
 8004e32:	230a      	movs	r3, #10
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	18db      	adds	r3, r3, r3
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b1e      	ldr	r3, [pc, #120]	; (8004eb8 <readInputRegs+0x134>)
 8004e40:	709a      	strb	r2, [r3, #2]
  int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 8004e42:	2303      	movs	r3, #3
 8004e44:	613b      	str	r3, [r7, #16]

  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	e022      	b.n	8004e92 <readInputRegs+0x10e>
  {
    TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 8004e4c:	2016      	movs	r0, #22
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	18d3      	adds	r3, r2, r3
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	613a      	str	r2, [r7, #16]
 8004e64:	b2c9      	uxtb	r1, r1
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <readInputRegs+0x134>)
 8004e68:	54d1      	strb	r1, [r2, r3]
    TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8004e6a:	183b      	adds	r3, r7, r0
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	8819      	ldrh	r1, [r3, #0]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	613a      	str	r2, [r7, #16]
 8004e7c:	b2c9      	uxtb	r1, r1
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <readInputRegs+0x134>)
 8004e80:	54d1      	strb	r1, [r2, r3]
    startAddr++;  // increment the register address
 8004e82:	183b      	adds	r3, r7, r0
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	183b      	adds	r3, r7, r0
 8004e88:	3201      	adds	r2, #1
 8004e8a:	801a      	strh	r2, [r3, #0]
  for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	230a      	movs	r3, #10
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	dbd6      	blt.n	8004e4c <readInputRegs+0xc8>
  }
  //uartPrintf(_DEF_UART1, "%X", Input_Registers_Database[0]);
  sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <readInputRegs+0x134>)
 8004ea2:	0011      	movs	r1, r2
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7ff fe29 	bl	8004afc <sendData>
  return 1;   // success
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	0018      	movs	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b006      	add	sp, #24
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000b94 	.word	0x20000b94
 8004eb8:	20000c94 	.word	0x20000c94

08004ebc <writeSingleReg>:

uint8_t writeSingleReg (uint16_t* Holding_Registers_Database)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /*check RX Data CRC*/
  if (checkData(RxData, 6)!=true)  // maximum no. of Registers as per the PDF
 8004ec4:	4b33      	ldr	r3, [pc, #204]	; (8004f94 <writeSingleReg+0xd8>)
 8004ec6:	2106      	movs	r1, #6
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f7ff fe45 	bl	8004b58 <checkData>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	001a      	movs	r2, r3
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4053      	eors	r3, r2
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <writeSingleReg+0x2a>
    {
      modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8004edc:	2003      	movs	r0, #3
 8004ede:	f7ff fe91 	bl	8004c04 <modbusException>
      return 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e051      	b.n	8004f8a <writeSingleReg+0xce>
    }

  uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8004ee6:	4b2b      	ldr	r3, [pc, #172]	; (8004f94 <writeSingleReg+0xd8>)
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	b21a      	sxth	r2, r3
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <writeSingleReg+0xd8>)
 8004ef0:	78db      	ldrb	r3, [r3, #3]
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b21a      	sxth	r2, r3
 8004ef8:	210e      	movs	r1, #14
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	801a      	strh	r2, [r3, #0]
  if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	2b31      	cmp	r3, #49	; 0x31
 8004f04:	d904      	bls.n	8004f10 <writeSingleReg+0x54>
  {
    modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8004f06:	2002      	movs	r0, #2
 8004f08:	f7ff fe7c 	bl	8004c04 <modbusException>
    return 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e03c      	b.n	8004f8a <writeSingleReg+0xce>

  /* Save the 16 bit data
   * Data is the combination of 2 bytes, RxData[4] and RxData[5]
   */

  Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8004f10:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <writeSingleReg+0xd8>)
 8004f12:	791b      	ldrb	r3, [r3, #4]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	b21a      	sxth	r2, r3
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <writeSingleReg+0xd8>)
 8004f1a:	795b      	ldrb	r3, [r3, #5]
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	b219      	sxth	r1, r3
 8004f22:	240e      	movs	r4, #14
 8004f24:	193b      	adds	r3, r7, r4
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	18d3      	adds	r3, r2, r3
 8004f2e:	b28a      	uxth	r2, r1
 8004f30:	801a      	strh	r2, [r3, #0]
  // Prepare Response

  //| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
  //| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

  TxData[0] = SLAVE_ID;    // slave ID
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <writeSingleReg+0xdc>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
  TxData[1] = RxData[1];   // function code
 8004f38:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <writeSingleReg+0xd8>)
 8004f3a:	785a      	ldrb	r2, [r3, #1]
 8004f3c:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <writeSingleReg+0xdc>)
 8004f3e:	705a      	strb	r2, [r3, #1]
  TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <writeSingleReg+0xd8>)
 8004f42:	789a      	ldrb	r2, [r3, #2]
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <writeSingleReg+0xdc>)
 8004f46:	709a      	strb	r2, [r3, #2]
  TxData[3] = RxData[3];   // Start Addr LOW Byte
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <writeSingleReg+0xd8>)
 8004f4a:	78da      	ldrb	r2, [r3, #3]
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <writeSingleReg+0xdc>)
 8004f4e:	70da      	strb	r2, [r3, #3]
  TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <writeSingleReg+0xd8>)
 8004f52:	791a      	ldrb	r2, [r3, #4]
 8004f54:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <writeSingleReg+0xdc>)
 8004f56:	711a      	strb	r2, [r3, #4]
  TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <writeSingleReg+0xd8>)
 8004f5a:	795a      	ldrb	r2, [r3, #5]
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <writeSingleReg+0xdc>)
 8004f5e:	715a      	strb	r2, [r3, #5]

  sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <writeSingleReg+0xdc>)
 8004f62:	2106      	movs	r1, #6
 8004f64:	0018      	movs	r0, r3
 8004f66:	f7ff fdc9 	bl	8004afc <sendData>

  /* Change CLI Mode State */
  if(startAddr == 7 &&((RxData[4]<<8)|RxData[5]) == 0xffff)
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	2b07      	cmp	r3, #7
 8004f70:	d10a      	bne.n	8004f88 <writeSingleReg+0xcc>
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <writeSingleReg+0xd8>)
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	4a06      	ldr	r2, [pc, #24]	; (8004f94 <writeSingleReg+0xd8>)
 8004f7a:	7952      	ldrb	r2, [r2, #5]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <writeSingleReg+0xe0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <writeSingleReg+0xcc>
  {
    return 2;
 8004f84:	2302      	movs	r3, #2
 8004f86:	e000      	b.n	8004f8a <writeSingleReg+0xce>
  }

  return 1;   // success
 8004f88:	2301      	movs	r3, #1
}
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b005      	add	sp, #20
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	20000b94 	.word	0x20000b94
 8004f98:	20000c94 	.word	0x20000c94
 8004f9c:	0000ffff 	.word	0x0000ffff

08004fa0 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	000a      	movs	r2, r1
 8004faa:	1cbb      	adds	r3, r7, #2
 8004fac:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8004fae:	230f      	movs	r3, #15
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8004fb6:	230e      	movs	r3, #14
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	22ff      	movs	r2, #255	; 0xff
 8004fbc:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8004fbe:	e019      	b.n	8004ff4 <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	607a      	str	r2, [r7, #4]
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	200e      	movs	r0, #14
 8004fca:	183b      	adds	r3, r7, r0
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	4053      	eors	r3, r2
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <crc16+0x84>)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	7819      	ldrb	r1, [r3, #0]
 8004fdc:	183b      	adds	r3, r7, r0
 8004fde:	200f      	movs	r0, #15
 8004fe0:	183a      	adds	r2, r7, r0
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	404a      	eors	r2, r1
 8004fe6:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 8004fe8:	183b      	adds	r3, r7, r0
 8004fea:	490f      	ldr	r1, [pc, #60]	; (8005028 <crc16+0x88>)
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	188a      	adds	r2, r1, r2
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 8004ff4:	1cbb      	adds	r3, r7, #2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	1cba      	adds	r2, r7, #2
 8004ffa:	1e59      	subs	r1, r3, #1
 8004ffc:	8011      	strh	r1, [r2, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1de      	bne.n	8004fc0 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 8005002:	230f      	movs	r3, #15
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	b21a      	sxth	r2, r3
 800500c:	230e      	movs	r3, #14
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b21b      	sxth	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b21b      	sxth	r3, r3
 8005018:	b29b      	uxth	r3, r3
}
 800501a:	0018      	movs	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	b004      	add	sp, #16
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	0800b71c 	.word	0x0800b71c
 8005028:	0800b81c 	.word	0x0800b81c

0800502c <hwInit>:




void hwInit(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  bspInit();
 8005030:	f7fd fcb8 	bl	80029a4 <bspInit>
  cliInit();
 8005034:	f7fd ff76 	bl	8002f24 <cliInit>

  ledInit();
 8005038:	f7ff f93e 	bl	80042b8 <ledInit>
  uartInit();
 800503c:	f7ff f9d4 	bl	80043e8 <uartInit>
  buttonInit();
 8005040:	f7fd ff00 	bl	8002e44 <buttonInit>
  ModbusInit();
 8005044:	f7ff fd4e 	bl	8004ae4 <ModbusInit>
  flashInit();
 8005048:	f7fe ffd0 	bl	8003fec <flashInit>

}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005058:	4b07      	ldr	r3, [pc, #28]	; (8005078 <HAL_Init+0x24>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_Init+0x24>)
 800505e:	2110      	movs	r1, #16
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005064:	2003      	movs	r0, #3
 8005066:	f000 f809 	bl	800507c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800506a:	f7fd fd31 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	40022000 	.word	0x40022000

0800507c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <HAL_InitTick+0x5c>)
 8005086:	681c      	ldr	r4, [r3, #0]
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <HAL_InitTick+0x60>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	0019      	movs	r1, r3
 800508e:	23fa      	movs	r3, #250	; 0xfa
 8005090:	0098      	lsls	r0, r3, #2
 8005092:	f7fb f85f 	bl	8000154 <__udivsi3>
 8005096:	0003      	movs	r3, r0
 8005098:	0019      	movs	r1, r3
 800509a:	0020      	movs	r0, r4
 800509c:	f7fb f85a 	bl	8000154 <__udivsi3>
 80050a0:	0003      	movs	r3, r0
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f93d 	bl	8005322 <HAL_SYSTICK_Config>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e00f      	b.n	80050d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d80b      	bhi.n	80050ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	2301      	movs	r3, #1
 80050ba:	425b      	negs	r3, r3
 80050bc:	2200      	movs	r2, #0
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 f8fa 	bl	80052b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_InitTick+0x64>)
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	e000      	b.n	80050d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
}
 80050d0:	0018      	movs	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b003      	add	sp, #12
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	20000068 	.word	0x20000068
 80050dc:	2000009c 	.word	0x2000009c
 80050e0:	20000098 	.word	0x20000098

080050e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_IncTick+0x1c>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_IncTick+0x20>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	18d2      	adds	r2, r2, r3
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <HAL_IncTick+0x20>)
 80050f6:	601a      	str	r2, [r3, #0]
}
 80050f8:	46c0      	nop			; (mov r8, r8)
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	2000009c 	.word	0x2000009c
 8005104:	20000e94 	.word	0x20000e94

08005108 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  return uwTick;
 800510c:	4b02      	ldr	r3, [pc, #8]	; (8005118 <HAL_GetTick+0x10>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	20000e94 	.word	0x20000e94

0800511c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	0002      	movs	r2, r0
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005128:	1dfb      	adds	r3, r7, #7
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b7f      	cmp	r3, #127	; 0x7f
 800512e:	d809      	bhi.n	8005144 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005130:	1dfb      	adds	r3, r7, #7
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	001a      	movs	r2, r3
 8005136:	231f      	movs	r3, #31
 8005138:	401a      	ands	r2, r3
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <__NVIC_EnableIRQ+0x30>)
 800513c:	2101      	movs	r1, #1
 800513e:	4091      	lsls	r1, r2
 8005140:	000a      	movs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
  }
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	0002      	movs	r2, r0
 8005158:	1dfb      	adds	r3, r7, #7
 800515a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b7f      	cmp	r3, #127	; 0x7f
 8005162:	d810      	bhi.n	8005186 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005164:	1dfb      	adds	r3, r7, #7
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	001a      	movs	r2, r3
 800516a:	231f      	movs	r3, #31
 800516c:	4013      	ands	r3, r2
 800516e:	4908      	ldr	r1, [pc, #32]	; (8005190 <__NVIC_DisableIRQ+0x40>)
 8005170:	2201      	movs	r2, #1
 8005172:	409a      	lsls	r2, r3
 8005174:	0013      	movs	r3, r2
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800517a:	f3bf 8f4f 	dsb	sy
}
 800517e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005180:	f3bf 8f6f 	isb	sy
}
 8005184:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	46bd      	mov	sp, r7
 800518a:	b002      	add	sp, #8
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	e000e100 	.word	0xe000e100

08005194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	0002      	movs	r2, r0
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	1dfb      	adds	r3, r7, #7
 80051a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b7f      	cmp	r3, #127	; 0x7f
 80051a8:	d828      	bhi.n	80051fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051aa:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <__NVIC_SetPriority+0xd4>)
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	33c0      	adds	r3, #192	; 0xc0
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	589b      	ldr	r3, [r3, r2]
 80051ba:	1dfa      	adds	r2, r7, #7
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	0011      	movs	r1, r2
 80051c0:	2203      	movs	r2, #3
 80051c2:	400a      	ands	r2, r1
 80051c4:	00d2      	lsls	r2, r2, #3
 80051c6:	21ff      	movs	r1, #255	; 0xff
 80051c8:	4091      	lsls	r1, r2
 80051ca:	000a      	movs	r2, r1
 80051cc:	43d2      	mvns	r2, r2
 80051ce:	401a      	ands	r2, r3
 80051d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	22ff      	movs	r2, #255	; 0xff
 80051d8:	401a      	ands	r2, r3
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	0018      	movs	r0, r3
 80051e0:	2303      	movs	r3, #3
 80051e2:	4003      	ands	r3, r0
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051e8:	481f      	ldr	r0, [pc, #124]	; (8005268 <__NVIC_SetPriority+0xd4>)
 80051ea:	1dfb      	adds	r3, r7, #7
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	430a      	orrs	r2, r1
 80051f4:	33c0      	adds	r3, #192	; 0xc0
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051fa:	e031      	b.n	8005260 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <__NVIC_SetPriority+0xd8>)
 80051fe:	1dfb      	adds	r3, r7, #7
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	0019      	movs	r1, r3
 8005204:	230f      	movs	r3, #15
 8005206:	400b      	ands	r3, r1
 8005208:	3b08      	subs	r3, #8
 800520a:	089b      	lsrs	r3, r3, #2
 800520c:	3306      	adds	r3, #6
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	18d3      	adds	r3, r2, r3
 8005212:	3304      	adds	r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1dfa      	adds	r2, r7, #7
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	0011      	movs	r1, r2
 800521c:	2203      	movs	r2, #3
 800521e:	400a      	ands	r2, r1
 8005220:	00d2      	lsls	r2, r2, #3
 8005222:	21ff      	movs	r1, #255	; 0xff
 8005224:	4091      	lsls	r1, r2
 8005226:	000a      	movs	r2, r1
 8005228:	43d2      	mvns	r2, r2
 800522a:	401a      	ands	r2, r3
 800522c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	22ff      	movs	r2, #255	; 0xff
 8005234:	401a      	ands	r2, r3
 8005236:	1dfb      	adds	r3, r7, #7
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	0018      	movs	r0, r3
 800523c:	2303      	movs	r3, #3
 800523e:	4003      	ands	r3, r0
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005244:	4809      	ldr	r0, [pc, #36]	; (800526c <__NVIC_SetPriority+0xd8>)
 8005246:	1dfb      	adds	r3, r7, #7
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	001c      	movs	r4, r3
 800524c:	230f      	movs	r3, #15
 800524e:	4023      	ands	r3, r4
 8005250:	3b08      	subs	r3, #8
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	430a      	orrs	r2, r1
 8005256:	3306      	adds	r3, #6
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	18c3      	adds	r3, r0, r3
 800525c:	3304      	adds	r3, #4
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b003      	add	sp, #12
 8005266:	bd90      	pop	{r4, r7, pc}
 8005268:	e000e100 	.word	0xe000e100
 800526c:	e000ed00 	.word	0xe000ed00

08005270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1e5a      	subs	r2, r3, #1
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	045b      	lsls	r3, r3, #17
 8005280:	429a      	cmp	r2, r3
 8005282:	d301      	bcc.n	8005288 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005284:	2301      	movs	r3, #1
 8005286:	e010      	b.n	80052aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <SysTick_Config+0x44>)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	3a01      	subs	r2, #1
 800528e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005290:	2301      	movs	r3, #1
 8005292:	425b      	negs	r3, r3
 8005294:	2103      	movs	r1, #3
 8005296:	0018      	movs	r0, r3
 8005298:	f7ff ff7c 	bl	8005194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <SysTick_Config+0x44>)
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052a2:	4b04      	ldr	r3, [pc, #16]	; (80052b4 <SysTick_Config+0x44>)
 80052a4:	2207      	movs	r2, #7
 80052a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	e000e010 	.word	0xe000e010

080052b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	210f      	movs	r1, #15
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	1c02      	adds	r2, r0, #0
 80052c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b25b      	sxtb	r3, r3
 80052d2:	0011      	movs	r1, r2
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7ff ff5d 	bl	8005194 <__NVIC_SetPriority>
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	0002      	movs	r2, r0
 80052ea:	1dfb      	adds	r3, r7, #7
 80052ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ee:	1dfb      	adds	r3, r7, #7
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	0018      	movs	r0, r3
 80052f6:	f7ff ff11 	bl	800511c <__NVIC_EnableIRQ>
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b002      	add	sp, #8
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	0002      	movs	r2, r0
 800530a:	1dfb      	adds	r3, r7, #7
 800530c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800530e:	1dfb      	adds	r3, r7, #7
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b25b      	sxtb	r3, r3
 8005314:	0018      	movs	r0, r3
 8005316:	f7ff ff1b 	bl	8005150 <__NVIC_DisableIRQ>
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	b002      	add	sp, #8
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f7ff ff9f 	bl	8005270 <SysTick_Config>
 8005332:	0003      	movs	r3, r0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e036      	b.n	80053c0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	2102      	movs	r1, #2
 8005358:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <HAL_DMA_Init+0x8c>)
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800537e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 f96a 	bl	800567c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2221      	movs	r2, #33	; 0x21
 80053b2:	2101      	movs	r1, #1
 80053b4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	2100      	movs	r1, #0
 80053bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b004      	add	sp, #16
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	ffffc00f 	.word	0xffffc00f

080053cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e03b      	b.n	8005456 <HAL_DMA_DeInit+0x8a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2101      	movs	r1, #1
 80053ea:	438a      	bics	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */
  DMA_CalcBaseAndBitshift(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f933 	bl	800567c <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2101      	movs	r1, #1
 8005420:	4091      	lsls	r1, r2
 8005422:	000a      	movs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2221      	movs	r2, #33	; 0x21
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	2100      	movs	r1, #0
 8005452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b002      	add	sp, #8
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546c:	2317      	movs	r3, #23
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	5c9b      	ldrb	r3, [r3, r2]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_DMA_Start_IT+0x24>
 800547e:	2302      	movs	r3, #2
 8005480:	e04f      	b.n	8005522 <HAL_DMA_Start_IT+0xc4>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	2101      	movs	r1, #1
 8005488:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2221      	movs	r2, #33	; 0x21
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d13a      	bne.n	800550c <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2221      	movs	r2, #33	; 0x21
 800549a:	2102      	movs	r1, #2
 800549c:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2101      	movs	r1, #1
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8b2 	bl	8005624 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	210e      	movs	r1, #14
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e00f      	b.n	80054fa <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	210a      	movs	r1, #10
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2104      	movs	r1, #4
 80054f6:	438a      	bics	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2101      	movs	r1, #1
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	e007      	b.n	800551c <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	2100      	movs	r1, #0
 8005512:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005514:	2317      	movs	r3, #23
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2202      	movs	r2, #2
 800551a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800551c:	2317      	movs	r3, #23
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	781b      	ldrb	r3, [r3, #0]
}
 8005522:	0018      	movs	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	b006      	add	sp, #24
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2221      	movs	r2, #33	; 0x21
 8005536:	5c9b      	ldrb	r3, [r3, r2]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d008      	beq.n	8005550 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e020      	b.n	8005592 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	210e      	movs	r1, #14
 800555c:	438a      	bics	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2101      	movs	r1, #1
 800556c:	438a      	bics	r2, r1
 800556e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	2101      	movs	r1, #1
 800557a:	4091      	lsls	r1, r2
 800557c:	000a      	movs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2221      	movs	r2, #33	; 0x21
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a2:	210f      	movs	r1, #15
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2221      	movs	r2, #33	; 0x21
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d006      	beq.n	80055c4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2204      	movs	r2, #4
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	2201      	movs	r2, #1
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e028      	b.n	8005616 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	210e      	movs	r1, #14
 80055d0:	438a      	bics	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ec:	2101      	movs	r1, #1
 80055ee:	4091      	lsls	r1, r2
 80055f0:	000a      	movs	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2221      	movs	r2, #33	; 0x21
 80055f8:	2101      	movs	r1, #1
 80055fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	0010      	movs	r0, r2
 8005614:	4798      	blx	r3
    }
  }
  return status;
 8005616:	230f      	movs	r3, #15
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	781b      	ldrb	r3, [r3, #0]
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}

08005624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	2101      	movs	r1, #1
 800563c:	4091      	lsls	r1, r2
 800563e:	000a      	movs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b10      	cmp	r3, #16
 8005650:	d108      	bne.n	8005664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005662:	e007      	b.n	8005674 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b004      	add	sp, #16
 800567a:	bd80      	pop	{r7, pc}

0800567c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a08      	ldr	r2, [pc, #32]	; (80056ac <DMA_CalcBaseAndBitshift+0x30>)
 800568a:	4694      	mov	ip, r2
 800568c:	4463      	add	r3, ip
 800568e:	2114      	movs	r1, #20
 8005690:	0018      	movs	r0, r3
 8005692:	f7fa fd5f 	bl	8000154 <__udivsi3>
 8005696:	0003      	movs	r3, r0
 8005698:	009a      	lsls	r2, r3, #2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <DMA_CalcBaseAndBitshift+0x34>)
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	bffdfff8 	.word	0xbffdfff8
 80056b0:	40020000 	.word	0x40020000

080056b4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603a      	str	r2, [r7, #0]
 80056c0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056c2:	2317      	movs	r3, #23
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80056ca:	2316      	movs	r3, #22
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80056d2:	2315      	movs	r3, #21
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80056da:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <HAL_FLASH_Program+0x120>)
 80056dc:	7e1b      	ldrb	r3, [r3, #24]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_FLASH_Program+0x32>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e072      	b.n	80057cc <HAL_FLASH_Program+0x118>
 80056e6:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <HAL_FLASH_Program+0x120>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056ec:	2317      	movs	r3, #23
 80056ee:	18fe      	adds	r6, r7, r3
 80056f0:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_FLASH_Program+0x124>)
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 f8c4 	bl	8005880 <FLASH_WaitForLastOperation>
 80056f8:	0003      	movs	r3, r0
 80056fa:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80056fc:	2317      	movs	r3, #23
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d15c      	bne.n	80057c0 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d104      	bne.n	8005716 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800570c:	2315      	movs	r3, #21
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e00b      	b.n	800572e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d104      	bne.n	8005726 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800571c:	2315      	movs	r3, #21
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2202      	movs	r2, #2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e003      	b.n	800572e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005726:	2315      	movs	r3, #21
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2204      	movs	r2, #4
 800572c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800572e:	2316      	movs	r3, #22
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	e039      	b.n	80057ac <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005738:	2116      	movs	r1, #22
 800573a:	187b      	adds	r3, r7, r1
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	005a      	lsls	r2, r3, #1
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	18d0      	adds	r0, r2, r3
 8005744:	187b      	adds	r3, r7, r1
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	001a      	movs	r2, r3
 800574c:	3a20      	subs	r2, #32
 800574e:	2a00      	cmp	r2, #0
 8005750:	db03      	blt.n	800575a <HAL_FLASH_Program+0xa6>
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	40d1      	lsrs	r1, r2
 8005756:	000c      	movs	r4, r1
 8005758:	e008      	b.n	800576c <HAL_FLASH_Program+0xb8>
 800575a:	2220      	movs	r2, #32
 800575c:	1ad2      	subs	r2, r2, r3
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4091      	lsls	r1, r2
 8005762:	000a      	movs	r2, r1
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	40d9      	lsrs	r1, r3
 8005768:	000c      	movs	r4, r1
 800576a:	4314      	orrs	r4, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	40da      	lsrs	r2, r3
 8005770:	0015      	movs	r5, r2
 8005772:	b2a3      	uxth	r3, r4
 8005774:	0019      	movs	r1, r3
 8005776:	f000 f867 	bl	8005848 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800577a:	2317      	movs	r3, #23
 800577c:	18fe      	adds	r6, r7, r3
 800577e:	4b16      	ldr	r3, [pc, #88]	; (80057d8 <HAL_FLASH_Program+0x124>)
 8005780:	0018      	movs	r0, r3
 8005782:	f000 f87d 	bl	8005880 <FLASH_WaitForLastOperation>
 8005786:	0003      	movs	r3, r0
 8005788:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800578a:	4b14      	ldr	r3, [pc, #80]	; (80057dc <HAL_FLASH_Program+0x128>)
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_FLASH_Program+0x128>)
 8005790:	2101      	movs	r1, #1
 8005792:	438a      	bics	r2, r1
 8005794:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8005796:	2317      	movs	r3, #23
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10e      	bne.n	80057be <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80057a0:	2116      	movs	r1, #22
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	781a      	ldrb	r2, [r3, #0]
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	3201      	adds	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	2316      	movs	r3, #22
 80057ae:	18fa      	adds	r2, r7, r3
 80057b0:	2315      	movs	r3, #21
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	7812      	ldrb	r2, [r2, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3bd      	bcc.n	8005738 <HAL_FLASH_Program+0x84>
 80057bc:	e000      	b.n	80057c0 <HAL_FLASH_Program+0x10c>
      {
        break;
 80057be:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <HAL_FLASH_Program+0x120>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	761a      	strb	r2, [r3, #24]

  return status;
 80057c6:	2317      	movs	r3, #23
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	781b      	ldrb	r3, [r3, #0]
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b007      	add	sp, #28
 80057d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d4:	20000e98 	.word	0x20000e98
 80057d8:	0000c350 	.word	0x0000c350
 80057dc:	40022000 	.word	0x40022000

080057e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80057e6:	1dfb      	adds	r3, r7, #7
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_FLASH_Unlock+0x40>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	4013      	ands	r3, r2
 80057f4:	d00d      	beq.n	8005812 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <HAL_FLASH_Unlock+0x40>)
 80057f8:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <HAL_FLASH_Unlock+0x44>)
 80057fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_FLASH_Unlock+0x40>)
 80057fe:	4a0a      	ldr	r2, [pc, #40]	; (8005828 <HAL_FLASH_Unlock+0x48>)
 8005800:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_FLASH_Unlock+0x40>)
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	4013      	ands	r3, r2
 800580a:	d002      	beq.n	8005812 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800580c:	1dfb      	adds	r3, r7, #7
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005812:	1dfb      	adds	r3, r7, #7
 8005814:	781b      	ldrb	r3, [r3, #0]
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b002      	add	sp, #8
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	40022000 	.word	0x40022000
 8005824:	45670123 	.word	0x45670123
 8005828:	cdef89ab 	.word	0xcdef89ab

0800582c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <HAL_FLASH_Lock+0x18>)
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <HAL_FLASH_Lock+0x18>)
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	430a      	orrs	r2, r1
 800583a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800583c:	2300      	movs	r3, #0
}
 800583e:	0018      	movs	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40022000 	.word	0x40022000

08005848 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	000a      	movs	r2, r1
 8005852:	1cbb      	adds	r3, r7, #2
 8005854:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <FLASH_Program_HalfWord+0x30>)
 8005858:	2200      	movs	r2, #0
 800585a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <FLASH_Program_HalfWord+0x34>)
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	4b06      	ldr	r3, [pc, #24]	; (800587c <FLASH_Program_HalfWord+0x34>)
 8005862:	2101      	movs	r1, #1
 8005864:	430a      	orrs	r2, r1
 8005866:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	1cba      	adds	r2, r7, #2
 800586c:	8812      	ldrh	r2, [r2, #0]
 800586e:	801a      	strh	r2, [r3, #0]
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20000e98 	.word	0x20000e98
 800587c:	40022000 	.word	0x40022000

08005880 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7ff fc3e 	bl	8005108 <HAL_GetTick>
 800588c:	0003      	movs	r3, r0
 800588e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005890:	e00f      	b.n	80058b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3301      	adds	r3, #1
 8005896:	d00c      	beq.n	80058b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <FLASH_WaitForLastOperation+0x2e>
 800589e:	f7ff fc33 	bl	8005108 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d201      	bcs.n	80058b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e01f      	b.n	80058f2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <FLASH_WaitForLastOperation+0x7c>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d0e9      	beq.n	8005892 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <FLASH_WaitForLastOperation+0x7c>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	d102      	bne.n	80058d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <FLASH_WaitForLastOperation+0x7c>)
 80058cc:	2220      	movs	r2, #32
 80058ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <FLASH_WaitForLastOperation+0x7c>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2210      	movs	r2, #16
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d005      	beq.n	80058e8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <FLASH_WaitForLastOperation+0x7c>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2204      	movs	r2, #4
 80058e2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d103      	bne.n	80058f0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80058e8:	f000 f80a 	bl	8005900 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	40022000 	.word	0x40022000

08005900 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <FLASH_SetErrorCode+0x58>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2210      	movs	r2, #16
 8005910:	4013      	ands	r3, r2
 8005912:	2b10      	cmp	r3, #16
 8005914:	d109      	bne.n	800592a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <FLASH_SetErrorCode+0x5c>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	2202      	movs	r2, #2
 800591c:	431a      	orrs	r2, r3
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <FLASH_SetErrorCode+0x5c>)
 8005920:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2210      	movs	r2, #16
 8005926:	4313      	orrs	r3, r2
 8005928:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <FLASH_SetErrorCode+0x58>)
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2204      	movs	r2, #4
 8005930:	4013      	ands	r3, r2
 8005932:	2b04      	cmp	r3, #4
 8005934:	d109      	bne.n	800594a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005936:	4b09      	ldr	r3, [pc, #36]	; (800595c <FLASH_SetErrorCode+0x5c>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2201      	movs	r2, #1
 800593c:	431a      	orrs	r2, r3
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <FLASH_SetErrorCode+0x5c>)
 8005940:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	4313      	orrs	r3, r2
 8005948:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800594a:	4b03      	ldr	r3, [pc, #12]	; (8005958 <FLASH_SetErrorCode+0x58>)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
}  
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40022000 	.word	0x40022000
 800595c:	20000e98 	.word	0x20000e98

08005960 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005960:	b5b0      	push	{r4, r5, r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800596a:	230f      	movs	r3, #15
 800596c:	18fb      	adds	r3, r7, r3
 800596e:	2201      	movs	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005976:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <HAL_FLASHEx_Erase+0xe0>)
 8005978:	7e1b      	ldrb	r3, [r3, #24]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_FLASHEx_Erase+0x22>
 800597e:	2302      	movs	r3, #2
 8005980:	e05a      	b.n	8005a38 <HAL_FLASHEx_Erase+0xd8>
 8005982:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_FLASHEx_Erase+0xe0>)
 8005984:	2201      	movs	r2, #1
 8005986:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d116      	bne.n	80059be <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005990:	4b2c      	ldr	r3, [pc, #176]	; (8005a44 <HAL_FLASHEx_Erase+0xe4>)
 8005992:	0018      	movs	r0, r3
 8005994:	f7ff ff74 	bl	8005880 <FLASH_WaitForLastOperation>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d147      	bne.n	8005a2c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800599c:	f000 f856 	bl	8005a4c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a0:	230f      	movs	r3, #15
 80059a2:	18fc      	adds	r4, r7, r3
 80059a4:	4b27      	ldr	r3, [pc, #156]	; (8005a44 <HAL_FLASHEx_Erase+0xe4>)
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7ff ff6a 	bl	8005880 <FLASH_WaitForLastOperation>
 80059ac:	0003      	movs	r3, r0
 80059ae:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <HAL_FLASHEx_Erase+0xe8>)
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <HAL_FLASHEx_Erase+0xe8>)
 80059b6:	2104      	movs	r1, #4
 80059b8:	438a      	bics	r2, r1
 80059ba:	611a      	str	r2, [r3, #16]
 80059bc:	e036      	b.n	8005a2c <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80059be:	4b21      	ldr	r3, [pc, #132]	; (8005a44 <HAL_FLASHEx_Erase+0xe4>)
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff ff5d 	bl	8005880 <FLASH_WaitForLastOperation>
 80059c6:	1e03      	subs	r3, r0, #0
 80059c8:	d130      	bne.n	8005a2c <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	4252      	negs	r2, r2
 80059d0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	e01f      	b.n	8005a1a <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	0018      	movs	r0, r3
 80059de:	f000 f84d 	bl	8005a7c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059e2:	250f      	movs	r5, #15
 80059e4:	197c      	adds	r4, r7, r5
 80059e6:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <HAL_FLASHEx_Erase+0xe4>)
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff ff49 	bl	8005880 <FLASH_WaitForLastOperation>
 80059ee:	0003      	movs	r3, r0
 80059f0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <HAL_FLASHEx_Erase+0xe8>)
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_FLASHEx_Erase+0xe8>)
 80059f8:	2102      	movs	r1, #2
 80059fa:	438a      	bics	r2, r1
 80059fc:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80059fe:	197b      	adds	r3, r7, r5
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	601a      	str	r2, [r3, #0]
            break;
 8005a0c:	e00e      	b.n	8005a2c <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2280      	movs	r2, #128	; 0x80
 8005a12:	00d2      	lsls	r2, r2, #3
 8005a14:	4694      	mov	ip, r2
 8005a16:	4463      	add	r3, ip
 8005a18:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	029a      	lsls	r2, r3, #10
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3d6      	bcc.n	80059da <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a2c:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_FLASHEx_Erase+0xe0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	761a      	strb	r2, [r3, #24]

  return status;
 8005a32:	230f      	movs	r3, #15
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	781b      	ldrb	r3, [r3, #0]
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a40:	20000e98 	.word	0x20000e98
 8005a44:	0000c350 	.word	0x0000c350
 8005a48:	40022000 	.word	0x40022000

08005a4c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a50:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <FLASH_MassErase+0x28>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <FLASH_MassErase+0x2c>)
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <FLASH_MassErase+0x2c>)
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <FLASH_MassErase+0x2c>)
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <FLASH_MassErase+0x2c>)
 8005a68:	2140      	movs	r1, #64	; 0x40
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	611a      	str	r2, [r3, #16]
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000e98 	.word	0x20000e98
 8005a78:	40022000 	.word	0x40022000

08005a7c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <FLASH_PageErase+0x34>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <FLASH_PageErase+0x38>)
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <FLASH_PageErase+0x38>)
 8005a90:	2102      	movs	r1, #2
 8005a92:	430a      	orrs	r2, r1
 8005a94:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <FLASH_PageErase+0x38>)
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005a9c:	4b05      	ldr	r3, [pc, #20]	; (8005ab4 <FLASH_PageErase+0x38>)
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <FLASH_PageErase+0x38>)
 8005aa2:	2140      	movs	r1, #64	; 0x40
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000e98 	.word	0x20000e98
 8005ab4:	40022000 	.word	0x40022000

08005ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ac6:	e14f      	b.n	8005d68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2101      	movs	r1, #1
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4091      	lsls	r1, r2
 8005ad2:	000a      	movs	r2, r1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d100      	bne.n	8005ae0 <HAL_GPIO_Init+0x28>
 8005ade:	e140      	b.n	8005d62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d005      	beq.n	8005af8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2203      	movs	r2, #3
 8005af2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d130      	bne.n	8005b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	2203      	movs	r2, #3
 8005b04:	409a      	lsls	r2, r3
 8005b06:	0013      	movs	r3, r2
 8005b08:	43da      	mvns	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	409a      	lsls	r2, r3
 8005b1a:	0013      	movs	r3, r2
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b2e:	2201      	movs	r2, #1
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	409a      	lsls	r2, r3
 8005b34:	0013      	movs	r3, r2
 8005b36:	43da      	mvns	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	2201      	movs	r2, #1
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	0013      	movs	r3, r2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2203      	movs	r2, #3
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d017      	beq.n	8005b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	2203      	movs	r2, #3
 8005b72:	409a      	lsls	r2, r3
 8005b74:	0013      	movs	r3, r2
 8005b76:	43da      	mvns	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	0013      	movs	r3, r2
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d123      	bne.n	8005bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	08da      	lsrs	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3208      	adds	r2, #8
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	58d3      	ldr	r3, [r2, r3]
 8005bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2207      	movs	r2, #7
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	220f      	movs	r2, #15
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	0013      	movs	r3, r2
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2107      	movs	r1, #7
 8005bce:	400b      	ands	r3, r1
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	0013      	movs	r3, r2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	08da      	lsrs	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3208      	adds	r2, #8
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	0013      	movs	r3, r2
 8005bfa:	43da      	mvns	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2203      	movs	r2, #3
 8005c08:	401a      	ands	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	0013      	movs	r3, r2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	23c0      	movs	r3, #192	; 0xc0
 8005c24:	029b      	lsls	r3, r3, #10
 8005c26:	4013      	ands	r3, r2
 8005c28:	d100      	bne.n	8005c2c <HAL_GPIO_Init+0x174>
 8005c2a:	e09a      	b.n	8005d62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c2c:	4b54      	ldr	r3, [pc, #336]	; (8005d80 <HAL_GPIO_Init+0x2c8>)
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	4b53      	ldr	r3, [pc, #332]	; (8005d80 <HAL_GPIO_Init+0x2c8>)
 8005c32:	2101      	movs	r1, #1
 8005c34:	430a      	orrs	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]
 8005c38:	4b51      	ldr	r3, [pc, #324]	; (8005d80 <HAL_GPIO_Init+0x2c8>)
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005c44:	4a4f      	ldr	r2, [pc, #316]	; (8005d84 <HAL_GPIO_Init+0x2cc>)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	089b      	lsrs	r3, r3, #2
 8005c4a:	3302      	adds	r3, #2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	589b      	ldr	r3, [r3, r2]
 8005c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2203      	movs	r2, #3
 8005c56:	4013      	ands	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	220f      	movs	r2, #15
 8005c5c:	409a      	lsls	r2, r3
 8005c5e:	0013      	movs	r3, r2
 8005c60:	43da      	mvns	r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4013      	ands	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	2390      	movs	r3, #144	; 0x90
 8005c6c:	05db      	lsls	r3, r3, #23
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d013      	beq.n	8005c9a <HAL_GPIO_Init+0x1e2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a44      	ldr	r2, [pc, #272]	; (8005d88 <HAL_GPIO_Init+0x2d0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00d      	beq.n	8005c96 <HAL_GPIO_Init+0x1de>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a43      	ldr	r2, [pc, #268]	; (8005d8c <HAL_GPIO_Init+0x2d4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <HAL_GPIO_Init+0x1da>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a42      	ldr	r2, [pc, #264]	; (8005d90 <HAL_GPIO_Init+0x2d8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_GPIO_Init+0x1d6>
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e006      	b.n	8005c9c <HAL_GPIO_Init+0x1e4>
 8005c8e:	2305      	movs	r3, #5
 8005c90:	e004      	b.n	8005c9c <HAL_GPIO_Init+0x1e4>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e002      	b.n	8005c9c <HAL_GPIO_Init+0x1e4>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_GPIO_Init+0x1e4>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	2103      	movs	r1, #3
 8005ca0:	400a      	ands	r2, r1
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	4093      	lsls	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005cac:	4935      	ldr	r1, [pc, #212]	; (8005d84 <HAL_GPIO_Init+0x2cc>)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	43da      	mvns	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	035b      	lsls	r3, r3, #13
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d003      	beq.n	8005cde <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005cde:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	43da      	mvns	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	039b      	lsls	r3, r3, #14
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d08:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	43da      	mvns	r2, r3
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	4013      	ands	r3, r2
 8005d28:	d003      	beq.n	8005d32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005d32:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005d38:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4013      	ands	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	025b      	lsls	r3, r3, #9
 8005d50:	4013      	ands	r3, r2
 8005d52:	d003      	beq.n	8005d5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_GPIO_Init+0x2dc>)
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3301      	adds	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	40da      	lsrs	r2, r3
 8005d70:	1e13      	subs	r3, r2, #0
 8005d72:	d000      	beq.n	8005d76 <HAL_GPIO_Init+0x2be>
 8005d74:	e6a8      	b.n	8005ac8 <HAL_GPIO_Init+0x10>
  } 
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b006      	add	sp, #24
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	40010000 	.word	0x40010000
 8005d88:	48000400 	.word	0x48000400
 8005d8c:	48000800 	.word	0x48000800
 8005d90:	48000c00 	.word	0x48000c00
 8005d94:	40010400 	.word	0x40010400

08005d98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005da6:	e0b1      	b.n	8005f0c <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005da8:	2201      	movs	r2, #1
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	409a      	lsls	r2, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d100      	bne.n	8005dbc <HAL_GPIO_DeInit+0x24>
 8005dba:	e0a4      	b.n	8005f06 <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005dbc:	4a59      	ldr	r2, [pc, #356]	; (8005f24 <HAL_GPIO_DeInit+0x18c>)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	589b      	ldr	r3, [r3, r2]
 8005dc8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	4013      	ands	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	220f      	movs	r2, #15
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	2390      	movs	r3, #144	; 0x90
 8005de0:	05db      	lsls	r3, r3, #23
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d013      	beq.n	8005e0e <HAL_GPIO_DeInit+0x76>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a4f      	ldr	r2, [pc, #316]	; (8005f28 <HAL_GPIO_DeInit+0x190>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00d      	beq.n	8005e0a <HAL_GPIO_DeInit+0x72>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a4e      	ldr	r2, [pc, #312]	; (8005f2c <HAL_GPIO_DeInit+0x194>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <HAL_GPIO_DeInit+0x6e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a4d      	ldr	r2, [pc, #308]	; (8005f30 <HAL_GPIO_DeInit+0x198>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_GPIO_DeInit+0x6a>
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e006      	b.n	8005e10 <HAL_GPIO_DeInit+0x78>
 8005e02:	2305      	movs	r3, #5
 8005e04:	e004      	b.n	8005e10 <HAL_GPIO_DeInit+0x78>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e002      	b.n	8005e10 <HAL_GPIO_DeInit+0x78>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <HAL_GPIO_DeInit+0x78>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	2103      	movs	r1, #3
 8005e14:	400a      	ands	r2, r1
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	4093      	lsls	r3, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d132      	bne.n	8005e86 <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e20:	4b44      	ldr	r3, [pc, #272]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	43d9      	mvns	r1, r3
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e2a:	400a      	ands	r2, r1
 8005e2c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e2e:	4b41      	ldr	r3, [pc, #260]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	43d9      	mvns	r1, r3
 8005e36:	4b3f      	ldr	r3, [pc, #252]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e3c:	4b3d      	ldr	r3, [pc, #244]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	43d9      	mvns	r1, r3
 8005e44:	4b3b      	ldr	r3, [pc, #236]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e46:	400a      	ands	r2, r1
 8005e48:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e4a:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	43d9      	mvns	r1, r3
 8005e52:	4b38      	ldr	r3, [pc, #224]	; (8005f34 <HAL_GPIO_DeInit+0x19c>)
 8005e54:	400a      	ands	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	409a      	lsls	r2, r3
 8005e64:	0013      	movs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005e68:	4a2e      	ldr	r2, [pc, #184]	; (8005f24 <HAL_GPIO_DeInit+0x18c>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	589a      	ldr	r2, [r3, r2]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	482a      	ldr	r0, [pc, #168]	; (8005f24 <HAL_GPIO_DeInit+0x18c>)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	400a      	ands	r2, r1
 8005e80:	3302      	adds	r3, #2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	0052      	lsls	r2, r2, #1
 8005e8e:	2103      	movs	r1, #3
 8005e90:	4091      	lsls	r1, r2
 8005e92:	000a      	movs	r2, r1
 8005e94:	43d2      	mvns	r2, r2
 8005e96:	401a      	ands	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	08da      	lsrs	r2, r3, #3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3208      	adds	r2, #8
 8005ea4:	0092      	lsls	r2, r2, #2
 8005ea6:	58d3      	ldr	r3, [r2, r3]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	2107      	movs	r1, #7
 8005eac:	400a      	ands	r2, r1
 8005eae:	0092      	lsls	r2, r2, #2
 8005eb0:	210f      	movs	r1, #15
 8005eb2:	4091      	lsls	r1, r2
 8005eb4:	000a      	movs	r2, r1
 8005eb6:	43d1      	mvns	r1, r2
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	08d2      	lsrs	r2, r2, #3
 8005ebc:	4019      	ands	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3208      	adds	r2, #8
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	0052      	lsls	r2, r2, #1
 8005ece:	2103      	movs	r1, #3
 8005ed0:	4091      	lsls	r1, r2
 8005ed2:	000a      	movs	r2, r1
 8005ed4:	43d2      	mvns	r2, r2
 8005ed6:	401a      	ands	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4091      	lsls	r1, r2
 8005ee6:	000a      	movs	r2, r1
 8005ee8:	43d2      	mvns	r2, r2
 8005eea:	401a      	ands	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	0052      	lsls	r2, r2, #1
 8005ef8:	2103      	movs	r1, #3
 8005efa:	4091      	lsls	r1, r2
 8005efc:	000a      	movs	r2, r1
 8005efe:	43d2      	mvns	r2, r2
 8005f00:	401a      	ands	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	609a      	str	r2, [r3, #8]

    }

    position++;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	40da      	lsrs	r2, r3
 8005f12:	1e13      	subs	r3, r2, #0
 8005f14:	d000      	beq.n	8005f18 <HAL_GPIO_DeInit+0x180>
 8005f16:	e747      	b.n	8005da8 <HAL_GPIO_DeInit+0x10>
  }
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b006      	add	sp, #24
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	40010000 	.word	0x40010000
 8005f28:	48000400 	.word	0x48000400
 8005f2c:	48000800 	.word	0x48000800
 8005f30:	48000c00 	.word	0x48000c00
 8005f34:	40010400 	.word	0x40010400

08005f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	000a      	movs	r2, r1
 8005f42:	1cbb      	adds	r3, r7, #2
 8005f44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	1cba      	adds	r2, r7, #2
 8005f4c:	8812      	ldrh	r2, [r2, #0]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005f52:	230f      	movs	r3, #15
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	2201      	movs	r2, #1
 8005f58:	701a      	strb	r2, [r3, #0]
 8005f5a:	e003      	b.n	8005f64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f5c:	230f      	movs	r3, #15
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005f64:	230f      	movs	r3, #15
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	781b      	ldrb	r3, [r3, #0]
  }
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b004      	add	sp, #16
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	0008      	movs	r0, r1
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	1cbb      	adds	r3, r7, #2
 8005f80:	1c02      	adds	r2, r0, #0
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	1c7b      	adds	r3, r7, #1
 8005f86:	1c0a      	adds	r2, r1, #0
 8005f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f8a:	1c7b      	adds	r3, r7, #1
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f92:	1cbb      	adds	r3, r7, #2
 8005f94:	881a      	ldrh	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f9a:	e003      	b.n	8005fa4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f9c:	1cbb      	adds	r3, r7, #2
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	000a      	movs	r2, r1
 8005fb6:	1cbb      	adds	r3, r7, #2
 8005fb8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fc0:	1cbb      	adds	r3, r7, #2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	041a      	lsls	r2, r3, #16
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	1cb9      	adds	r1, r7, #2
 8005fd0:	8809      	ldrh	r1, [r1, #0]
 8005fd2:	400b      	ands	r3, r1
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	619a      	str	r2, [r3, #24]
}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b004      	add	sp, #16
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e301      	b.n	80065fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d100      	bne.n	8006002 <HAL_RCC_OscConfig+0x1e>
 8006000:	e08d      	b.n	800611e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006002:	4bc3      	ldr	r3, [pc, #780]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	220c      	movs	r2, #12
 8006008:	4013      	ands	r3, r2
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00e      	beq.n	800602c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800600e:	4bc0      	ldr	r3, [pc, #768]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	220c      	movs	r2, #12
 8006014:	4013      	ands	r3, r2
 8006016:	2b08      	cmp	r3, #8
 8006018:	d116      	bne.n	8006048 <HAL_RCC_OscConfig+0x64>
 800601a:	4bbd      	ldr	r3, [pc, #756]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	401a      	ands	r2, r3
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	025b      	lsls	r3, r3, #9
 8006028:	429a      	cmp	r2, r3
 800602a:	d10d      	bne.n	8006048 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602c:	4bb8      	ldr	r3, [pc, #736]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	029b      	lsls	r3, r3, #10
 8006034:	4013      	ands	r3, r2
 8006036:	d100      	bne.n	800603a <HAL_RCC_OscConfig+0x56>
 8006038:	e070      	b.n	800611c <HAL_RCC_OscConfig+0x138>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d000      	beq.n	8006044 <HAL_RCC_OscConfig+0x60>
 8006042:	e06b      	b.n	800611c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e2d8      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d107      	bne.n	8006060 <HAL_RCC_OscConfig+0x7c>
 8006050:	4baf      	ldr	r3, [pc, #700]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	4bae      	ldr	r3, [pc, #696]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	0249      	lsls	r1, r1, #9
 800605a:	430a      	orrs	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e02f      	b.n	80060c0 <HAL_RCC_OscConfig+0xdc>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10c      	bne.n	8006082 <HAL_RCC_OscConfig+0x9e>
 8006068:	4ba9      	ldr	r3, [pc, #676]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	4ba8      	ldr	r3, [pc, #672]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800606e:	49a9      	ldr	r1, [pc, #676]	; (8006314 <HAL_RCC_OscConfig+0x330>)
 8006070:	400a      	ands	r2, r1
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	4ba6      	ldr	r3, [pc, #664]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4ba5      	ldr	r3, [pc, #660]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800607a:	49a7      	ldr	r1, [pc, #668]	; (8006318 <HAL_RCC_OscConfig+0x334>)
 800607c:	400a      	ands	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e01e      	b.n	80060c0 <HAL_RCC_OscConfig+0xdc>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b05      	cmp	r3, #5
 8006088:	d10e      	bne.n	80060a8 <HAL_RCC_OscConfig+0xc4>
 800608a:	4ba1      	ldr	r3, [pc, #644]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4ba0      	ldr	r3, [pc, #640]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006090:	2180      	movs	r1, #128	; 0x80
 8006092:	02c9      	lsls	r1, r1, #11
 8006094:	430a      	orrs	r2, r1
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	4b9d      	ldr	r3, [pc, #628]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b9c      	ldr	r3, [pc, #624]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	0249      	lsls	r1, r1, #9
 80060a2:	430a      	orrs	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e00b      	b.n	80060c0 <HAL_RCC_OscConfig+0xdc>
 80060a8:	4b99      	ldr	r3, [pc, #612]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b98      	ldr	r3, [pc, #608]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80060ae:	4999      	ldr	r1, [pc, #612]	; (8006314 <HAL_RCC_OscConfig+0x330>)
 80060b0:	400a      	ands	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	4b96      	ldr	r3, [pc, #600]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b95      	ldr	r3, [pc, #596]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80060ba:	4997      	ldr	r1, [pc, #604]	; (8006318 <HAL_RCC_OscConfig+0x334>)
 80060bc:	400a      	ands	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d014      	beq.n	80060f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c8:	f7ff f81e 	bl	8005108 <HAL_GetTick>
 80060cc:	0003      	movs	r3, r0
 80060ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d2:	f7ff f819 	bl	8005108 <HAL_GetTick>
 80060d6:	0002      	movs	r2, r0
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b64      	cmp	r3, #100	; 0x64
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e28a      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e4:	4b8a      	ldr	r3, [pc, #552]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	4013      	ands	r3, r2
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCC_OscConfig+0xee>
 80060f0:	e015      	b.n	800611e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f2:	f7ff f809 	bl	8005108 <HAL_GetTick>
 80060f6:	0003      	movs	r3, r0
 80060f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060fc:	f7ff f804 	bl	8005108 <HAL_GetTick>
 8006100:	0002      	movs	r2, r0
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e275      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800610e:	4b80      	ldr	r3, [pc, #512]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	029b      	lsls	r3, r3, #10
 8006116:	4013      	ands	r3, r2
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0x118>
 800611a:	e000      	b.n	800611e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2202      	movs	r2, #2
 8006124:	4013      	ands	r3, r2
 8006126:	d100      	bne.n	800612a <HAL_RCC_OscConfig+0x146>
 8006128:	e069      	b.n	80061fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800612a:	4b79      	ldr	r3, [pc, #484]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	220c      	movs	r2, #12
 8006130:	4013      	ands	r3, r2
 8006132:	d00b      	beq.n	800614c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006134:	4b76      	ldr	r3, [pc, #472]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	220c      	movs	r2, #12
 800613a:	4013      	ands	r3, r2
 800613c:	2b08      	cmp	r3, #8
 800613e:	d11c      	bne.n	800617a <HAL_RCC_OscConfig+0x196>
 8006140:	4b73      	ldr	r3, [pc, #460]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	025b      	lsls	r3, r3, #9
 8006148:	4013      	ands	r3, r2
 800614a:	d116      	bne.n	800617a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614c:	4b70      	ldr	r3, [pc, #448]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2202      	movs	r2, #2
 8006152:	4013      	ands	r3, r2
 8006154:	d005      	beq.n	8006162 <HAL_RCC_OscConfig+0x17e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d001      	beq.n	8006162 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e24b      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006162:	4b6b      	ldr	r3, [pc, #428]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	22f8      	movs	r2, #248	; 0xf8
 8006168:	4393      	bics	r3, r2
 800616a:	0019      	movs	r1, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	00da      	lsls	r2, r3, #3
 8006172:	4b67      	ldr	r3, [pc, #412]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006178:	e041      	b.n	80061fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d024      	beq.n	80061cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006182:	4b63      	ldr	r3, [pc, #396]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4b62      	ldr	r3, [pc, #392]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006188:	2101      	movs	r1, #1
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618e:	f7fe ffbb 	bl	8005108 <HAL_GetTick>
 8006192:	0003      	movs	r3, r0
 8006194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006198:	f7fe ffb6 	bl	8005108 <HAL_GetTick>
 800619c:	0002      	movs	r2, r0
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e227      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061aa:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d0f1      	beq.n	8006198 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b4:	4b56      	ldr	r3, [pc, #344]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	22f8      	movs	r2, #248	; 0xf8
 80061ba:	4393      	bics	r3, r2
 80061bc:	0019      	movs	r1, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	4b52      	ldr	r3, [pc, #328]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e018      	b.n	80061fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4b4f      	ldr	r3, [pc, #316]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061d2:	2101      	movs	r1, #1
 80061d4:	438a      	bics	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fe ff96 	bl	8005108 <HAL_GetTick>
 80061dc:	0003      	movs	r3, r0
 80061de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e2:	f7fe ff91 	bl	8005108 <HAL_GetTick>
 80061e6:	0002      	movs	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e202      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f4:	4b46      	ldr	r3, [pc, #280]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2202      	movs	r2, #2
 80061fa:	4013      	ands	r3, r2
 80061fc:	d1f1      	bne.n	80061e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2208      	movs	r2, #8
 8006204:	4013      	ands	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d019      	beq.n	8006244 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006210:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006214:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006216:	2101      	movs	r1, #1
 8006218:	430a      	orrs	r2, r1
 800621a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621c:	f7fe ff74 	bl	8005108 <HAL_GetTick>
 8006220:	0003      	movs	r3, r0
 8006222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006224:	e008      	b.n	8006238 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006226:	f7fe ff6f 	bl	8005108 <HAL_GetTick>
 800622a:	0002      	movs	r2, r0
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e1e0      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006238:	4b35      	ldr	r3, [pc, #212]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2202      	movs	r2, #2
 800623e:	4013      	ands	r3, r2
 8006240:	d0f1      	beq.n	8006226 <HAL_RCC_OscConfig+0x242>
 8006242:	e018      	b.n	8006276 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006244:	4b32      	ldr	r3, [pc, #200]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006248:	4b31      	ldr	r3, [pc, #196]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800624a:	2101      	movs	r1, #1
 800624c:	438a      	bics	r2, r1
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006250:	f7fe ff5a 	bl	8005108 <HAL_GetTick>
 8006254:	0003      	movs	r3, r0
 8006256:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800625a:	f7fe ff55 	bl	8005108 <HAL_GetTick>
 800625e:	0002      	movs	r2, r0
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e1c6      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2202      	movs	r2, #2
 8006272:	4013      	ands	r3, r2
 8006274:	d1f1      	bne.n	800625a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2204      	movs	r2, #4
 800627c:	4013      	ands	r3, r2
 800627e:	d100      	bne.n	8006282 <HAL_RCC_OscConfig+0x29e>
 8006280:	e0b4      	b.n	80063ec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006282:	201f      	movs	r0, #31
 8006284:	183b      	adds	r3, r7, r0
 8006286:	2200      	movs	r2, #0
 8006288:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	055b      	lsls	r3, r3, #21
 8006292:	4013      	ands	r3, r2
 8006294:	d110      	bne.n	80062b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	4b1e      	ldr	r3, [pc, #120]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 800629c:	2180      	movs	r1, #128	; 0x80
 800629e:	0549      	lsls	r1, r1, #21
 80062a0:	430a      	orrs	r2, r1
 80062a2:	61da      	str	r2, [r3, #28]
 80062a4:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	055b      	lsls	r3, r3, #21
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062b2:	183b      	adds	r3, r7, r0
 80062b4:	2201      	movs	r2, #1
 80062b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <HAL_RCC_OscConfig+0x338>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4013      	ands	r3, r2
 80062c2:	d11a      	bne.n	80062fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c4:	4b15      	ldr	r3, [pc, #84]	; (800631c <HAL_RCC_OscConfig+0x338>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4b14      	ldr	r3, [pc, #80]	; (800631c <HAL_RCC_OscConfig+0x338>)
 80062ca:	2180      	movs	r1, #128	; 0x80
 80062cc:	0049      	lsls	r1, r1, #1
 80062ce:	430a      	orrs	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d2:	f7fe ff19 	bl	8005108 <HAL_GetTick>
 80062d6:	0003      	movs	r3, r0
 80062d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062dc:	f7fe ff14 	bl	8005108 <HAL_GetTick>
 80062e0:	0002      	movs	r2, r0
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e185      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_RCC_OscConfig+0x338>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4013      	ands	r3, r2
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d10e      	bne.n	8006320 <HAL_RCC_OscConfig+0x33c>
 8006302:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	4b02      	ldr	r3, [pc, #8]	; (8006310 <HAL_RCC_OscConfig+0x32c>)
 8006308:	2101      	movs	r1, #1
 800630a:	430a      	orrs	r2, r1
 800630c:	621a      	str	r2, [r3, #32]
 800630e:	e035      	b.n	800637c <HAL_RCC_OscConfig+0x398>
 8006310:	40021000 	.word	0x40021000
 8006314:	fffeffff 	.word	0xfffeffff
 8006318:	fffbffff 	.word	0xfffbffff
 800631c:	40007000 	.word	0x40007000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10c      	bne.n	8006342 <HAL_RCC_OscConfig+0x35e>
 8006328:	4bb6      	ldr	r3, [pc, #728]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800632a:	6a1a      	ldr	r2, [r3, #32]
 800632c:	4bb5      	ldr	r3, [pc, #724]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800632e:	2101      	movs	r1, #1
 8006330:	438a      	bics	r2, r1
 8006332:	621a      	str	r2, [r3, #32]
 8006334:	4bb3      	ldr	r3, [pc, #716]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	4bb2      	ldr	r3, [pc, #712]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800633a:	2104      	movs	r1, #4
 800633c:	438a      	bics	r2, r1
 800633e:	621a      	str	r2, [r3, #32]
 8006340:	e01c      	b.n	800637c <HAL_RCC_OscConfig+0x398>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b05      	cmp	r3, #5
 8006348:	d10c      	bne.n	8006364 <HAL_RCC_OscConfig+0x380>
 800634a:	4bae      	ldr	r3, [pc, #696]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	4bad      	ldr	r3, [pc, #692]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006350:	2104      	movs	r1, #4
 8006352:	430a      	orrs	r2, r1
 8006354:	621a      	str	r2, [r3, #32]
 8006356:	4bab      	ldr	r3, [pc, #684]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	4baa      	ldr	r3, [pc, #680]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800635c:	2101      	movs	r1, #1
 800635e:	430a      	orrs	r2, r1
 8006360:	621a      	str	r2, [r3, #32]
 8006362:	e00b      	b.n	800637c <HAL_RCC_OscConfig+0x398>
 8006364:	4ba7      	ldr	r3, [pc, #668]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	4ba6      	ldr	r3, [pc, #664]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800636a:	2101      	movs	r1, #1
 800636c:	438a      	bics	r2, r1
 800636e:	621a      	str	r2, [r3, #32]
 8006370:	4ba4      	ldr	r3, [pc, #656]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	4ba3      	ldr	r3, [pc, #652]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006376:	2104      	movs	r1, #4
 8006378:	438a      	bics	r2, r1
 800637a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d014      	beq.n	80063ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006384:	f7fe fec0 	bl	8005108 <HAL_GetTick>
 8006388:	0003      	movs	r3, r0
 800638a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638c:	e009      	b.n	80063a2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fe febb 	bl	8005108 <HAL_GetTick>
 8006392:	0002      	movs	r2, r0
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	4a9b      	ldr	r2, [pc, #620]	; (8006608 <HAL_RCC_OscConfig+0x624>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e12b      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063a2:	4b98      	ldr	r3, [pc, #608]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	2202      	movs	r2, #2
 80063a8:	4013      	ands	r3, r2
 80063aa:	d0f0      	beq.n	800638e <HAL_RCC_OscConfig+0x3aa>
 80063ac:	e013      	b.n	80063d6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ae:	f7fe feab 	bl	8005108 <HAL_GetTick>
 80063b2:	0003      	movs	r3, r0
 80063b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	e009      	b.n	80063cc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b8:	f7fe fea6 	bl	8005108 <HAL_GetTick>
 80063bc:	0002      	movs	r2, r0
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	4a91      	ldr	r2, [pc, #580]	; (8006608 <HAL_RCC_OscConfig+0x624>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e116      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063cc:	4b8d      	ldr	r3, [pc, #564]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	2202      	movs	r2, #2
 80063d2:	4013      	ands	r3, r2
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063d6:	231f      	movs	r3, #31
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d105      	bne.n	80063ec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e0:	4b88      	ldr	r3, [pc, #544]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	4b87      	ldr	r3, [pc, #540]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80063e6:	4989      	ldr	r1, [pc, #548]	; (800660c <HAL_RCC_OscConfig+0x628>)
 80063e8:	400a      	ands	r2, r1
 80063ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2210      	movs	r2, #16
 80063f2:	4013      	ands	r3, r2
 80063f4:	d063      	beq.n	80064be <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d12a      	bne.n	8006454 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063fe:	4b81      	ldr	r3, [pc, #516]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006402:	4b80      	ldr	r3, [pc, #512]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006404:	2104      	movs	r1, #4
 8006406:	430a      	orrs	r2, r1
 8006408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800640a:	4b7e      	ldr	r3, [pc, #504]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800640c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640e:	4b7d      	ldr	r3, [pc, #500]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006410:	2101      	movs	r1, #1
 8006412:	430a      	orrs	r2, r1
 8006414:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006416:	f7fe fe77 	bl	8005108 <HAL_GetTick>
 800641a:	0003      	movs	r3, r0
 800641c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006420:	f7fe fe72 	bl	8005108 <HAL_GetTick>
 8006424:	0002      	movs	r2, r0
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e0e3      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006432:	4b74      	ldr	r3, [pc, #464]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	2202      	movs	r2, #2
 8006438:	4013      	ands	r3, r2
 800643a:	d0f1      	beq.n	8006420 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800643c:	4b71      	ldr	r3, [pc, #452]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	22f8      	movs	r2, #248	; 0xf8
 8006442:	4393      	bics	r3, r2
 8006444:	0019      	movs	r1, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	00da      	lsls	r2, r3, #3
 800644c:	4b6d      	ldr	r3, [pc, #436]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800644e:	430a      	orrs	r2, r1
 8006450:	635a      	str	r2, [r3, #52]	; 0x34
 8006452:	e034      	b.n	80064be <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	3305      	adds	r3, #5
 800645a:	d111      	bne.n	8006480 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800645c:	4b69      	ldr	r3, [pc, #420]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800645e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006460:	4b68      	ldr	r3, [pc, #416]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006462:	2104      	movs	r1, #4
 8006464:	438a      	bics	r2, r1
 8006466:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006468:	4b66      	ldr	r3, [pc, #408]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646c:	22f8      	movs	r2, #248	; 0xf8
 800646e:	4393      	bics	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	00da      	lsls	r2, r3, #3
 8006478:	4b62      	ldr	r3, [pc, #392]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800647a:	430a      	orrs	r2, r1
 800647c:	635a      	str	r2, [r3, #52]	; 0x34
 800647e:	e01e      	b.n	80064be <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006480:	4b60      	ldr	r3, [pc, #384]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006484:	4b5f      	ldr	r3, [pc, #380]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006486:	2104      	movs	r1, #4
 8006488:	430a      	orrs	r2, r1
 800648a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800648c:	4b5d      	ldr	r3, [pc, #372]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006490:	4b5c      	ldr	r3, [pc, #368]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006492:	2101      	movs	r1, #1
 8006494:	438a      	bics	r2, r1
 8006496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006498:	f7fe fe36 	bl	8005108 <HAL_GetTick>
 800649c:	0003      	movs	r3, r0
 800649e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80064a2:	f7fe fe31 	bl	8005108 <HAL_GetTick>
 80064a6:	0002      	movs	r2, r0
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e0a2      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80064b4:	4b53      	ldr	r3, [pc, #332]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	2202      	movs	r2, #2
 80064ba:	4013      	ands	r3, r2
 80064bc:	d1f1      	bne.n	80064a2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d100      	bne.n	80064c8 <HAL_RCC_OscConfig+0x4e4>
 80064c6:	e097      	b.n	80065f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064c8:	4b4e      	ldr	r3, [pc, #312]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	220c      	movs	r2, #12
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d100      	bne.n	80064d6 <HAL_RCC_OscConfig+0x4f2>
 80064d4:	e06b      	b.n	80065ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d14c      	bne.n	8006578 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064de:	4b49      	ldr	r3, [pc, #292]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b48      	ldr	r3, [pc, #288]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80064e4:	494a      	ldr	r1, [pc, #296]	; (8006610 <HAL_RCC_OscConfig+0x62c>)
 80064e6:	400a      	ands	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fe fe0d 	bl	8005108 <HAL_GetTick>
 80064ee:	0003      	movs	r3, r0
 80064f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064f4:	f7fe fe08 	bl	8005108 <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e079      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006506:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	049b      	lsls	r3, r3, #18
 800650e:	4013      	ands	r3, r2
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006512:	4b3c      	ldr	r3, [pc, #240]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	220f      	movs	r2, #15
 8006518:	4393      	bics	r3, r2
 800651a:	0019      	movs	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	4b38      	ldr	r3, [pc, #224]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006522:	430a      	orrs	r2, r1
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c
 8006526:	4b37      	ldr	r3, [pc, #220]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4a3a      	ldr	r2, [pc, #232]	; (8006614 <HAL_RCC_OscConfig+0x630>)
 800652c:	4013      	ands	r3, r2
 800652e:	0019      	movs	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	431a      	orrs	r2, r3
 800653a:	4b32      	ldr	r3, [pc, #200]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800653c:	430a      	orrs	r2, r1
 800653e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006540:	4b30      	ldr	r3, [pc, #192]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	0449      	lsls	r1, r1, #17
 800654a:	430a      	orrs	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800654e:	f7fe fddb 	bl	8005108 <HAL_GetTick>
 8006552:	0003      	movs	r3, r0
 8006554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006558:	f7fe fdd6 	bl	8005108 <HAL_GetTick>
 800655c:	0002      	movs	r2, r0
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e047      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	049b      	lsls	r3, r3, #18
 8006572:	4013      	ands	r3, r2
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x574>
 8006576:	e03f      	b.n	80065f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006578:	4b22      	ldr	r3, [pc, #136]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b21      	ldr	r3, [pc, #132]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 800657e:	4924      	ldr	r1, [pc, #144]	; (8006610 <HAL_RCC_OscConfig+0x62c>)
 8006580:	400a      	ands	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fe fdc0 	bl	8005108 <HAL_GetTick>
 8006588:	0003      	movs	r3, r0
 800658a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658e:	f7fe fdbb 	bl	8005108 <HAL_GetTick>
 8006592:	0002      	movs	r2, r0
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e02c      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a0:	4b18      	ldr	r3, [pc, #96]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	049b      	lsls	r3, r3, #18
 80065a8:	4013      	ands	r3, r2
 80065aa:	d1f0      	bne.n	800658e <HAL_RCC_OscConfig+0x5aa>
 80065ac:	e024      	b.n	80065f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e01f      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <HAL_RCC_OscConfig+0x620>)
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	2380      	movs	r3, #128	; 0x80
 80065ca:	025b      	lsls	r3, r3, #9
 80065cc:	401a      	ands	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d10e      	bne.n	80065f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	220f      	movs	r2, #15
 80065da:	401a      	ands	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d107      	bne.n	80065f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	23f0      	movs	r3, #240	; 0xf0
 80065e8:	039b      	lsls	r3, r3, #14
 80065ea:	401a      	ands	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	0018      	movs	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b008      	add	sp, #32
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	40021000 	.word	0x40021000
 8006608:	00001388 	.word	0x00001388
 800660c:	efffffff 	.word	0xefffffff
 8006610:	feffffff 	.word	0xfeffffff
 8006614:	ffc2ffff 	.word	0xffc2ffff

08006618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0b3      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800662c:	4b5b      	ldr	r3, [pc, #364]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2201      	movs	r2, #1
 8006632:	4013      	ands	r3, r2
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d911      	bls.n	800665e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663a:	4b58      	ldr	r3, [pc, #352]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	4393      	bics	r3, r2
 8006642:	0019      	movs	r1, r3
 8006644:	4b55      	ldr	r3, [pc, #340]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664c:	4b53      	ldr	r3, [pc, #332]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2201      	movs	r2, #1
 8006652:	4013      	ands	r3, r2
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d001      	beq.n	800665e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e09a      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2202      	movs	r2, #2
 8006664:	4013      	ands	r3, r2
 8006666:	d015      	beq.n	8006694 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2204      	movs	r2, #4
 800666e:	4013      	ands	r3, r2
 8006670:	d006      	beq.n	8006680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006672:	4b4b      	ldr	r3, [pc, #300]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	4b4a      	ldr	r3, [pc, #296]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006678:	21e0      	movs	r1, #224	; 0xe0
 800667a:	00c9      	lsls	r1, r1, #3
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006680:	4b47      	ldr	r3, [pc, #284]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	22f0      	movs	r2, #240	; 0xf0
 8006686:	4393      	bics	r3, r2
 8006688:	0019      	movs	r1, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	4b44      	ldr	r3, [pc, #272]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	d040      	beq.n	8006720 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d107      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	2380      	movs	r3, #128	; 0x80
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	4013      	ands	r3, r2
 80066b0:	d114      	bne.n	80066dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e06e      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d107      	bne.n	80066ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066be:	4b38      	ldr	r3, [pc, #224]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	2380      	movs	r3, #128	; 0x80
 80066c4:	049b      	lsls	r3, r3, #18
 80066c6:	4013      	ands	r3, r2
 80066c8:	d108      	bne.n	80066dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e062      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ce:	4b34      	ldr	r3, [pc, #208]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2202      	movs	r2, #2
 80066d4:	4013      	ands	r3, r2
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e05b      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066dc:	4b30      	ldr	r3, [pc, #192]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2203      	movs	r2, #3
 80066e2:	4393      	bics	r3, r2
 80066e4:	0019      	movs	r1, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066f0:	f7fe fd0a 	bl	8005108 <HAL_GetTick>
 80066f4:	0003      	movs	r3, r0
 80066f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f8:	e009      	b.n	800670e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066fa:	f7fe fd05 	bl	8005108 <HAL_GetTick>
 80066fe:	0002      	movs	r2, r0
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <HAL_RCC_ClockConfig+0x18c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d901      	bls.n	800670e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e042      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670e:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	220c      	movs	r2, #12
 8006714:	401a      	ands	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	429a      	cmp	r2, r3
 800671e:	d1ec      	bne.n	80066fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006720:	4b1e      	ldr	r3, [pc, #120]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2201      	movs	r2, #1
 8006726:	4013      	ands	r3, r2
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d211      	bcs.n	8006752 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b1b      	ldr	r3, [pc, #108]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2201      	movs	r2, #1
 8006734:	4393      	bics	r3, r2
 8006736:	0019      	movs	r1, r3
 8006738:	4b18      	ldr	r3, [pc, #96]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <HAL_RCC_ClockConfig+0x184>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d001      	beq.n	8006752 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e020      	b.n	8006794 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2204      	movs	r2, #4
 8006758:	4013      	ands	r3, r2
 800675a:	d009      	beq.n	8006770 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800675c:	4b10      	ldr	r3, [pc, #64]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a11      	ldr	r2, [pc, #68]	; (80067a8 <HAL_RCC_ClockConfig+0x190>)
 8006762:	4013      	ands	r3, r2
 8006764:	0019      	movs	r1, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006770:	f000 f820 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8006774:	0001      	movs	r1, r0
 8006776:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <HAL_RCC_ClockConfig+0x188>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	091b      	lsrs	r3, r3, #4
 800677c:	220f      	movs	r2, #15
 800677e:	4013      	ands	r3, r2
 8006780:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <HAL_RCC_ClockConfig+0x194>)
 8006782:	5cd3      	ldrb	r3, [r2, r3]
 8006784:	000a      	movs	r2, r1
 8006786:	40da      	lsrs	r2, r3
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_RCC_ClockConfig+0x198>)
 800678a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800678c:	2003      	movs	r0, #3
 800678e:	f7fe fc75 	bl	800507c <HAL_InitTick>
  
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	b004      	add	sp, #16
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40022000 	.word	0x40022000
 80067a0:	40021000 	.word	0x40021000
 80067a4:	00001388 	.word	0x00001388
 80067a8:	fffff8ff 	.word	0xfffff8ff
 80067ac:	0800b6f0 	.word	0x0800b6f0
 80067b0:	20000068 	.word	0x20000068

080067b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80067ce:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	220c      	movs	r2, #12
 80067d8:	4013      	ands	r3, r2
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d002      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x30>
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d003      	beq.n	80067ea <HAL_RCC_GetSysClockFreq+0x36>
 80067e2:	e02c      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067e4:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <HAL_RCC_GetSysClockFreq+0xa0>)
 80067e6:	613b      	str	r3, [r7, #16]
      break;
 80067e8:	e02c      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0c9b      	lsrs	r3, r3, #18
 80067ee:	220f      	movs	r2, #15
 80067f0:	4013      	ands	r3, r2
 80067f2:	4a19      	ldr	r2, [pc, #100]	; (8006858 <HAL_RCC_GetSysClockFreq+0xa4>)
 80067f4:	5cd3      	ldrb	r3, [r2, r3]
 80067f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	220f      	movs	r2, #15
 80067fe:	4013      	ands	r3, r2
 8006800:	4a16      	ldr	r2, [pc, #88]	; (800685c <HAL_RCC_GetSysClockFreq+0xa8>)
 8006802:	5cd3      	ldrb	r3, [r2, r3]
 8006804:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	025b      	lsls	r3, r3, #9
 800680c:	4013      	ands	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4810      	ldr	r0, [pc, #64]	; (8006854 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006814:	f7f9 fc9e 	bl	8000154 <__udivsi3>
 8006818:	0003      	movs	r3, r0
 800681a:	001a      	movs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4353      	muls	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e009      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	000a      	movs	r2, r1
 8006828:	0152      	lsls	r2, r2, #5
 800682a:	1a52      	subs	r2, r2, r1
 800682c:	0193      	lsls	r3, r2, #6
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	185b      	adds	r3, r3, r1
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	613b      	str	r3, [r7, #16]
      break;
 800683c:	e002      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006840:	613b      	str	r3, [r7, #16]
      break;
 8006842:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006844:	693b      	ldr	r3, [r7, #16]
}
 8006846:	0018      	movs	r0, r3
 8006848:	46bd      	mov	sp, r7
 800684a:	b006      	add	sp, #24
 800684c:	bd80      	pop	{r7, pc}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	40021000 	.word	0x40021000
 8006854:	007a1200 	.word	0x007a1200
 8006858:	0800b91c 	.word	0x0800b91c
 800685c:	0800b92c 	.word	0x0800b92c

08006860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <HAL_RCC_GetHCLKFreq+0x10>)
 8006866:	681b      	ldr	r3, [r3, #0]
}
 8006868:	0018      	movs	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	20000068 	.word	0x20000068

08006874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006878:	f7ff fff2 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 800687c:	0001      	movs	r1, r0
 800687e:	4b06      	ldr	r3, [pc, #24]	; (8006898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	2207      	movs	r2, #7
 8006886:	4013      	ands	r3, r2
 8006888:	4a04      	ldr	r2, [pc, #16]	; (800689c <HAL_RCC_GetPCLK1Freq+0x28>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	40d9      	lsrs	r1, r3
 800688e:	000b      	movs	r3, r1
}    
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	40021000 	.word	0x40021000
 800689c:	0800b700 	.word	0x0800b700

080068a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	2380      	movs	r3, #128	; 0x80
 80068b6:	025b      	lsls	r3, r3, #9
 80068b8:	4013      	ands	r3, r2
 80068ba:	d100      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80068bc:	e08e      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80068be:	2017      	movs	r0, #23
 80068c0:	183b      	adds	r3, r7, r0
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068c6:	4b5f      	ldr	r3, [pc, #380]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	055b      	lsls	r3, r3, #21
 80068ce:	4013      	ands	r3, r2
 80068d0:	d110      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	4b5c      	ldr	r3, [pc, #368]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	4b5b      	ldr	r3, [pc, #364]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068d8:	2180      	movs	r1, #128	; 0x80
 80068da:	0549      	lsls	r1, r1, #21
 80068dc:	430a      	orrs	r2, r1
 80068de:	61da      	str	r2, [r3, #28]
 80068e0:	4b58      	ldr	r3, [pc, #352]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	2380      	movs	r3, #128	; 0x80
 80068e6:	055b      	lsls	r3, r3, #21
 80068e8:	4013      	ands	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
 80068ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f4:	4b54      	ldr	r3, [pc, #336]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4013      	ands	r3, r2
 80068fe:	d11a      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006900:	4b51      	ldr	r3, [pc, #324]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	0049      	lsls	r1, r1, #1
 800690a:	430a      	orrs	r2, r1
 800690c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800690e:	f7fe fbfb 	bl	8005108 <HAL_GetTick>
 8006912:	0003      	movs	r3, r0
 8006914:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006916:	e008      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fe fbf6 	bl	8005108 <HAL_GetTick>
 800691c:	0002      	movs	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e087      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692a:	4b47      	ldr	r3, [pc, #284]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	2380      	movs	r3, #128	; 0x80
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4013      	ands	r3, r2
 8006934:	d0f0      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006936:	4b43      	ldr	r3, [pc, #268]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	23c0      	movs	r3, #192	; 0xc0
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4013      	ands	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d034      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	23c0      	movs	r3, #192	; 0xc0
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4013      	ands	r3, r2
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	429a      	cmp	r2, r3
 8006956:	d02c      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006958:	4b3a      	ldr	r3, [pc, #232]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	4a3b      	ldr	r2, [pc, #236]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800695e:	4013      	ands	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006962:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006964:	6a1a      	ldr	r2, [r3, #32]
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	0249      	lsls	r1, r1, #9
 800696c:	430a      	orrs	r2, r1
 800696e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006972:	6a1a      	ldr	r2, [r3, #32]
 8006974:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006976:	4936      	ldr	r1, [pc, #216]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006978:	400a      	ands	r2, r1
 800697a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800697c:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	4013      	ands	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fe fbbd 	bl	8005108 <HAL_GetTick>
 800698e:	0003      	movs	r3, r0
 8006990:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006992:	e009      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006994:	f7fe fbb8 	bl	8005108 <HAL_GetTick>
 8006998:	0002      	movs	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e048      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a8:	4b26      	ldr	r3, [pc, #152]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	2202      	movs	r2, #2
 80069ae:	4013      	ands	r3, r2
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069c2:	430a      	orrs	r2, r1
 80069c4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069c6:	2317      	movs	r3, #23
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d105      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d0:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069d2:	69da      	ldr	r2, [r3, #28]
 80069d4:	4b1b      	ldr	r3, [pc, #108]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069d6:	4920      	ldr	r1, [pc, #128]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d8:	400a      	ands	r2, r1
 80069da:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e6:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	2203      	movs	r2, #3
 80069ec:	4393      	bics	r3, r2
 80069ee:	0019      	movs	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80069f6:	430a      	orrs	r2, r1
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2220      	movs	r2, #32
 8006a00:	4013      	ands	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a04:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2210      	movs	r2, #16
 8006a0a:	4393      	bics	r3, r2
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a14:	430a      	orrs	r2, r1
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4013      	ands	r3, r2
 8006a22:	d009      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a24:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	2240      	movs	r2, #64	; 0x40
 8006a2a:	4393      	bics	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8006a34:	430a      	orrs	r2, r1
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b006      	add	sp, #24
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40007000 	.word	0x40007000
 8006a4c:	fffffcff 	.word	0xfffffcff
 8006a50:	fffeffff 	.word	0xfffeffff
 8006a54:	00001388 	.word	0x00001388
 8006a58:	efffffff 	.word	0xefffffff

08006a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e044      	b.n	8006af8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d107      	bne.n	8006a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2278      	movs	r2, #120	; 0x78
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7fd ff85 	bl	8004990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2224      	movs	r2, #36	; 0x24
 8006a8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2101      	movs	r1, #1
 8006a98:	438a      	bics	r2, r1
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 fbfe 	bl	80072a0 <UART_SetConfig>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e024      	b.n	8006af8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 fd31 	bl	8007520 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	490d      	ldr	r1, [pc, #52]	; (8006b00 <HAL_UART_Init+0xa4>)
 8006aca:	400a      	ands	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	212a      	movs	r1, #42	; 0x2a
 8006ada:	438a      	bics	r2, r1
 8006adc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	430a      	orrs	r2, r1
 8006aec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 fdc9 	bl	8007688 <UART_CheckIdleState>
 8006af6:	0003      	movs	r3, r0
}
 8006af8:	0018      	movs	r0, r3
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b002      	add	sp, #8
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	ffffb7ff 	.word	0xffffb7ff

08006b04 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e030      	b.n	8006b78 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2101      	movs	r1, #1
 8006b28:	438a      	bics	r2, r1
 8006b2a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f7fd ffa2 	bl	8004a90 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2284      	movs	r2, #132	; 0x84
 8006b50:	2100      	movs	r1, #0
 8006b52:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2280      	movs	r2, #128	; 0x80
 8006b5e:	2100      	movs	r1, #0
 8006b60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2278      	movs	r2, #120	; 0x78
 8006b72:	2100      	movs	r1, #0
 8006b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	1dbb      	adds	r3, r7, #6
 8006b8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d000      	beq.n	8006b9a <HAL_UART_Transmit+0x1a>
 8006b98:	e08d      	b.n	8006cb6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_UART_Transmit+0x28>
 8006ba0:	1dbb      	adds	r3, r7, #6
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e085      	b.n	8006cb8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	2380      	movs	r3, #128	; 0x80
 8006bb2:	015b      	lsls	r3, r3, #5
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d109      	bne.n	8006bcc <HAL_UART_Transmit+0x4c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d105      	bne.n	8006bcc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d001      	beq.n	8006bcc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e075      	b.n	8006cb8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2284      	movs	r2, #132	; 0x84
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2221      	movs	r2, #33	; 0x21
 8006bd8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bda:	f7fe fa95 	bl	8005108 <HAL_GetTick>
 8006bde:	0003      	movs	r3, r0
 8006be0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1dba      	adds	r2, r7, #6
 8006be6:	2150      	movs	r1, #80	; 0x50
 8006be8:	8812      	ldrh	r2, [r2, #0]
 8006bea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1dba      	adds	r2, r7, #6
 8006bf0:	2152      	movs	r1, #82	; 0x52
 8006bf2:	8812      	ldrh	r2, [r2, #0]
 8006bf4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	015b      	lsls	r3, r3, #5
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d108      	bne.n	8006c14 <HAL_UART_Transmit+0x94>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e003      	b.n	8006c1c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c1c:	e030      	b.n	8006c80 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	0013      	movs	r3, r2
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	f000 fdd4 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 8006c30:	1e03      	subs	r3, r0, #0
 8006c32:	d004      	beq.n	8006c3e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e03c      	b.n	8006cb8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	881a      	ldrh	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	05d2      	lsls	r2, r2, #23
 8006c4e:	0dd2      	lsrs	r2, r2, #23
 8006c50:	b292      	uxth	r2, r2
 8006c52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	3302      	adds	r3, #2
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e008      	b.n	8006c6e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	781a      	ldrb	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b292      	uxth	r2, r2
 8006c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2252      	movs	r2, #82	; 0x52
 8006c72:	5a9b      	ldrh	r3, [r3, r2]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b299      	uxth	r1, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2252      	movs	r2, #82	; 0x52
 8006c7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2252      	movs	r2, #82	; 0x52
 8006c84:	5a9b      	ldrh	r3, [r3, r2]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1c8      	bne.n	8006c1e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	0013      	movs	r3, r2
 8006c96:	2200      	movs	r2, #0
 8006c98:	2140      	movs	r1, #64	; 0x40
 8006c9a:	f000 fd9d 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d004      	beq.n	8006cac <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e005      	b.n	8006cb8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e000      	b.n	8006cb8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
  }
}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b008      	add	sp, #32
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b0ab      	sub	sp, #172	; 0xac
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	22a4      	movs	r2, #164	; 0xa4
 8006cd0:	18b9      	adds	r1, r7, r2
 8006cd2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	20a0      	movs	r0, #160	; 0xa0
 8006cdc:	1839      	adds	r1, r7, r0
 8006cde:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	219c      	movs	r1, #156	; 0x9c
 8006ce8:	1879      	adds	r1, r7, r1
 8006cea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cec:	0011      	movs	r1, r2
 8006cee:	18bb      	adds	r3, r7, r2
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a99      	ldr	r2, [pc, #612]	; (8006f58 <HAL_UART_IRQHandler+0x298>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2298      	movs	r2, #152	; 0x98
 8006cf8:	18bc      	adds	r4, r7, r2
 8006cfa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006cfc:	18bb      	adds	r3, r7, r2
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d114      	bne.n	8006d2e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d04:	187b      	adds	r3, r7, r1
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d00f      	beq.n	8006d2e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2220      	movs	r2, #32
 8006d14:	4013      	ands	r3, r2
 8006d16:	d00a      	beq.n	8006d2e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d100      	bne.n	8006d22 <HAL_UART_IRQHandler+0x62>
 8006d20:	e29e      	b.n	8007260 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	0010      	movs	r0, r2
 8006d2a:	4798      	blx	r3
      }
      return;
 8006d2c:	e298      	b.n	8007260 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d2e:	2398      	movs	r3, #152	; 0x98
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d100      	bne.n	8006d3a <HAL_UART_IRQHandler+0x7a>
 8006d38:	e114      	b.n	8006f64 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d3a:	239c      	movs	r3, #156	; 0x9c
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	4013      	ands	r3, r2
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d46:	23a0      	movs	r3, #160	; 0xa0
 8006d48:	18fb      	adds	r3, r7, r3
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a83      	ldr	r2, [pc, #524]	; (8006f5c <HAL_UART_IRQHandler+0x29c>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d100      	bne.n	8006d54 <HAL_UART_IRQHandler+0x94>
 8006d52:	e107      	b.n	8006f64 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d54:	23a4      	movs	r3, #164	; 0xa4
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d012      	beq.n	8006d86 <HAL_UART_IRQHandler+0xc6>
 8006d60:	23a0      	movs	r3, #160	; 0xa0
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	2380      	movs	r3, #128	; 0x80
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2201      	movs	r2, #1
 8006d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2284      	movs	r2, #132	; 0x84
 8006d7a:	589b      	ldr	r3, [r3, r2]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2184      	movs	r1, #132	; 0x84
 8006d84:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d86:	23a4      	movs	r3, #164	; 0xa4
 8006d88:	18fb      	adds	r3, r7, r3
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d011      	beq.n	8006db6 <HAL_UART_IRQHandler+0xf6>
 8006d92:	239c      	movs	r3, #156	; 0x9c
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2202      	movs	r2, #2
 8006da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2284      	movs	r2, #132	; 0x84
 8006daa:	589b      	ldr	r3, [r3, r2]
 8006dac:	2204      	movs	r2, #4
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2184      	movs	r1, #132	; 0x84
 8006db4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db6:	23a4      	movs	r3, #164	; 0xa4
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d011      	beq.n	8006de6 <HAL_UART_IRQHandler+0x126>
 8006dc2:	239c      	movs	r3, #156	; 0x9c
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	4013      	ands	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2204      	movs	r2, #4
 8006dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2284      	movs	r2, #132	; 0x84
 8006dda:	589b      	ldr	r3, [r3, r2]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2184      	movs	r1, #132	; 0x84
 8006de4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006de6:	23a4      	movs	r3, #164	; 0xa4
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2208      	movs	r2, #8
 8006dee:	4013      	ands	r3, r2
 8006df0:	d017      	beq.n	8006e22 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006df2:	23a0      	movs	r3, #160	; 0xa0
 8006df4:	18fb      	adds	r3, r7, r3
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d105      	bne.n	8006e0a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006dfe:	239c      	movs	r3, #156	; 0x9c
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e08:	d00b      	beq.n	8006e22 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2208      	movs	r2, #8
 8006e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2284      	movs	r2, #132	; 0x84
 8006e16:	589b      	ldr	r3, [r3, r2]
 8006e18:	2208      	movs	r2, #8
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2184      	movs	r1, #132	; 0x84
 8006e20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e22:	23a4      	movs	r3, #164	; 0xa4
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	2380      	movs	r3, #128	; 0x80
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d013      	beq.n	8006e58 <HAL_UART_IRQHandler+0x198>
 8006e30:	23a0      	movs	r3, #160	; 0xa0
 8006e32:	18fb      	adds	r3, r7, r3
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	04db      	lsls	r3, r3, #19
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d00c      	beq.n	8006e58 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	0112      	lsls	r2, r2, #4
 8006e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2284      	movs	r2, #132	; 0x84
 8006e4c:	589b      	ldr	r3, [r3, r2]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2184      	movs	r1, #132	; 0x84
 8006e56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2284      	movs	r2, #132	; 0x84
 8006e5c:	589b      	ldr	r3, [r3, r2]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d100      	bne.n	8006e64 <HAL_UART_IRQHandler+0x1a4>
 8006e62:	e1ff      	b.n	8007264 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e64:	23a4      	movs	r3, #164	; 0xa4
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e70:	23a0      	movs	r3, #160	; 0xa0
 8006e72:	18fb      	adds	r3, r7, r3
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2220      	movs	r2, #32
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2284      	movs	r2, #132	; 0x84
 8006e92:	589b      	ldr	r3, [r3, r2]
 8006e94:	2194      	movs	r1, #148	; 0x94
 8006e96:	187a      	adds	r2, r7, r1
 8006e98:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	2b40      	cmp	r3, #64	; 0x40
 8006ea6:	d004      	beq.n	8006eb2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ea8:	187b      	adds	r3, r7, r1
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2228      	movs	r2, #40	; 0x28
 8006eae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eb0:	d047      	beq.n	8006f42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f000 fdbd 	bl	8007a34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b40      	cmp	r3, #64	; 0x40
 8006ec6:	d137      	bne.n	8006f38 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed0:	2090      	movs	r0, #144	; 0x90
 8006ed2:	183a      	adds	r2, r7, r0
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006edc:	f383 8810 	msr	PRIMASK, r3
}
 8006ee0:	46c0      	nop			; (mov r8, r8)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2140      	movs	r1, #64	; 0x40
 8006eee:	438a      	bics	r2, r1
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	183b      	adds	r3, r7, r0
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d012      	beq.n	8006f2e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <HAL_UART_IRQHandler+0x2a0>)
 8006f0e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7fe fb40 	bl	800559a <HAL_DMA_Abort_IT>
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d01a      	beq.n	8006f54 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f28:	0018      	movs	r0, r3
 8006f2a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	e012      	b.n	8006f54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	0018      	movs	r0, r3
 8006f32:	f7fd fc99 	bl	8004868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f36:	e00d      	b.n	8006f54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7fd fc94 	bl	8004868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e008      	b.n	8006f54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	0018      	movs	r0, r3
 8006f46:	f7fd fc8f 	bl	8004868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2284      	movs	r2, #132	; 0x84
 8006f4e:	2100      	movs	r1, #0
 8006f50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006f52:	e187      	b.n	8007264 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f54:	46c0      	nop			; (mov r8, r8)
    return;
 8006f56:	e185      	b.n	8007264 <HAL_UART_IRQHandler+0x5a4>
 8006f58:	0000080f 	.word	0x0000080f
 8006f5c:	04000120 	.word	0x04000120
 8006f60:	08007cef 	.word	0x08007cef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d000      	beq.n	8006f6e <HAL_UART_IRQHandler+0x2ae>
 8006f6c:	e139      	b.n	80071e2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f6e:	23a4      	movs	r3, #164	; 0xa4
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2210      	movs	r2, #16
 8006f76:	4013      	ands	r3, r2
 8006f78:	d100      	bne.n	8006f7c <HAL_UART_IRQHandler+0x2bc>
 8006f7a:	e132      	b.n	80071e2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f7c:	23a0      	movs	r3, #160	; 0xa0
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2210      	movs	r2, #16
 8006f84:	4013      	ands	r3, r2
 8006f86:	d100      	bne.n	8006f8a <HAL_UART_IRQHandler+0x2ca>
 8006f88:	e12b      	b.n	80071e2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2210      	movs	r2, #16
 8006f90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2240      	movs	r2, #64	; 0x40
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	d000      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x2e2>
 8006fa0:	e09f      	b.n	80070e2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	217e      	movs	r1, #126	; 0x7e
 8006fac:	187b      	adds	r3, r7, r1
 8006fae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006fb0:	187b      	adds	r3, r7, r1
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d100      	bne.n	8006fba <HAL_UART_IRQHandler+0x2fa>
 8006fb8:	e156      	b.n	8007268 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2258      	movs	r2, #88	; 0x58
 8006fbe:	5a9b      	ldrh	r3, [r3, r2]
 8006fc0:	187a      	adds	r2, r7, r1
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d300      	bcc.n	8006fca <HAL_UART_IRQHandler+0x30a>
 8006fc8:	e14e      	b.n	8007268 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	187a      	adds	r2, r7, r1
 8006fce:	215a      	movs	r1, #90	; 0x5a
 8006fd0:	8812      	ldrh	r2, [r2, #0]
 8006fd2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d06f      	beq.n	80070be <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fde:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fe6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fe8:	2301      	movs	r3, #1
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	f383 8810 	msr	PRIMASK, r3
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	499e      	ldr	r1, [pc, #632]	; (8007278 <HAL_UART_IRQHandler+0x5b8>)
 8007000:	400a      	ands	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007010:	f3ef 8310 	mrs	r3, PRIMASK
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007018:	677b      	str	r3, [r7, #116]	; 0x74
 800701a:	2301      	movs	r3, #1
 800701c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	f383 8810 	msr	PRIMASK, r3
}
 8007024:	46c0      	nop			; (mov r8, r8)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2101      	movs	r1, #1
 8007032:	438a      	bics	r2, r1
 8007034:	609a      	str	r2, [r3, #8]
 8007036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007038:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703c:	f383 8810 	msr	PRIMASK, r3
}
 8007040:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007042:	f3ef 8310 	mrs	r3, PRIMASK
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007048:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800704a:	673b      	str	r3, [r7, #112]	; 0x70
 800704c:	2301      	movs	r3, #1
 800704e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007052:	f383 8810 	msr	PRIMASK, r3
}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2140      	movs	r1, #64	; 0x40
 8007064:	438a      	bics	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800706a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706e:	f383 8810 	msr	PRIMASK, r3
}
 8007072:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2280      	movs	r2, #128	; 0x80
 8007078:	2120      	movs	r1, #32
 800707a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007082:	f3ef 8310 	mrs	r3, PRIMASK
 8007086:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007088:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800708c:	2301      	movs	r3, #1
 800708e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007092:	f383 8810 	msr	PRIMASK, r3
}
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2110      	movs	r1, #16
 80070a4:	438a      	bics	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ae:	f383 8810 	msr	PRIMASK, r3
}
 80070b2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7fe fa36 	bl	800552a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2258      	movs	r2, #88	; 0x58
 80070c8:	5a9a      	ldrh	r2, [r3, r2]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	215a      	movs	r1, #90	; 0x5a
 80070ce:	5a5b      	ldrh	r3, [r3, r1]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	0011      	movs	r1, r2
 80070da:	0018      	movs	r0, r3
 80070dc:	f7fd fbcc 	bl	8004878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e0:	e0c2      	b.n	8007268 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2258      	movs	r2, #88	; 0x58
 80070e6:	5a99      	ldrh	r1, [r3, r2]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	225a      	movs	r2, #90	; 0x5a
 80070ec:	5a9b      	ldrh	r3, [r3, r2]
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	208e      	movs	r0, #142	; 0x8e
 80070f2:	183b      	adds	r3, r7, r0
 80070f4:	1a8a      	subs	r2, r1, r2
 80070f6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	225a      	movs	r2, #90	; 0x5a
 80070fc:	5a9b      	ldrh	r3, [r3, r2]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d100      	bne.n	8007106 <HAL_UART_IRQHandler+0x446>
 8007104:	e0b2      	b.n	800726c <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8007106:	183b      	adds	r3, r7, r0
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d100      	bne.n	8007110 <HAL_UART_IRQHandler+0x450>
 800710e:	e0ad      	b.n	800726c <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007110:	f3ef 8310 	mrs	r3, PRIMASK
 8007114:	60fb      	str	r3, [r7, #12]
  return(result);
 8007116:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007118:	2488      	movs	r4, #136	; 0x88
 800711a:	193a      	adds	r2, r7, r4
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	2301      	movs	r3, #1
 8007120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f383 8810 	msr	PRIMASK, r3
}
 8007128:	46c0      	nop			; (mov r8, r8)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4951      	ldr	r1, [pc, #324]	; (800727c <HAL_UART_IRQHandler+0x5bc>)
 8007136:	400a      	ands	r2, r1
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	193b      	adds	r3, r7, r4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f383 8810 	msr	PRIMASK, r3
}
 8007146:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8310 	mrs	r3, PRIMASK
 800714c:	61bb      	str	r3, [r7, #24]
  return(result);
 800714e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007150:	2484      	movs	r4, #132	; 0x84
 8007152:	193a      	adds	r2, r7, r4
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	2301      	movs	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f383 8810 	msr	PRIMASK, r3
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2101      	movs	r1, #1
 800716e:	438a      	bics	r2, r1
 8007170:	609a      	str	r2, [r3, #8]
 8007172:	193b      	adds	r3, r7, r4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	2120      	movs	r1, #32
 8007186:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007194:	f3ef 8310 	mrs	r3, PRIMASK
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	2480      	movs	r4, #128	; 0x80
 800719e:	193a      	adds	r2, r7, r4
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	2301      	movs	r3, #1
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f383 8810 	msr	PRIMASK, r3
}
 80071ac:	46c0      	nop			; (mov r8, r8)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2110      	movs	r1, #16
 80071ba:	438a      	bics	r2, r1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	193b      	adds	r3, r7, r4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	f383 8810 	msr	PRIMASK, r3
}
 80071ca:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071d2:	183b      	adds	r3, r7, r0
 80071d4:	881a      	ldrh	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0011      	movs	r1, r2
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fd fb4c 	bl	8004878 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071e0:	e044      	b.n	800726c <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071e2:	23a4      	movs	r3, #164	; 0xa4
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	; 0x80
 80071ea:	035b      	lsls	r3, r3, #13
 80071ec:	4013      	ands	r3, r2
 80071ee:	d010      	beq.n	8007212 <HAL_UART_IRQHandler+0x552>
 80071f0:	239c      	movs	r3, #156	; 0x9c
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	03db      	lsls	r3, r3, #15
 80071fa:	4013      	ands	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2280      	movs	r2, #128	; 0x80
 8007204:	0352      	lsls	r2, r2, #13
 8007206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	0018      	movs	r0, r3
 800720c:	f000 fdb1 	bl	8007d72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007210:	e02f      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007212:	23a4      	movs	r3, #164	; 0xa4
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2280      	movs	r2, #128	; 0x80
 800721a:	4013      	ands	r3, r2
 800721c:	d00f      	beq.n	800723e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800721e:	23a0      	movs	r3, #160	; 0xa0
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2280      	movs	r2, #128	; 0x80
 8007226:	4013      	ands	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01e      	beq.n	8007270 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	0010      	movs	r0, r2
 800723a:	4798      	blx	r3
    }
    return;
 800723c:	e018      	b.n	8007270 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800723e:	23a4      	movs	r3, #164	; 0xa4
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2240      	movs	r2, #64	; 0x40
 8007246:	4013      	ands	r3, r2
 8007248:	d013      	beq.n	8007272 <HAL_UART_IRQHandler+0x5b2>
 800724a:	23a0      	movs	r3, #160	; 0xa0
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	4013      	ands	r3, r2
 8007254:	d00d      	beq.n	8007272 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f000 fd5f 	bl	8007d1c <UART_EndTransmit_IT>
    return;
 800725e:	e008      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
      return;
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	e006      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
    return;
 8007264:	46c0      	nop			; (mov r8, r8)
 8007266:	e004      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
      return;
 8007268:	46c0      	nop			; (mov r8, r8)
 800726a:	e002      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
      return;
 800726c:	46c0      	nop			; (mov r8, r8)
 800726e:	e000      	b.n	8007272 <HAL_UART_IRQHandler+0x5b2>
    return;
 8007270:	46c0      	nop			; (mov r8, r8)
  }

}
 8007272:	46bd      	mov	sp, r7
 8007274:	b02b      	add	sp, #172	; 0xac
 8007276:	bd90      	pop	{r4, r7, pc}
 8007278:	fffffeff 	.word	0xfffffeff
 800727c:	fffffedf 	.word	0xfffffedf

08007280 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b002      	add	sp, #8
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007298:	46c0      	nop			; (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	b002      	add	sp, #8
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072a8:	231e      	movs	r3, #30
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a8d      	ldr	r2, [pc, #564]	; (8007504 <UART_SetConfig+0x264>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	0019      	movs	r1, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	430a      	orrs	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4a88      	ldr	r2, [pc, #544]	; (8007508 <UART_SetConfig+0x268>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	0019      	movs	r1, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4a7f      	ldr	r2, [pc, #508]	; (800750c <UART_SetConfig+0x26c>)
 800730e:	4013      	ands	r3, r2
 8007310:	0019      	movs	r1, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	430a      	orrs	r2, r1
 800731a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7b      	ldr	r2, [pc, #492]	; (8007510 <UART_SetConfig+0x270>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d127      	bne.n	8007376 <UART_SetConfig+0xd6>
 8007326:	4b7b      	ldr	r3, [pc, #492]	; (8007514 <UART_SetConfig+0x274>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	2203      	movs	r2, #3
 800732c:	4013      	ands	r3, r2
 800732e:	2b03      	cmp	r3, #3
 8007330:	d00d      	beq.n	800734e <UART_SetConfig+0xae>
 8007332:	d81b      	bhi.n	800736c <UART_SetConfig+0xcc>
 8007334:	2b02      	cmp	r3, #2
 8007336:	d014      	beq.n	8007362 <UART_SetConfig+0xc2>
 8007338:	d818      	bhi.n	800736c <UART_SetConfig+0xcc>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <UART_SetConfig+0xa4>
 800733e:	2b01      	cmp	r3, #1
 8007340:	d00a      	beq.n	8007358 <UART_SetConfig+0xb8>
 8007342:	e013      	b.n	800736c <UART_SetConfig+0xcc>
 8007344:	231f      	movs	r3, #31
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	e021      	b.n	8007392 <UART_SetConfig+0xf2>
 800734e:	231f      	movs	r3, #31
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	2202      	movs	r2, #2
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e01c      	b.n	8007392 <UART_SetConfig+0xf2>
 8007358:	231f      	movs	r3, #31
 800735a:	18fb      	adds	r3, r7, r3
 800735c:	2204      	movs	r2, #4
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e017      	b.n	8007392 <UART_SetConfig+0xf2>
 8007362:	231f      	movs	r3, #31
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	2208      	movs	r2, #8
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	e012      	b.n	8007392 <UART_SetConfig+0xf2>
 800736c:	231f      	movs	r3, #31
 800736e:	18fb      	adds	r3, r7, r3
 8007370:	2210      	movs	r2, #16
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0xf2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a67      	ldr	r2, [pc, #412]	; (8007518 <UART_SetConfig+0x278>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d104      	bne.n	800738a <UART_SetConfig+0xea>
 8007380:	231f      	movs	r3, #31
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e003      	b.n	8007392 <UART_SetConfig+0xf2>
 800738a:	231f      	movs	r3, #31
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2210      	movs	r2, #16
 8007390:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	2380      	movs	r3, #128	; 0x80
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	429a      	cmp	r2, r3
 800739c:	d15c      	bne.n	8007458 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800739e:	231f      	movs	r3, #31
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d015      	beq.n	80073d4 <UART_SetConfig+0x134>
 80073a8:	dc18      	bgt.n	80073dc <UART_SetConfig+0x13c>
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d00d      	beq.n	80073ca <UART_SetConfig+0x12a>
 80073ae:	dc15      	bgt.n	80073dc <UART_SetConfig+0x13c>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <UART_SetConfig+0x11a>
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d005      	beq.n	80073c4 <UART_SetConfig+0x124>
 80073b8:	e010      	b.n	80073dc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ba:	f7ff fa5b 	bl	8006874 <HAL_RCC_GetPCLK1Freq>
 80073be:	0003      	movs	r3, r0
 80073c0:	61bb      	str	r3, [r7, #24]
        break;
 80073c2:	e012      	b.n	80073ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c4:	4b55      	ldr	r3, [pc, #340]	; (800751c <UART_SetConfig+0x27c>)
 80073c6:	61bb      	str	r3, [r7, #24]
        break;
 80073c8:	e00f      	b.n	80073ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ca:	f7ff f9f3 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 80073ce:	0003      	movs	r3, r0
 80073d0:	61bb      	str	r3, [r7, #24]
        break;
 80073d2:	e00a      	b.n	80073ea <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	61bb      	str	r3, [r7, #24]
        break;
 80073da:	e006      	b.n	80073ea <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073e0:	231e      	movs	r3, #30
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	2201      	movs	r2, #1
 80073e6:	701a      	strb	r2, [r3, #0]
        break;
 80073e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d100      	bne.n	80073f2 <UART_SetConfig+0x152>
 80073f0:	e07a      	b.n	80074e8 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	005a      	lsls	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	085b      	lsrs	r3, r3, #1
 80073fc:	18d2      	adds	r2, r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	0019      	movs	r1, r3
 8007404:	0010      	movs	r0, r2
 8007406:	f7f8 fea5 	bl	8000154 <__udivsi3>
 800740a:	0003      	movs	r3, r0
 800740c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d91c      	bls.n	800744e <UART_SetConfig+0x1ae>
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	025b      	lsls	r3, r3, #9
 800741a:	429a      	cmp	r2, r3
 800741c:	d217      	bcs.n	800744e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	b29a      	uxth	r2, r3
 8007422:	200e      	movs	r0, #14
 8007424:	183b      	adds	r3, r7, r0
 8007426:	210f      	movs	r1, #15
 8007428:	438a      	bics	r2, r1
 800742a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	b29b      	uxth	r3, r3
 8007432:	2207      	movs	r2, #7
 8007434:	4013      	ands	r3, r2
 8007436:	b299      	uxth	r1, r3
 8007438:	183b      	adds	r3, r7, r0
 800743a:	183a      	adds	r2, r7, r0
 800743c:	8812      	ldrh	r2, [r2, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	183a      	adds	r2, r7, r0
 8007448:	8812      	ldrh	r2, [r2, #0]
 800744a:	60da      	str	r2, [r3, #12]
 800744c:	e04c      	b.n	80074e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800744e:	231e      	movs	r3, #30
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	2201      	movs	r2, #1
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e047      	b.n	80074e8 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007458:	231f      	movs	r3, #31
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b08      	cmp	r3, #8
 8007460:	d015      	beq.n	800748e <UART_SetConfig+0x1ee>
 8007462:	dc18      	bgt.n	8007496 <UART_SetConfig+0x1f6>
 8007464:	2b04      	cmp	r3, #4
 8007466:	d00d      	beq.n	8007484 <UART_SetConfig+0x1e4>
 8007468:	dc15      	bgt.n	8007496 <UART_SetConfig+0x1f6>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <UART_SetConfig+0x1d4>
 800746e:	2b02      	cmp	r3, #2
 8007470:	d005      	beq.n	800747e <UART_SetConfig+0x1de>
 8007472:	e010      	b.n	8007496 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007474:	f7ff f9fe 	bl	8006874 <HAL_RCC_GetPCLK1Freq>
 8007478:	0003      	movs	r3, r0
 800747a:	61bb      	str	r3, [r7, #24]
        break;
 800747c:	e012      	b.n	80074a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800747e:	4b27      	ldr	r3, [pc, #156]	; (800751c <UART_SetConfig+0x27c>)
 8007480:	61bb      	str	r3, [r7, #24]
        break;
 8007482:	e00f      	b.n	80074a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007484:	f7ff f996 	bl	80067b4 <HAL_RCC_GetSysClockFreq>
 8007488:	0003      	movs	r3, r0
 800748a:	61bb      	str	r3, [r7, #24]
        break;
 800748c:	e00a      	b.n	80074a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748e:	2380      	movs	r3, #128	; 0x80
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	61bb      	str	r3, [r7, #24]
        break;
 8007494:	e006      	b.n	80074a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800749a:	231e      	movs	r3, #30
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
        break;
 80074a2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d01e      	beq.n	80074e8 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	085a      	lsrs	r2, r3, #1
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	18d2      	adds	r2, r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	0019      	movs	r1, r3
 80074ba:	0010      	movs	r0, r2
 80074bc:	f7f8 fe4a 	bl	8000154 <__udivsi3>
 80074c0:	0003      	movs	r3, r0
 80074c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d90a      	bls.n	80074e0 <UART_SetConfig+0x240>
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	025b      	lsls	r3, r3, #9
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d205      	bcs.n	80074e0 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60da      	str	r2, [r3, #12]
 80074de:	e003      	b.n	80074e8 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80074e0:	231e      	movs	r3, #30
 80074e2:	18fb      	adds	r3, r7, r3
 80074e4:	2201      	movs	r2, #1
 80074e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80074f4:	231e      	movs	r3, #30
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	781b      	ldrb	r3, [r3, #0]
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b008      	add	sp, #32
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	ffff69f3 	.word	0xffff69f3
 8007508:	ffffcfff 	.word	0xffffcfff
 800750c:	fffff4ff 	.word	0xfffff4ff
 8007510:	40013800 	.word	0x40013800
 8007514:	40021000 	.word	0x40021000
 8007518:	40004400 	.word	0x40004400
 800751c:	007a1200 	.word	0x007a1200

08007520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2201      	movs	r2, #1
 800752e:	4013      	ands	r3, r2
 8007530:	d00b      	beq.n	800754a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	4a4a      	ldr	r2, [pc, #296]	; (8007664 <UART_AdvFeatureConfig+0x144>)
 800753a:	4013      	ands	r3, r2
 800753c:	0019      	movs	r1, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2202      	movs	r2, #2
 8007550:	4013      	ands	r3, r2
 8007552:	d00b      	beq.n	800756c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	4a43      	ldr	r2, [pc, #268]	; (8007668 <UART_AdvFeatureConfig+0x148>)
 800755c:	4013      	ands	r3, r2
 800755e:	0019      	movs	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2204      	movs	r2, #4
 8007572:	4013      	ands	r3, r2
 8007574:	d00b      	beq.n	800758e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a3b      	ldr	r2, [pc, #236]	; (800766c <UART_AdvFeatureConfig+0x14c>)
 800757e:	4013      	ands	r3, r2
 8007580:	0019      	movs	r1, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007592:	2208      	movs	r2, #8
 8007594:	4013      	ands	r3, r2
 8007596:	d00b      	beq.n	80075b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4a34      	ldr	r2, [pc, #208]	; (8007670 <UART_AdvFeatureConfig+0x150>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	0019      	movs	r1, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	2210      	movs	r2, #16
 80075b6:	4013      	ands	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <UART_AdvFeatureConfig+0x154>)
 80075c2:	4013      	ands	r3, r2
 80075c4:	0019      	movs	r1, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2220      	movs	r2, #32
 80075d8:	4013      	ands	r3, r2
 80075da:	d00b      	beq.n	80075f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	4a25      	ldr	r2, [pc, #148]	; (8007678 <UART_AdvFeatureConfig+0x158>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	0019      	movs	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	4013      	ands	r3, r2
 80075fc:	d01d      	beq.n	800763a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <UART_AdvFeatureConfig+0x15c>)
 8007606:	4013      	ands	r3, r2
 8007608:	0019      	movs	r1, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	035b      	lsls	r3, r3, #13
 800761e:	429a      	cmp	r2, r3
 8007620:	d10b      	bne.n	800763a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4a15      	ldr	r2, [pc, #84]	; (8007680 <UART_AdvFeatureConfig+0x160>)
 800762a:	4013      	ands	r3, r2
 800762c:	0019      	movs	r1, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	2280      	movs	r2, #128	; 0x80
 8007640:	4013      	ands	r3, r2
 8007642:	d00b      	beq.n	800765c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	4a0e      	ldr	r2, [pc, #56]	; (8007684 <UART_AdvFeatureConfig+0x164>)
 800764c:	4013      	ands	r3, r2
 800764e:	0019      	movs	r1, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }
}
 800765c:	46c0      	nop			; (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b002      	add	sp, #8
 8007662:	bd80      	pop	{r7, pc}
 8007664:	fffdffff 	.word	0xfffdffff
 8007668:	fffeffff 	.word	0xfffeffff
 800766c:	fffbffff 	.word	0xfffbffff
 8007670:	ffff7fff 	.word	0xffff7fff
 8007674:	ffffefff 	.word	0xffffefff
 8007678:	ffffdfff 	.word	0xffffdfff
 800767c:	ffefffff 	.word	0xffefffff
 8007680:	ff9fffff 	.word	0xff9fffff
 8007684:	fff7ffff 	.word	0xfff7ffff

08007688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b092      	sub	sp, #72	; 0x48
 800768c:	af02      	add	r7, sp, #8
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2284      	movs	r2, #132	; 0x84
 8007694:	2100      	movs	r1, #0
 8007696:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007698:	f7fd fd36 	bl	8005108 <HAL_GetTick>
 800769c:	0003      	movs	r3, r0
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2208      	movs	r2, #8
 80076a8:	4013      	ands	r3, r2
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d12c      	bne.n	8007708 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2280      	movs	r2, #128	; 0x80
 80076b2:	0391      	lsls	r1, r2, #14
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4a46      	ldr	r2, [pc, #280]	; (80077d0 <UART_CheckIdleState+0x148>)
 80076b8:	9200      	str	r2, [sp, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f000 f88c 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 80076c0:	1e03      	subs	r3, r0, #0
 80076c2:	d021      	beq.n	8007708 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c4:	f3ef 8310 	mrs	r3, PRIMASK
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ce:	2301      	movs	r3, #1
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	f383 8810 	msr	PRIMASK, r3
}
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2180      	movs	r1, #128	; 0x80
 80076e6:	438a      	bics	r2, r1
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	f383 8810 	msr	PRIMASK, r3
}
 80076f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2278      	movs	r2, #120	; 0x78
 8007700:	2100      	movs	r1, #0
 8007702:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e05f      	b.n	80077c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2204      	movs	r2, #4
 8007710:	4013      	ands	r3, r2
 8007712:	2b04      	cmp	r3, #4
 8007714:	d146      	bne.n	80077a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007718:	2280      	movs	r2, #128	; 0x80
 800771a:	03d1      	lsls	r1, r2, #15
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4a2c      	ldr	r2, [pc, #176]	; (80077d0 <UART_CheckIdleState+0x148>)
 8007720:	9200      	str	r2, [sp, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	f000 f858 	bl	80077d8 <UART_WaitOnFlagUntilTimeout>
 8007728:	1e03      	subs	r3, r0, #0
 800772a:	d03b      	beq.n	80077a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800772c:	f3ef 8310 	mrs	r3, PRIMASK
 8007730:	60fb      	str	r3, [r7, #12]
  return(result);
 8007732:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	2301      	movs	r3, #1
 8007738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f383 8810 	msr	PRIMASK, r3
}
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4921      	ldr	r1, [pc, #132]	; (80077d4 <UART_CheckIdleState+0x14c>)
 800774e:	400a      	ands	r2, r1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f383 8810 	msr	PRIMASK, r3
}
 800775c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775e:	f3ef 8310 	mrs	r3, PRIMASK
 8007762:	61bb      	str	r3, [r7, #24]
  return(result);
 8007764:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007766:	633b      	str	r3, [r7, #48]	; 0x30
 8007768:	2301      	movs	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f383 8810 	msr	PRIMASK, r3
}
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2101      	movs	r1, #1
 8007780:	438a      	bics	r2, r1
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007786:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	f383 8810 	msr	PRIMASK, r3
}
 800778e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2280      	movs	r2, #128	; 0x80
 8007794:	2120      	movs	r1, #32
 8007796:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2278      	movs	r2, #120	; 0x78
 800779c:	2100      	movs	r1, #0
 800779e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e011      	b.n	80077c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	2120      	movs	r1, #32
 80077b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2278      	movs	r2, #120	; 0x78
 80077c2:	2100      	movs	r1, #0
 80077c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	b010      	add	sp, #64	; 0x40
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	01ffffff 	.word	0x01ffffff
 80077d4:	fffffedf 	.word	0xfffffedf

080077d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	1dfb      	adds	r3, r7, #7
 80077e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e8:	e04b      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	3301      	adds	r3, #1
 80077ee:	d048      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f0:	f7fd fc8a 	bl	8005108 <HAL_GetTick>
 80077f4:	0002      	movs	r2, r0
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d302      	bcc.n	8007806 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e04b      	b.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2204      	movs	r2, #4
 8007812:	4013      	ands	r3, r2
 8007814:	d035      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	2208      	movs	r2, #8
 800781e:	4013      	ands	r3, r2
 8007820:	2b08      	cmp	r3, #8
 8007822:	d111      	bne.n	8007848 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2208      	movs	r2, #8
 800782a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0018      	movs	r0, r3
 8007830:	f000 f900 	bl	8007a34 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2284      	movs	r2, #132	; 0x84
 8007838:	2108      	movs	r1, #8
 800783a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2278      	movs	r2, #120	; 0x78
 8007840:	2100      	movs	r1, #0
 8007842:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e02c      	b.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	69da      	ldr	r2, [r3, #28]
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	401a      	ands	r2, r3
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	011b      	lsls	r3, r3, #4
 8007858:	429a      	cmp	r2, r3
 800785a:	d112      	bne.n	8007882 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2280      	movs	r2, #128	; 0x80
 8007862:	0112      	lsls	r2, r2, #4
 8007864:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f8e3 	bl	8007a34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2284      	movs	r2, #132	; 0x84
 8007872:	2120      	movs	r1, #32
 8007874:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2278      	movs	r2, #120	; 0x78
 800787a:	2100      	movs	r1, #0
 800787c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e00f      	b.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	425a      	negs	r2, r3
 8007892:	4153      	adcs	r3, r2
 8007894:	b2db      	uxtb	r3, r3
 8007896:	001a      	movs	r2, r3
 8007898:	1dfb      	adds	r3, r7, #7
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d0a4      	beq.n	80077ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b004      	add	sp, #16
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b090      	sub	sp, #64	; 0x40
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	1dbb      	adds	r3, r7, #6
 80078b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	1dba      	adds	r2, r7, #6
 80078c4:	2158      	movs	r1, #88	; 0x58
 80078c6:	8812      	ldrh	r2, [r2, #0]
 80078c8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2284      	movs	r2, #132	; 0x84
 80078ce:	2100      	movs	r1, #0
 80078d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2280      	movs	r2, #128	; 0x80
 80078d6:	2122      	movs	r1, #34	; 0x22
 80078d8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d028      	beq.n	8007934 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e6:	4a3e      	ldr	r2, [pc, #248]	; (80079e0 <UART_Start_Receive_DMA+0x134>)
 80078e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ee:	4a3d      	ldr	r2, [pc, #244]	; (80079e4 <UART_Start_Receive_DMA+0x138>)
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f6:	4a3c      	ldr	r2, [pc, #240]	; (80079e8 <UART_Start_Receive_DMA+0x13c>)
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fe:	2200      	movs	r2, #0
 8007900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3324      	adds	r3, #36	; 0x24
 800790c:	0019      	movs	r1, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007912:	001a      	movs	r2, r3
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	f7fd fda1 	bl	800545e <HAL_DMA_Start_IT>
 800791c:	1e03      	subs	r3, r0, #0
 800791e:	d009      	beq.n	8007934 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2284      	movs	r2, #132	; 0x84
 8007924:	2110      	movs	r1, #16
 8007926:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	2120      	movs	r1, #32
 800792e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e050      	b.n	80079d6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d019      	beq.n	8007970 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793c:	f3ef 8310 	mrs	r3, PRIMASK
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007946:	2301      	movs	r3, #1
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	f383 8810 	msr	PRIMASK, r3
}
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	0049      	lsls	r1, r1, #1
 8007960:	430a      	orrs	r2, r1
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	f383 8810 	msr	PRIMASK, r3
}
 800796e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007970:	f3ef 8310 	mrs	r3, PRIMASK
 8007974:	613b      	str	r3, [r7, #16]
  return(result);
 8007976:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	63bb      	str	r3, [r7, #56]	; 0x38
 800797a:	2301      	movs	r3, #1
 800797c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f383 8810 	msr	PRIMASK, r3
}
 8007984:	46c0      	nop			; (mov r8, r8)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2101      	movs	r1, #1
 8007992:	430a      	orrs	r2, r1
 8007994:	609a      	str	r2, [r3, #8]
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f383 8810 	msr	PRIMASK, r3
}
 80079a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a2:	f3ef 8310 	mrs	r3, PRIMASK
 80079a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80079a8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
 80079ac:	2301      	movs	r3, #1
 80079ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	f383 8810 	msr	PRIMASK, r3
}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2140      	movs	r1, #64	; 0x40
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	f383 8810 	msr	PRIMASK, r3
}
 80079d2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	0018      	movs	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	b010      	add	sp, #64	; 0x40
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	08007afd 	.word	0x08007afd
 80079e4:	08007c29 	.word	0x08007c29
 80079e8:	08007c6b 	.word	0x08007c6b

080079ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f4:	f3ef 8310 	mrs	r3, PRIMASK
 80079f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80079fa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	2301      	movs	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f383 8810 	msr	PRIMASK, r3
}
 8007a08:	46c0      	nop			; (mov r8, r8)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	21c0      	movs	r1, #192	; 0xc0
 8007a16:	438a      	bics	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f383 8810 	msr	PRIMASK, r3
}
 8007a24:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b006      	add	sp, #24
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08e      	sub	sp, #56	; 0x38
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a40:	617b      	str	r3, [r7, #20]
  return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a44:	637b      	str	r3, [r7, #52]	; 0x34
 8007a46:	2301      	movs	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f383 8810 	msr	PRIMASK, r3
}
 8007a50:	46c0      	nop			; (mov r8, r8)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4926      	ldr	r1, [pc, #152]	; (8007af8 <UART_EndRxTransfer+0xc4>)
 8007a5e:	400a      	ands	r2, r1
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	f383 8810 	msr	PRIMASK, r3
}
 8007a6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a72:	623b      	str	r3, [r7, #32]
  return(result);
 8007a74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30
 8007a78:	2301      	movs	r3, #1
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f383 8810 	msr	PRIMASK, r3
}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2101      	movs	r1, #1
 8007a90:	438a      	bics	r2, r1
 8007a92:	609a      	str	r2, [r3, #8]
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	f383 8810 	msr	PRIMASK, r3
}
 8007a9e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d118      	bne.n	8007ada <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8007aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f383 8810 	msr	PRIMASK, r3
}
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2110      	movs	r1, #16
 8007aca:	438a      	bics	r2, r1
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f383 8810 	msr	PRIMASK, r3
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2280      	movs	r2, #128	; 0x80
 8007ade:	2120      	movs	r1, #32
 8007ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	46bd      	mov	sp, r7
 8007af2:	b00e      	add	sp, #56	; 0x38
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	fffffedf 	.word	0xfffffedf

08007afc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b094      	sub	sp, #80	; 0x50
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d06f      	beq.n	8007bf2 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	225a      	movs	r2, #90	; 0x5a
 8007b16:	2100      	movs	r1, #0
 8007b18:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b20:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b24:	2301      	movs	r3, #1
 8007b26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f383 8810 	msr	PRIMASK, r3
}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	493a      	ldr	r1, [pc, #232]	; (8007c24 <UART_DMAReceiveCplt+0x128>)
 8007b3c:	400a      	ands	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	f383 8810 	msr	PRIMASK, r3
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	647b      	str	r3, [r7, #68]	; 0x44
 8007b56:	2301      	movs	r3, #1
 8007b58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	438a      	bics	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	f383 8810 	msr	PRIMASK, r3
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40
 8007b88:	2301      	movs	r3, #1
 8007b8a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	f383 8810 	msr	PRIMASK, r3
}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2140      	movs	r1, #64	; 0x40
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	f383 8810 	msr	PRIMASK, r3
}
 8007bae:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	2120      	movs	r1, #32
 8007bb6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d118      	bne.n	8007bf2 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bca:	2301      	movs	r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f383 8810 	msr	PRIMASK, r3
}
 8007bd4:	46c0      	nop			; (mov r8, r8)
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2110      	movs	r1, #16
 8007be2:	438a      	bics	r2, r1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d108      	bne.n	8007c12 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	2258      	movs	r2, #88	; 0x58
 8007c04:	5a9a      	ldrh	r2, [r3, r2]
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	0011      	movs	r1, r2
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f7fc fe34 	bl	8004878 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c10:	e003      	b.n	8007c1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c14:	0018      	movs	r0, r3
 8007c16:	f7fc feb3 	bl	8004980 <HAL_UART_RxCpltCallback>
}
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b014      	add	sp, #80	; 0x50
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	fffffeff 	.word	0xfffffeff

08007c28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d10a      	bne.n	8007c5a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2258      	movs	r2, #88	; 0x58
 8007c48:	5a9b      	ldrh	r3, [r3, r2]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	0011      	movs	r1, r2
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7fc fe10 	bl	8004878 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c58:	e003      	b.n	8007c62 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7ff fb17 	bl	8007290 <HAL_UART_RxHalfCpltCallback>
}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b004      	add	sp, #16
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2280      	movs	r2, #128	; 0x80
 8007c82:	589b      	ldr	r3, [r3, r2]
 8007c84:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2280      	movs	r2, #128	; 0x80
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d10a      	bne.n	8007caa <UART_DMAError+0x40>
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b21      	cmp	r3, #33	; 0x21
 8007c98:	d107      	bne.n	8007caa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2252      	movs	r2, #82	; 0x52
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f7ff fea1 	bl	80079ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2240      	movs	r2, #64	; 0x40
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d10a      	bne.n	8007cce <UART_DMAError+0x64>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b22      	cmp	r3, #34	; 0x22
 8007cbc:	d107      	bne.n	8007cce <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	225a      	movs	r2, #90	; 0x5a
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	0018      	movs	r0, r3
 8007cca:	f7ff feb3 	bl	8007a34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2284      	movs	r2, #132	; 0x84
 8007cd2:	589b      	ldr	r3, [r3, r2]
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2184      	movs	r1, #132	; 0x84
 8007cdc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f7fc fdc1 	bl	8004868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	b006      	add	sp, #24
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	225a      	movs	r2, #90	; 0x5a
 8007d00:	2100      	movs	r1, #0
 8007d02:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2252      	movs	r2, #82	; 0x52
 8007d08:	2100      	movs	r1, #0
 8007d0a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7fc fdaa 	bl	8004868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b004      	add	sp, #16
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d24:	f3ef 8310 	mrs	r3, PRIMASK
 8007d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	2301      	movs	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f383 8810 	msr	PRIMASK, r3
}
 8007d38:	46c0      	nop			; (mov r8, r8)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2140      	movs	r1, #64	; 0x40
 8007d46:	438a      	bics	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f383 8810 	msr	PRIMASK, r3
}
 8007d54:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7ff fa8b 	bl	8007280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	b006      	add	sp, #24
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b002      	add	sp, #8
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d82:	b5b0      	push	{r4, r5, r7, lr}
 8007d84:	b08a      	sub	sp, #40	; 0x28
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	1dbb      	adds	r3, r7, #6
 8007d8e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2280      	movs	r2, #128	; 0x80
 8007d94:	589b      	ldr	r3, [r3, r2]
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d156      	bne.n	8007e48 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007da0:	1dbb      	adds	r3, r7, #6
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e04e      	b.n	8007e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	2380      	movs	r3, #128	; 0x80
 8007db2:	015b      	lsls	r3, r3, #5
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d109      	bne.n	8007dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d001      	beq.n	8007dcc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e03e      	b.n	8007e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007dd8:	2527      	movs	r5, #39	; 0x27
 8007dda:	197c      	adds	r4, r7, r5
 8007ddc:	1dbb      	adds	r3, r7, #6
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	0018      	movs	r0, r3
 8007de6:	f7ff fd61 	bl	80078ac <UART_Start_Receive_DMA>
 8007dea:	0003      	movs	r3, r0
 8007dec:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007dee:	197b      	adds	r3, r7, r5
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d124      	bne.n	8007e40 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d11c      	bne.n	8007e38 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2210      	movs	r2, #16
 8007e04:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	617b      	str	r3, [r7, #20]
  return(result);
 8007e0c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0e:	623b      	str	r3, [r7, #32]
 8007e10:	2301      	movs	r3, #1
 8007e12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2110      	movs	r1, #16
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	e003      	b.n	8007e40 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007e38:	2327      	movs	r3, #39	; 0x27
 8007e3a:	18fb      	adds	r3, r7, r3
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8007e40:	2327      	movs	r3, #39	; 0x27
 8007e42:	18fb      	adds	r3, r7, r3
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	e000      	b.n	8007e4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
  }
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b00a      	add	sp, #40	; 0x28
 8007e50:	bdb0      	pop	{r4, r5, r7, pc}

08007e52 <main>:




int main(void)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	af00      	add	r7, sp, #0
  hwInit();
 8007e56:	f7fd f8e9 	bl	800502c <hwInit>
  apInit();
 8007e5a:	f7fa fb2b 	bl	80024b4 <apInit>

  apMain();
 8007e5e:	f7fa fb5d 	bl	800251c <apMain>

  return 0;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <__errno>:
 8007e6c:	4b01      	ldr	r3, [pc, #4]	; (8007e74 <__errno+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	200000a0 	.word	0x200000a0

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	4d0c      	ldr	r5, [pc, #48]	; (8007eb0 <__libc_init_array+0x38>)
 8007e7e:	4c0d      	ldr	r4, [pc, #52]	; (8007eb4 <__libc_init_array+0x3c>)
 8007e80:	1b64      	subs	r4, r4, r5
 8007e82:	10a4      	asrs	r4, r4, #2
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	2600      	movs	r6, #0
 8007e8a:	f003 facb 	bl	800b424 <_init>
 8007e8e:	4d0a      	ldr	r5, [pc, #40]	; (8007eb8 <__libc_init_array+0x40>)
 8007e90:	4c0a      	ldr	r4, [pc, #40]	; (8007ebc <__libc_init_array+0x44>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	42a6      	cmp	r6, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	00b3      	lsls	r3, r6, #2
 8007e9e:	58eb      	ldr	r3, [r5, r3]
 8007ea0:	4798      	blx	r3
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	00b3      	lsls	r3, r6, #2
 8007ea8:	58eb      	ldr	r3, [r5, r3]
 8007eaa:	4798      	blx	r3
 8007eac:	3601      	adds	r6, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	0800bd74 	.word	0x0800bd74
 8007eb4:	0800bd74 	.word	0x0800bd74
 8007eb8:	0800bd74 	.word	0x0800bd74
 8007ebc:	0800bd78 	.word	0x0800bd78

08007ec0 <memcpy>:
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	b510      	push	{r4, lr}
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d100      	bne.n	8007eca <memcpy+0xa>
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	5ccc      	ldrb	r4, [r1, r3]
 8007ecc:	54c4      	strb	r4, [r0, r3]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	e7f8      	b.n	8007ec4 <memcpy+0x4>

08007ed2 <memset>:
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	1882      	adds	r2, r0, r2
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d100      	bne.n	8007edc <memset+0xa>
 8007eda:	4770      	bx	lr
 8007edc:	7019      	strb	r1, [r3, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	e7f9      	b.n	8007ed6 <memset+0x4>
	...

08007ee4 <_puts_r>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	0005      	movs	r5, r0
 8007ee8:	000e      	movs	r6, r1
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d004      	beq.n	8007ef8 <_puts_r+0x14>
 8007eee:	6983      	ldr	r3, [r0, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <_puts_r+0x14>
 8007ef4:	f001 f9fa 	bl	80092ec <__sinit>
 8007ef8:	69ab      	ldr	r3, [r5, #24]
 8007efa:	68ac      	ldr	r4, [r5, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <_puts_r+0x22>
 8007f00:	0028      	movs	r0, r5
 8007f02:	f001 f9f3 	bl	80092ec <__sinit>
 8007f06:	4b2d      	ldr	r3, [pc, #180]	; (8007fbc <_puts_r+0xd8>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d122      	bne.n	8007f52 <_puts_r+0x6e>
 8007f0c:	686c      	ldr	r4, [r5, #4]
 8007f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f10:	07db      	lsls	r3, r3, #31
 8007f12:	d405      	bmi.n	8007f20 <_puts_r+0x3c>
 8007f14:	89a3      	ldrh	r3, [r4, #12]
 8007f16:	059b      	lsls	r3, r3, #22
 8007f18:	d402      	bmi.n	8007f20 <_puts_r+0x3c>
 8007f1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f1c:	f001 fdfb 	bl	8009b16 <__retarget_lock_acquire_recursive>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	071b      	lsls	r3, r3, #28
 8007f24:	d502      	bpl.n	8007f2c <_puts_r+0x48>
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d129      	bne.n	8007f80 <_puts_r+0x9c>
 8007f2c:	0021      	movs	r1, r4
 8007f2e:	0028      	movs	r0, r5
 8007f30:	f001 f836 	bl	8008fa0 <__swsetup_r>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d023      	beq.n	8007f80 <_puts_r+0x9c>
 8007f38:	2501      	movs	r5, #1
 8007f3a:	426d      	negs	r5, r5
 8007f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f3e:	07db      	lsls	r3, r3, #31
 8007f40:	d405      	bmi.n	8007f4e <_puts_r+0x6a>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	059b      	lsls	r3, r3, #22
 8007f46:	d402      	bmi.n	8007f4e <_puts_r+0x6a>
 8007f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f4a:	f001 fde5 	bl	8009b18 <__retarget_lock_release_recursive>
 8007f4e:	0028      	movs	r0, r5
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <_puts_r+0xdc>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	d101      	bne.n	8007f5c <_puts_r+0x78>
 8007f58:	68ac      	ldr	r4, [r5, #8]
 8007f5a:	e7d8      	b.n	8007f0e <_puts_r+0x2a>
 8007f5c:	4b19      	ldr	r3, [pc, #100]	; (8007fc4 <_puts_r+0xe0>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d1d5      	bne.n	8007f0e <_puts_r+0x2a>
 8007f62:	68ec      	ldr	r4, [r5, #12]
 8007f64:	e7d3      	b.n	8007f0e <_puts_r+0x2a>
 8007f66:	3601      	adds	r6, #1
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da04      	bge.n	8007f78 <_puts_r+0x94>
 8007f6e:	69a2      	ldr	r2, [r4, #24]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	dc16      	bgt.n	8007fa2 <_puts_r+0xbe>
 8007f74:	290a      	cmp	r1, #10
 8007f76:	d014      	beq.n	8007fa2 <_puts_r+0xbe>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	6022      	str	r2, [r4, #0]
 8007f7e:	7019      	strb	r1, [r3, #0]
 8007f80:	68a3      	ldr	r3, [r4, #8]
 8007f82:	7831      	ldrb	r1, [r6, #0]
 8007f84:	3b01      	subs	r3, #1
 8007f86:	2900      	cmp	r1, #0
 8007f88:	d1ed      	bne.n	8007f66 <_puts_r+0x82>
 8007f8a:	60a3      	str	r3, [r4, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da0f      	bge.n	8007fb0 <_puts_r+0xcc>
 8007f90:	0028      	movs	r0, r5
 8007f92:	0022      	movs	r2, r4
 8007f94:	310a      	adds	r1, #10
 8007f96:	f000 ffad 	bl	8008ef4 <__swbuf_r>
 8007f9a:	250a      	movs	r5, #10
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d1cd      	bne.n	8007f3c <_puts_r+0x58>
 8007fa0:	e7ca      	b.n	8007f38 <_puts_r+0x54>
 8007fa2:	0022      	movs	r2, r4
 8007fa4:	0028      	movs	r0, r5
 8007fa6:	f000 ffa5 	bl	8008ef4 <__swbuf_r>
 8007faa:	1c43      	adds	r3, r0, #1
 8007fac:	d1e8      	bne.n	8007f80 <_puts_r+0x9c>
 8007fae:	e7c3      	b.n	8007f38 <_puts_r+0x54>
 8007fb0:	250a      	movs	r5, #10
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	701d      	strb	r5, [r3, #0]
 8007fba:	e7bf      	b.n	8007f3c <_puts_r+0x58>
 8007fbc:	0800bac4 	.word	0x0800bac4
 8007fc0:	0800bae4 	.word	0x0800bae4
 8007fc4:	0800baa4 	.word	0x0800baa4

08007fc8 <puts>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	4b03      	ldr	r3, [pc, #12]	; (8007fd8 <puts+0x10>)
 8007fcc:	0001      	movs	r1, r0
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	f7ff ff88 	bl	8007ee4 <_puts_r>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	200000a0 	.word	0x200000a0

08007fdc <strcpy>:
 8007fdc:	0003      	movs	r3, r0
 8007fde:	780a      	ldrb	r2, [r1, #0]
 8007fe0:	3101      	adds	r1, #1
 8007fe2:	701a      	strb	r2, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	2a00      	cmp	r2, #0
 8007fe8:	d1f9      	bne.n	8007fde <strcpy+0x2>
 8007fea:	4770      	bx	lr

08007fec <sulp>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	0016      	movs	r6, r2
 8007ff0:	000d      	movs	r5, r1
 8007ff2:	f002 f995 	bl	800a320 <__ulp>
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	d00d      	beq.n	8008016 <sulp+0x2a>
 8007ffa:	236b      	movs	r3, #107	; 0x6b
 8007ffc:	006a      	lsls	r2, r5, #1
 8007ffe:	0d52      	lsrs	r2, r2, #21
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	dd07      	ble.n	8008016 <sulp+0x2a>
 8008006:	2400      	movs	r4, #0
 8008008:	4a03      	ldr	r2, [pc, #12]	; (8008018 <sulp+0x2c>)
 800800a:	051b      	lsls	r3, r3, #20
 800800c:	189d      	adds	r5, r3, r2
 800800e:	002b      	movs	r3, r5
 8008010:	0022      	movs	r2, r4
 8008012:	f7f9 fb01 	bl	8001618 <__aeabi_dmul>
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	3ff00000 	.word	0x3ff00000

0800801c <_strtod_l>:
 800801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801e:	001d      	movs	r5, r3
 8008020:	2300      	movs	r3, #0
 8008022:	b0a5      	sub	sp, #148	; 0x94
 8008024:	9320      	str	r3, [sp, #128]	; 0x80
 8008026:	4bac      	ldr	r3, [pc, #688]	; (80082d8 <_strtod_l+0x2bc>)
 8008028:	9005      	str	r0, [sp, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	9108      	str	r1, [sp, #32]
 800802e:	0018      	movs	r0, r3
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	921b      	str	r2, [sp, #108]	; 0x6c
 8008034:	f7f8 f872 	bl	800011c <strlen>
 8008038:	2600      	movs	r6, #0
 800803a:	0004      	movs	r4, r0
 800803c:	2700      	movs	r7, #0
 800803e:	9b08      	ldr	r3, [sp, #32]
 8008040:	931f      	str	r3, [sp, #124]	; 0x7c
 8008042:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008044:	7813      	ldrb	r3, [r2, #0]
 8008046:	2b2b      	cmp	r3, #43	; 0x2b
 8008048:	d058      	beq.n	80080fc <_strtod_l+0xe0>
 800804a:	d844      	bhi.n	80080d6 <_strtod_l+0xba>
 800804c:	2b0d      	cmp	r3, #13
 800804e:	d83d      	bhi.n	80080cc <_strtod_l+0xb0>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d83d      	bhi.n	80080d0 <_strtod_l+0xb4>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d047      	beq.n	80080e8 <_strtod_l+0xcc>
 8008058:	2300      	movs	r3, #0
 800805a:	930e      	str	r3, [sp, #56]	; 0x38
 800805c:	2200      	movs	r2, #0
 800805e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008060:	920a      	str	r2, [sp, #40]	; 0x28
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b30      	cmp	r3, #48	; 0x30
 8008068:	d000      	beq.n	800806c <_strtod_l+0x50>
 800806a:	e07f      	b.n	800816c <_strtod_l+0x150>
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	3220      	adds	r2, #32
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	4393      	bics	r3, r2
 8008074:	2b58      	cmp	r3, #88	; 0x58
 8008076:	d000      	beq.n	800807a <_strtod_l+0x5e>
 8008078:	e06e      	b.n	8008158 <_strtod_l+0x13c>
 800807a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800807c:	9502      	str	r5, [sp, #8]
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	ab20      	add	r3, sp, #128	; 0x80
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4a95      	ldr	r2, [pc, #596]	; (80082dc <_strtod_l+0x2c0>)
 8008086:	ab21      	add	r3, sp, #132	; 0x84
 8008088:	9805      	ldr	r0, [sp, #20]
 800808a:	a91f      	add	r1, sp, #124	; 0x7c
 800808c:	f001 fa38 	bl	8009500 <__gethex>
 8008090:	2307      	movs	r3, #7
 8008092:	0005      	movs	r5, r0
 8008094:	0004      	movs	r4, r0
 8008096:	401d      	ands	r5, r3
 8008098:	4218      	tst	r0, r3
 800809a:	d006      	beq.n	80080aa <_strtod_l+0x8e>
 800809c:	2d06      	cmp	r5, #6
 800809e:	d12f      	bne.n	8008100 <_strtod_l+0xe4>
 80080a0:	9b06      	ldr	r3, [sp, #24]
 80080a2:	3301      	adds	r3, #1
 80080a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80080a6:	2300      	movs	r3, #0
 80080a8:	930e      	str	r3, [sp, #56]	; 0x38
 80080aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <_strtod_l+0x9a>
 80080b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01c      	beq.n	80080f6 <_strtod_l+0xda>
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	0032      	movs	r2, r6
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	0010      	movs	r0, r2
 80080c6:	0019      	movs	r1, r3
 80080c8:	b025      	add	sp, #148	; 0x94
 80080ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d1c3      	bne.n	8008058 <_strtod_l+0x3c>
 80080d0:	3201      	adds	r2, #1
 80080d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80080d4:	e7b5      	b.n	8008042 <_strtod_l+0x26>
 80080d6:	2b2d      	cmp	r3, #45	; 0x2d
 80080d8:	d1be      	bne.n	8008058 <_strtod_l+0x3c>
 80080da:	3b2c      	subs	r3, #44	; 0x2c
 80080dc:	930e      	str	r3, [sp, #56]	; 0x38
 80080de:	1c53      	adds	r3, r2, #1
 80080e0:	931f      	str	r3, [sp, #124]	; 0x7c
 80080e2:	7853      	ldrb	r3, [r2, #1]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1b9      	bne.n	800805c <_strtod_l+0x40>
 80080e8:	9b08      	ldr	r3, [sp, #32]
 80080ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80080ec:	2300      	movs	r3, #0
 80080ee:	930e      	str	r3, [sp, #56]	; 0x38
 80080f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1dc      	bne.n	80080b0 <_strtod_l+0x94>
 80080f6:	0032      	movs	r2, r6
 80080f8:	003b      	movs	r3, r7
 80080fa:	e7e3      	b.n	80080c4 <_strtod_l+0xa8>
 80080fc:	2300      	movs	r3, #0
 80080fe:	e7ed      	b.n	80080dc <_strtod_l+0xc0>
 8008100:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008102:	2a00      	cmp	r2, #0
 8008104:	d007      	beq.n	8008116 <_strtod_l+0xfa>
 8008106:	2135      	movs	r1, #53	; 0x35
 8008108:	a822      	add	r0, sp, #136	; 0x88
 800810a:	f002 fa0a 	bl	800a522 <__copybits>
 800810e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008110:	9805      	ldr	r0, [sp, #20]
 8008112:	f001 fdc5 	bl	8009ca0 <_Bfree>
 8008116:	1e68      	subs	r0, r5, #1
 8008118:	2804      	cmp	r0, #4
 800811a:	d806      	bhi.n	800812a <_strtod_l+0x10e>
 800811c:	f7f8 f806 	bl	800012c <__gnu_thumb1_case_uqi>
 8008120:	1816030b 	.word	0x1816030b
 8008124:	0b          	.byte	0x0b
 8008125:	00          	.byte	0x00
 8008126:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008128:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800812a:	0723      	lsls	r3, r4, #28
 800812c:	d5bd      	bpl.n	80080aa <_strtod_l+0x8e>
 800812e:	2380      	movs	r3, #128	; 0x80
 8008130:	061b      	lsls	r3, r3, #24
 8008132:	431f      	orrs	r7, r3
 8008134:	e7b9      	b.n	80080aa <_strtod_l+0x8e>
 8008136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008138:	4a69      	ldr	r2, [pc, #420]	; (80082e0 <_strtod_l+0x2c4>)
 800813a:	496a      	ldr	r1, [pc, #424]	; (80082e4 <_strtod_l+0x2c8>)
 800813c:	401a      	ands	r2, r3
 800813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008140:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8008142:	185b      	adds	r3, r3, r1
 8008144:	051b      	lsls	r3, r3, #20
 8008146:	431a      	orrs	r2, r3
 8008148:	0017      	movs	r7, r2
 800814a:	e7ee      	b.n	800812a <_strtod_l+0x10e>
 800814c:	4f66      	ldr	r7, [pc, #408]	; (80082e8 <_strtod_l+0x2cc>)
 800814e:	e7ec      	b.n	800812a <_strtod_l+0x10e>
 8008150:	2601      	movs	r6, #1
 8008152:	4f66      	ldr	r7, [pc, #408]	; (80082ec <_strtod_l+0x2d0>)
 8008154:	4276      	negs	r6, r6
 8008156:	e7e8      	b.n	800812a <_strtod_l+0x10e>
 8008158:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	921f      	str	r2, [sp, #124]	; 0x7c
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b30      	cmp	r3, #48	; 0x30
 8008162:	d0f9      	beq.n	8008158 <_strtod_l+0x13c>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0a0      	beq.n	80080aa <_strtod_l+0x8e>
 8008168:	2301      	movs	r3, #1
 800816a:	930a      	str	r3, [sp, #40]	; 0x28
 800816c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800816e:	220a      	movs	r2, #10
 8008170:	9310      	str	r3, [sp, #64]	; 0x40
 8008172:	2300      	movs	r3, #0
 8008174:	930f      	str	r3, [sp, #60]	; 0x3c
 8008176:	930b      	str	r3, [sp, #44]	; 0x2c
 8008178:	9309      	str	r3, [sp, #36]	; 0x24
 800817a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800817c:	7805      	ldrb	r5, [r0, #0]
 800817e:	002b      	movs	r3, r5
 8008180:	3b30      	subs	r3, #48	; 0x30
 8008182:	b2d9      	uxtb	r1, r3
 8008184:	2909      	cmp	r1, #9
 8008186:	d927      	bls.n	80081d8 <_strtod_l+0x1bc>
 8008188:	0022      	movs	r2, r4
 800818a:	9907      	ldr	r1, [sp, #28]
 800818c:	f002 fe68 	bl	800ae60 <strncmp>
 8008190:	2800      	cmp	r0, #0
 8008192:	d033      	beq.n	80081fc <_strtod_l+0x1e0>
 8008194:	2000      	movs	r0, #0
 8008196:	002b      	movs	r3, r5
 8008198:	4684      	mov	ip, r0
 800819a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819c:	900c      	str	r0, [sp, #48]	; 0x30
 800819e:	9206      	str	r2, [sp, #24]
 80081a0:	2220      	movs	r2, #32
 80081a2:	0019      	movs	r1, r3
 80081a4:	4391      	bics	r1, r2
 80081a6:	000a      	movs	r2, r1
 80081a8:	2100      	movs	r1, #0
 80081aa:	9107      	str	r1, [sp, #28]
 80081ac:	2a45      	cmp	r2, #69	; 0x45
 80081ae:	d000      	beq.n	80081b2 <_strtod_l+0x196>
 80081b0:	e0c5      	b.n	800833e <_strtod_l+0x322>
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081b6:	4303      	orrs	r3, r0
 80081b8:	4313      	orrs	r3, r2
 80081ba:	428b      	cmp	r3, r1
 80081bc:	d094      	beq.n	80080e8 <_strtod_l+0xcc>
 80081be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	3301      	adds	r3, #1
 80081c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80081c6:	9b08      	ldr	r3, [sp, #32]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b2b      	cmp	r3, #43	; 0x2b
 80081cc:	d076      	beq.n	80082bc <_strtod_l+0x2a0>
 80081ce:	000c      	movs	r4, r1
 80081d0:	2b2d      	cmp	r3, #45	; 0x2d
 80081d2:	d179      	bne.n	80082c8 <_strtod_l+0x2ac>
 80081d4:	2401      	movs	r4, #1
 80081d6:	e072      	b.n	80082be <_strtod_l+0x2a2>
 80081d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081da:	2908      	cmp	r1, #8
 80081dc:	dc09      	bgt.n	80081f2 <_strtod_l+0x1d6>
 80081de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081e0:	4351      	muls	r1, r2
 80081e2:	185b      	adds	r3, r3, r1
 80081e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	3001      	adds	r0, #1
 80081ea:	3301      	adds	r3, #1
 80081ec:	9309      	str	r3, [sp, #36]	; 0x24
 80081ee:	901f      	str	r0, [sp, #124]	; 0x7c
 80081f0:	e7c3      	b.n	800817a <_strtod_l+0x15e>
 80081f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081f4:	4351      	muls	r1, r2
 80081f6:	185b      	adds	r3, r3, r1
 80081f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80081fa:	e7f4      	b.n	80081e6 <_strtod_l+0x1ca>
 80081fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	191c      	adds	r4, r3, r4
 8008202:	941f      	str	r4, [sp, #124]	; 0x7c
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	2a00      	cmp	r2, #0
 8008208:	d039      	beq.n	800827e <_strtod_l+0x262>
 800820a:	900c      	str	r0, [sp, #48]	; 0x30
 800820c:	9206      	str	r2, [sp, #24]
 800820e:	001a      	movs	r2, r3
 8008210:	3a30      	subs	r2, #48	; 0x30
 8008212:	2a09      	cmp	r2, #9
 8008214:	d912      	bls.n	800823c <_strtod_l+0x220>
 8008216:	2201      	movs	r2, #1
 8008218:	4694      	mov	ip, r2
 800821a:	e7c1      	b.n	80081a0 <_strtod_l+0x184>
 800821c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800821e:	3001      	adds	r0, #1
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	921f      	str	r2, [sp, #124]	; 0x7c
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	2b30      	cmp	r3, #48	; 0x30
 8008228:	d0f8      	beq.n	800821c <_strtod_l+0x200>
 800822a:	001a      	movs	r2, r3
 800822c:	3a31      	subs	r2, #49	; 0x31
 800822e:	2a08      	cmp	r2, #8
 8008230:	d83f      	bhi.n	80082b2 <_strtod_l+0x296>
 8008232:	900c      	str	r0, [sp, #48]	; 0x30
 8008234:	2000      	movs	r0, #0
 8008236:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008238:	9006      	str	r0, [sp, #24]
 800823a:	9210      	str	r2, [sp, #64]	; 0x40
 800823c:	001a      	movs	r2, r3
 800823e:	1c41      	adds	r1, r0, #1
 8008240:	3a30      	subs	r2, #48	; 0x30
 8008242:	2b30      	cmp	r3, #48	; 0x30
 8008244:	d015      	beq.n	8008272 <_strtod_l+0x256>
 8008246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008248:	185b      	adds	r3, r3, r1
 800824a:	210a      	movs	r1, #10
 800824c:	930c      	str	r3, [sp, #48]	; 0x30
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	18c4      	adds	r4, r0, r3
 8008252:	42a3      	cmp	r3, r4
 8008254:	d115      	bne.n	8008282 <_strtod_l+0x266>
 8008256:	9906      	ldr	r1, [sp, #24]
 8008258:	9b06      	ldr	r3, [sp, #24]
 800825a:	3101      	adds	r1, #1
 800825c:	1809      	adds	r1, r1, r0
 800825e:	181b      	adds	r3, r3, r0
 8008260:	9106      	str	r1, [sp, #24]
 8008262:	2b08      	cmp	r3, #8
 8008264:	dc1b      	bgt.n	800829e <_strtod_l+0x282>
 8008266:	230a      	movs	r3, #10
 8008268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800826a:	434b      	muls	r3, r1
 800826c:	2100      	movs	r1, #0
 800826e:	18d3      	adds	r3, r2, r3
 8008270:	930b      	str	r3, [sp, #44]	; 0x2c
 8008272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008274:	0008      	movs	r0, r1
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	921f      	str	r2, [sp, #124]	; 0x7c
 800827a:	785b      	ldrb	r3, [r3, #1]
 800827c:	e7c7      	b.n	800820e <_strtod_l+0x1f2>
 800827e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008280:	e7d1      	b.n	8008226 <_strtod_l+0x20a>
 8008282:	2b08      	cmp	r3, #8
 8008284:	dc04      	bgt.n	8008290 <_strtod_l+0x274>
 8008286:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008288:	434d      	muls	r5, r1
 800828a:	950b      	str	r5, [sp, #44]	; 0x2c
 800828c:	3301      	adds	r3, #1
 800828e:	e7e0      	b.n	8008252 <_strtod_l+0x236>
 8008290:	1c5d      	adds	r5, r3, #1
 8008292:	2d10      	cmp	r5, #16
 8008294:	dcfa      	bgt.n	800828c <_strtod_l+0x270>
 8008296:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008298:	434d      	muls	r5, r1
 800829a:	950f      	str	r5, [sp, #60]	; 0x3c
 800829c:	e7f6      	b.n	800828c <_strtod_l+0x270>
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	2100      	movs	r1, #0
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	dce5      	bgt.n	8008272 <_strtod_l+0x256>
 80082a6:	230a      	movs	r3, #10
 80082a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80082aa:	4343      	muls	r3, r0
 80082ac:	18d3      	adds	r3, r2, r3
 80082ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b0:	e7df      	b.n	8008272 <_strtod_l+0x256>
 80082b2:	2200      	movs	r2, #0
 80082b4:	920c      	str	r2, [sp, #48]	; 0x30
 80082b6:	9206      	str	r2, [sp, #24]
 80082b8:	3201      	adds	r2, #1
 80082ba:	e7ad      	b.n	8008218 <_strtod_l+0x1fc>
 80082bc:	2400      	movs	r4, #0
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	3302      	adds	r3, #2
 80082c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80082c4:	9b08      	ldr	r3, [sp, #32]
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	001a      	movs	r2, r3
 80082ca:	3a30      	subs	r2, #48	; 0x30
 80082cc:	2a09      	cmp	r2, #9
 80082ce:	d913      	bls.n	80082f8 <_strtod_l+0x2dc>
 80082d0:	9a08      	ldr	r2, [sp, #32]
 80082d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80082d4:	2200      	movs	r2, #0
 80082d6:	e031      	b.n	800833c <_strtod_l+0x320>
 80082d8:	0800bb7c 	.word	0x0800bb7c
 80082dc:	0800b94c 	.word	0x0800b94c
 80082e0:	ffefffff 	.word	0xffefffff
 80082e4:	00000433 	.word	0x00000433
 80082e8:	7ff00000 	.word	0x7ff00000
 80082ec:	7fffffff 	.word	0x7fffffff
 80082f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b30      	cmp	r3, #48	; 0x30
 80082fa:	d0f9      	beq.n	80082f0 <_strtod_l+0x2d4>
 80082fc:	2200      	movs	r2, #0
 80082fe:	9207      	str	r2, [sp, #28]
 8008300:	001a      	movs	r2, r3
 8008302:	3a31      	subs	r2, #49	; 0x31
 8008304:	2a08      	cmp	r2, #8
 8008306:	d81a      	bhi.n	800833e <_strtod_l+0x322>
 8008308:	3b30      	subs	r3, #48	; 0x30
 800830a:	001a      	movs	r2, r3
 800830c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008312:	1c59      	adds	r1, r3, #1
 8008314:	911f      	str	r1, [sp, #124]	; 0x7c
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	001d      	movs	r5, r3
 800831a:	3d30      	subs	r5, #48	; 0x30
 800831c:	2d09      	cmp	r5, #9
 800831e:	d939      	bls.n	8008394 <_strtod_l+0x378>
 8008320:	9d07      	ldr	r5, [sp, #28]
 8008322:	1b49      	subs	r1, r1, r5
 8008324:	4db0      	ldr	r5, [pc, #704]	; (80085e8 <_strtod_l+0x5cc>)
 8008326:	9507      	str	r5, [sp, #28]
 8008328:	2908      	cmp	r1, #8
 800832a:	dc03      	bgt.n	8008334 <_strtod_l+0x318>
 800832c:	9207      	str	r2, [sp, #28]
 800832e:	42aa      	cmp	r2, r5
 8008330:	dd00      	ble.n	8008334 <_strtod_l+0x318>
 8008332:	9507      	str	r5, [sp, #28]
 8008334:	2c00      	cmp	r4, #0
 8008336:	d002      	beq.n	800833e <_strtod_l+0x322>
 8008338:	9a07      	ldr	r2, [sp, #28]
 800833a:	4252      	negs	r2, r2
 800833c:	9207      	str	r2, [sp, #28]
 800833e:	9a06      	ldr	r2, [sp, #24]
 8008340:	2a00      	cmp	r2, #0
 8008342:	d14b      	bne.n	80083dc <_strtod_l+0x3c0>
 8008344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008346:	4310      	orrs	r0, r2
 8008348:	d000      	beq.n	800834c <_strtod_l+0x330>
 800834a:	e6ae      	b.n	80080aa <_strtod_l+0x8e>
 800834c:	4662      	mov	r2, ip
 800834e:	2a00      	cmp	r2, #0
 8008350:	d000      	beq.n	8008354 <_strtod_l+0x338>
 8008352:	e6c9      	b.n	80080e8 <_strtod_l+0xcc>
 8008354:	2b69      	cmp	r3, #105	; 0x69
 8008356:	d025      	beq.n	80083a4 <_strtod_l+0x388>
 8008358:	dc21      	bgt.n	800839e <_strtod_l+0x382>
 800835a:	2b49      	cmp	r3, #73	; 0x49
 800835c:	d022      	beq.n	80083a4 <_strtod_l+0x388>
 800835e:	2b4e      	cmp	r3, #78	; 0x4e
 8008360:	d000      	beq.n	8008364 <_strtod_l+0x348>
 8008362:	e6c1      	b.n	80080e8 <_strtod_l+0xcc>
 8008364:	49a1      	ldr	r1, [pc, #644]	; (80085ec <_strtod_l+0x5d0>)
 8008366:	a81f      	add	r0, sp, #124	; 0x7c
 8008368:	f001 fb18 	bl	800999c <__match>
 800836c:	2800      	cmp	r0, #0
 800836e:	d100      	bne.n	8008372 <_strtod_l+0x356>
 8008370:	e6ba      	b.n	80080e8 <_strtod_l+0xcc>
 8008372:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b28      	cmp	r3, #40	; 0x28
 8008378:	d12a      	bne.n	80083d0 <_strtod_l+0x3b4>
 800837a:	499d      	ldr	r1, [pc, #628]	; (80085f0 <_strtod_l+0x5d4>)
 800837c:	aa22      	add	r2, sp, #136	; 0x88
 800837e:	a81f      	add	r0, sp, #124	; 0x7c
 8008380:	f001 fb20 	bl	80099c4 <__hexnan>
 8008384:	2805      	cmp	r0, #5
 8008386:	d123      	bne.n	80083d0 <_strtod_l+0x3b4>
 8008388:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800838a:	4a9a      	ldr	r2, [pc, #616]	; (80085f4 <_strtod_l+0x5d8>)
 800838c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800838e:	431a      	orrs	r2, r3
 8008390:	0017      	movs	r7, r2
 8008392:	e68a      	b.n	80080aa <_strtod_l+0x8e>
 8008394:	210a      	movs	r1, #10
 8008396:	434a      	muls	r2, r1
 8008398:	18d2      	adds	r2, r2, r3
 800839a:	3a30      	subs	r2, #48	; 0x30
 800839c:	e7b8      	b.n	8008310 <_strtod_l+0x2f4>
 800839e:	2b6e      	cmp	r3, #110	; 0x6e
 80083a0:	d0e0      	beq.n	8008364 <_strtod_l+0x348>
 80083a2:	e6a1      	b.n	80080e8 <_strtod_l+0xcc>
 80083a4:	4994      	ldr	r1, [pc, #592]	; (80085f8 <_strtod_l+0x5dc>)
 80083a6:	a81f      	add	r0, sp, #124	; 0x7c
 80083a8:	f001 faf8 	bl	800999c <__match>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d100      	bne.n	80083b2 <_strtod_l+0x396>
 80083b0:	e69a      	b.n	80080e8 <_strtod_l+0xcc>
 80083b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083b4:	4991      	ldr	r1, [pc, #580]	; (80085fc <_strtod_l+0x5e0>)
 80083b6:	3b01      	subs	r3, #1
 80083b8:	a81f      	add	r0, sp, #124	; 0x7c
 80083ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80083bc:	f001 faee 	bl	800999c <__match>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d102      	bne.n	80083ca <_strtod_l+0x3ae>
 80083c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083c6:	3301      	adds	r3, #1
 80083c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80083ca:	2600      	movs	r6, #0
 80083cc:	4f89      	ldr	r7, [pc, #548]	; (80085f4 <_strtod_l+0x5d8>)
 80083ce:	e66c      	b.n	80080aa <_strtod_l+0x8e>
 80083d0:	488b      	ldr	r0, [pc, #556]	; (8008600 <_strtod_l+0x5e4>)
 80083d2:	f002 fcdd 	bl	800ad90 <nan>
 80083d6:	0006      	movs	r6, r0
 80083d8:	000f      	movs	r7, r1
 80083da:	e666      	b.n	80080aa <_strtod_l+0x8e>
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	930a      	str	r3, [sp, #40]	; 0x28
 80083e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <_strtod_l+0x3d2>
 80083ea:	9b06      	ldr	r3, [sp, #24]
 80083ec:	9309      	str	r3, [sp, #36]	; 0x24
 80083ee:	9c06      	ldr	r4, [sp, #24]
 80083f0:	2c10      	cmp	r4, #16
 80083f2:	dd00      	ble.n	80083f6 <_strtod_l+0x3da>
 80083f4:	2410      	movs	r4, #16
 80083f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80083f8:	f7f9 ff90 	bl	800231c <__aeabi_ui2d>
 80083fc:	9b06      	ldr	r3, [sp, #24]
 80083fe:	0006      	movs	r6, r0
 8008400:	000f      	movs	r7, r1
 8008402:	2b09      	cmp	r3, #9
 8008404:	dd15      	ble.n	8008432 <_strtod_l+0x416>
 8008406:	0022      	movs	r2, r4
 8008408:	4b7e      	ldr	r3, [pc, #504]	; (8008604 <_strtod_l+0x5e8>)
 800840a:	3a09      	subs	r2, #9
 800840c:	00d2      	lsls	r2, r2, #3
 800840e:	189b      	adds	r3, r3, r2
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f7f9 f900 	bl	8001618 <__aeabi_dmul>
 8008418:	0006      	movs	r6, r0
 800841a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800841c:	000f      	movs	r7, r1
 800841e:	f7f9 ff7d 	bl	800231c <__aeabi_ui2d>
 8008422:	0002      	movs	r2, r0
 8008424:	000b      	movs	r3, r1
 8008426:	0030      	movs	r0, r6
 8008428:	0039      	movs	r1, r7
 800842a:	f7f8 f9b7 	bl	800079c <__aeabi_dadd>
 800842e:	0006      	movs	r6, r0
 8008430:	000f      	movs	r7, r1
 8008432:	9b06      	ldr	r3, [sp, #24]
 8008434:	2b0f      	cmp	r3, #15
 8008436:	dc39      	bgt.n	80084ac <_strtod_l+0x490>
 8008438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d100      	bne.n	8008440 <_strtod_l+0x424>
 800843e:	e634      	b.n	80080aa <_strtod_l+0x8e>
 8008440:	dd24      	ble.n	800848c <_strtod_l+0x470>
 8008442:	2b16      	cmp	r3, #22
 8008444:	dc09      	bgt.n	800845a <_strtod_l+0x43e>
 8008446:	496f      	ldr	r1, [pc, #444]	; (8008604 <_strtod_l+0x5e8>)
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	18c9      	adds	r1, r1, r3
 800844c:	0032      	movs	r2, r6
 800844e:	6808      	ldr	r0, [r1, #0]
 8008450:	6849      	ldr	r1, [r1, #4]
 8008452:	003b      	movs	r3, r7
 8008454:	f7f9 f8e0 	bl	8001618 <__aeabi_dmul>
 8008458:	e7bd      	b.n	80083d6 <_strtod_l+0x3ba>
 800845a:	2325      	movs	r3, #37	; 0x25
 800845c:	9a06      	ldr	r2, [sp, #24]
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008462:	4293      	cmp	r3, r2
 8008464:	db22      	blt.n	80084ac <_strtod_l+0x490>
 8008466:	240f      	movs	r4, #15
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	4d66      	ldr	r5, [pc, #408]	; (8008604 <_strtod_l+0x5e8>)
 800846c:	1ae4      	subs	r4, r4, r3
 800846e:	00e1      	lsls	r1, r4, #3
 8008470:	1869      	adds	r1, r5, r1
 8008472:	0032      	movs	r2, r6
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	6849      	ldr	r1, [r1, #4]
 8008478:	003b      	movs	r3, r7
 800847a:	f7f9 f8cd 	bl	8001618 <__aeabi_dmul>
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	1b1c      	subs	r4, r3, r4
 8008482:	00e4      	lsls	r4, r4, #3
 8008484:	192c      	adds	r4, r5, r4
 8008486:	6822      	ldr	r2, [r4, #0]
 8008488:	6863      	ldr	r3, [r4, #4]
 800848a:	e7e3      	b.n	8008454 <_strtod_l+0x438>
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	3316      	adds	r3, #22
 8008490:	db0c      	blt.n	80084ac <_strtod_l+0x490>
 8008492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008494:	9a07      	ldr	r2, [sp, #28]
 8008496:	0030      	movs	r0, r6
 8008498:	1a9a      	subs	r2, r3, r2
 800849a:	4b5a      	ldr	r3, [pc, #360]	; (8008604 <_strtod_l+0x5e8>)
 800849c:	00d2      	lsls	r2, r2, #3
 800849e:	189b      	adds	r3, r3, r2
 80084a0:	0039      	movs	r1, r7
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f7f8 fcb5 	bl	8000e14 <__aeabi_ddiv>
 80084aa:	e794      	b.n	80083d6 <_strtod_l+0x3ba>
 80084ac:	9b06      	ldr	r3, [sp, #24]
 80084ae:	1b1c      	subs	r4, r3, r4
 80084b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b2:	18e4      	adds	r4, r4, r3
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	dd72      	ble.n	800859e <_strtod_l+0x582>
 80084b8:	230f      	movs	r3, #15
 80084ba:	0021      	movs	r1, r4
 80084bc:	4019      	ands	r1, r3
 80084be:	421c      	tst	r4, r3
 80084c0:	d00a      	beq.n	80084d8 <_strtod_l+0x4bc>
 80084c2:	00cb      	lsls	r3, r1, #3
 80084c4:	494f      	ldr	r1, [pc, #316]	; (8008604 <_strtod_l+0x5e8>)
 80084c6:	0032      	movs	r2, r6
 80084c8:	18c9      	adds	r1, r1, r3
 80084ca:	6808      	ldr	r0, [r1, #0]
 80084cc:	6849      	ldr	r1, [r1, #4]
 80084ce:	003b      	movs	r3, r7
 80084d0:	f7f9 f8a2 	bl	8001618 <__aeabi_dmul>
 80084d4:	0006      	movs	r6, r0
 80084d6:	000f      	movs	r7, r1
 80084d8:	230f      	movs	r3, #15
 80084da:	439c      	bics	r4, r3
 80084dc:	d04a      	beq.n	8008574 <_strtod_l+0x558>
 80084de:	3326      	adds	r3, #38	; 0x26
 80084e0:	33ff      	adds	r3, #255	; 0xff
 80084e2:	429c      	cmp	r4, r3
 80084e4:	dd22      	ble.n	800852c <_strtod_l+0x510>
 80084e6:	2300      	movs	r3, #0
 80084e8:	9306      	str	r3, [sp, #24]
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ee:	9309      	str	r3, [sp, #36]	; 0x24
 80084f0:	2322      	movs	r3, #34	; 0x22
 80084f2:	2600      	movs	r6, #0
 80084f4:	9a05      	ldr	r2, [sp, #20]
 80084f6:	4f3f      	ldr	r7, [pc, #252]	; (80085f4 <_strtod_l+0x5d8>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	d100      	bne.n	8008502 <_strtod_l+0x4e6>
 8008500:	e5d3      	b.n	80080aa <_strtod_l+0x8e>
 8008502:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008504:	9805      	ldr	r0, [sp, #20]
 8008506:	f001 fbcb 	bl	8009ca0 <_Bfree>
 800850a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800850c:	9805      	ldr	r0, [sp, #20]
 800850e:	f001 fbc7 	bl	8009ca0 <_Bfree>
 8008512:	9907      	ldr	r1, [sp, #28]
 8008514:	9805      	ldr	r0, [sp, #20]
 8008516:	f001 fbc3 	bl	8009ca0 <_Bfree>
 800851a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800851c:	9805      	ldr	r0, [sp, #20]
 800851e:	f001 fbbf 	bl	8009ca0 <_Bfree>
 8008522:	9906      	ldr	r1, [sp, #24]
 8008524:	9805      	ldr	r0, [sp, #20]
 8008526:	f001 fbbb 	bl	8009ca0 <_Bfree>
 800852a:	e5be      	b.n	80080aa <_strtod_l+0x8e>
 800852c:	2300      	movs	r3, #0
 800852e:	0030      	movs	r0, r6
 8008530:	0039      	movs	r1, r7
 8008532:	4d35      	ldr	r5, [pc, #212]	; (8008608 <_strtod_l+0x5ec>)
 8008534:	1124      	asrs	r4, r4, #4
 8008536:	9308      	str	r3, [sp, #32]
 8008538:	2c01      	cmp	r4, #1
 800853a:	dc1e      	bgt.n	800857a <_strtod_l+0x55e>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <_strtod_l+0x528>
 8008540:	0006      	movs	r6, r0
 8008542:	000f      	movs	r7, r1
 8008544:	4b31      	ldr	r3, [pc, #196]	; (800860c <_strtod_l+0x5f0>)
 8008546:	0032      	movs	r2, r6
 8008548:	18ff      	adds	r7, r7, r3
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	00dd      	lsls	r5, r3, #3
 800854e:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <_strtod_l+0x5ec>)
 8008550:	195d      	adds	r5, r3, r5
 8008552:	6828      	ldr	r0, [r5, #0]
 8008554:	6869      	ldr	r1, [r5, #4]
 8008556:	003b      	movs	r3, r7
 8008558:	f7f9 f85e 	bl	8001618 <__aeabi_dmul>
 800855c:	4b25      	ldr	r3, [pc, #148]	; (80085f4 <_strtod_l+0x5d8>)
 800855e:	4a2c      	ldr	r2, [pc, #176]	; (8008610 <_strtod_l+0x5f4>)
 8008560:	0006      	movs	r6, r0
 8008562:	400b      	ands	r3, r1
 8008564:	4293      	cmp	r3, r2
 8008566:	d8be      	bhi.n	80084e6 <_strtod_l+0x4ca>
 8008568:	4a2a      	ldr	r2, [pc, #168]	; (8008614 <_strtod_l+0x5f8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d913      	bls.n	8008596 <_strtod_l+0x57a>
 800856e:	2601      	movs	r6, #1
 8008570:	4f29      	ldr	r7, [pc, #164]	; (8008618 <_strtod_l+0x5fc>)
 8008572:	4276      	negs	r6, r6
 8008574:	2300      	movs	r3, #0
 8008576:	9308      	str	r3, [sp, #32]
 8008578:	e087      	b.n	800868a <_strtod_l+0x66e>
 800857a:	2201      	movs	r2, #1
 800857c:	4214      	tst	r4, r2
 800857e:	d004      	beq.n	800858a <_strtod_l+0x56e>
 8008580:	682a      	ldr	r2, [r5, #0]
 8008582:	686b      	ldr	r3, [r5, #4]
 8008584:	f7f9 f848 	bl	8001618 <__aeabi_dmul>
 8008588:	2301      	movs	r3, #1
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	1064      	asrs	r4, r4, #1
 800858e:	3201      	adds	r2, #1
 8008590:	9208      	str	r2, [sp, #32]
 8008592:	3508      	adds	r5, #8
 8008594:	e7d0      	b.n	8008538 <_strtod_l+0x51c>
 8008596:	23d4      	movs	r3, #212	; 0xd4
 8008598:	049b      	lsls	r3, r3, #18
 800859a:	18cf      	adds	r7, r1, r3
 800859c:	e7ea      	b.n	8008574 <_strtod_l+0x558>
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d0e8      	beq.n	8008574 <_strtod_l+0x558>
 80085a2:	4264      	negs	r4, r4
 80085a4:	220f      	movs	r2, #15
 80085a6:	0023      	movs	r3, r4
 80085a8:	4013      	ands	r3, r2
 80085aa:	4214      	tst	r4, r2
 80085ac:	d00a      	beq.n	80085c4 <_strtod_l+0x5a8>
 80085ae:	00da      	lsls	r2, r3, #3
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <_strtod_l+0x5e8>)
 80085b2:	0030      	movs	r0, r6
 80085b4:	189b      	adds	r3, r3, r2
 80085b6:	0039      	movs	r1, r7
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f7f8 fc2a 	bl	8000e14 <__aeabi_ddiv>
 80085c0:	0006      	movs	r6, r0
 80085c2:	000f      	movs	r7, r1
 80085c4:	1124      	asrs	r4, r4, #4
 80085c6:	d0d5      	beq.n	8008574 <_strtod_l+0x558>
 80085c8:	2c1f      	cmp	r4, #31
 80085ca:	dd27      	ble.n	800861c <_strtod_l+0x600>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9306      	str	r3, [sp, #24]
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	2322      	movs	r3, #34	; 0x22
 80085d8:	9a05      	ldr	r2, [sp, #20]
 80085da:	2600      	movs	r6, #0
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e0:	2700      	movs	r7, #0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d18d      	bne.n	8008502 <_strtod_l+0x4e6>
 80085e6:	e560      	b.n	80080aa <_strtod_l+0x8e>
 80085e8:	00004e1f 	.word	0x00004e1f
 80085ec:	0800b949 	.word	0x0800b949
 80085f0:	0800b960 	.word	0x0800b960
 80085f4:	7ff00000 	.word	0x7ff00000
 80085f8:	0800b940 	.word	0x0800b940
 80085fc:	0800b943 	.word	0x0800b943
 8008600:	0800bd72 	.word	0x0800bd72
 8008604:	0800bc30 	.word	0x0800bc30
 8008608:	0800bc08 	.word	0x0800bc08
 800860c:	fcb00000 	.word	0xfcb00000
 8008610:	7ca00000 	.word	0x7ca00000
 8008614:	7c900000 	.word	0x7c900000
 8008618:	7fefffff 	.word	0x7fefffff
 800861c:	2310      	movs	r3, #16
 800861e:	0022      	movs	r2, r4
 8008620:	401a      	ands	r2, r3
 8008622:	9208      	str	r2, [sp, #32]
 8008624:	421c      	tst	r4, r3
 8008626:	d001      	beq.n	800862c <_strtod_l+0x610>
 8008628:	335a      	adds	r3, #90	; 0x5a
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	0030      	movs	r0, r6
 800862e:	0039      	movs	r1, r7
 8008630:	2300      	movs	r3, #0
 8008632:	4dc5      	ldr	r5, [pc, #788]	; (8008948 <_strtod_l+0x92c>)
 8008634:	2201      	movs	r2, #1
 8008636:	4214      	tst	r4, r2
 8008638:	d004      	beq.n	8008644 <_strtod_l+0x628>
 800863a:	682a      	ldr	r2, [r5, #0]
 800863c:	686b      	ldr	r3, [r5, #4]
 800863e:	f7f8 ffeb 	bl	8001618 <__aeabi_dmul>
 8008642:	2301      	movs	r3, #1
 8008644:	1064      	asrs	r4, r4, #1
 8008646:	3508      	adds	r5, #8
 8008648:	2c00      	cmp	r4, #0
 800864a:	d1f3      	bne.n	8008634 <_strtod_l+0x618>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <_strtod_l+0x638>
 8008650:	0006      	movs	r6, r0
 8008652:	000f      	movs	r7, r1
 8008654:	9b08      	ldr	r3, [sp, #32]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <_strtod_l+0x65e>
 800865a:	236b      	movs	r3, #107	; 0x6b
 800865c:	007a      	lsls	r2, r7, #1
 800865e:	0d52      	lsrs	r2, r2, #21
 8008660:	0039      	movs	r1, r7
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	dd08      	ble.n	800867a <_strtod_l+0x65e>
 8008668:	2b1f      	cmp	r3, #31
 800866a:	dc00      	bgt.n	800866e <_strtod_l+0x652>
 800866c:	e124      	b.n	80088b8 <_strtod_l+0x89c>
 800866e:	2600      	movs	r6, #0
 8008670:	2b34      	cmp	r3, #52	; 0x34
 8008672:	dc00      	bgt.n	8008676 <_strtod_l+0x65a>
 8008674:	e119      	b.n	80088aa <_strtod_l+0x88e>
 8008676:	27dc      	movs	r7, #220	; 0xdc
 8008678:	04bf      	lsls	r7, r7, #18
 800867a:	2200      	movs	r2, #0
 800867c:	2300      	movs	r3, #0
 800867e:	0030      	movs	r0, r6
 8008680:	0039      	movs	r1, r7
 8008682:	f7f7 feed 	bl	8000460 <__aeabi_dcmpeq>
 8008686:	2800      	cmp	r0, #0
 8008688:	d1a0      	bne.n	80085cc <_strtod_l+0x5b0>
 800868a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	9805      	ldr	r0, [sp, #20]
 8008696:	f001 fb6b 	bl	8009d70 <__s2b>
 800869a:	900b      	str	r0, [sp, #44]	; 0x2c
 800869c:	2800      	cmp	r0, #0
 800869e:	d100      	bne.n	80086a2 <_strtod_l+0x686>
 80086a0:	e721      	b.n	80084e6 <_strtod_l+0x4ca>
 80086a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a4:	9907      	ldr	r1, [sp, #28]
 80086a6:	17da      	asrs	r2, r3, #31
 80086a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086aa:	1a5b      	subs	r3, r3, r1
 80086ac:	401a      	ands	r2, r3
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	9215      	str	r2, [sp, #84]	; 0x54
 80086b2:	43db      	mvns	r3, r3
 80086b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b6:	17db      	asrs	r3, r3, #31
 80086b8:	401a      	ands	r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	921a      	str	r2, [sp, #104]	; 0x68
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	6859      	ldr	r1, [r3, #4]
 80086c8:	f001 faa6 	bl	8009c18 <_Balloc>
 80086cc:	9009      	str	r0, [sp, #36]	; 0x24
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d100      	bne.n	80086d4 <_strtod_l+0x6b8>
 80086d2:	e70d      	b.n	80084f0 <_strtod_l+0x4d4>
 80086d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	310c      	adds	r1, #12
 80086dc:	1c9a      	adds	r2, r3, #2
 80086de:	0092      	lsls	r2, r2, #2
 80086e0:	300c      	adds	r0, #12
 80086e2:	930c      	str	r3, [sp, #48]	; 0x30
 80086e4:	f7ff fbec 	bl	8007ec0 <memcpy>
 80086e8:	ab22      	add	r3, sp, #136	; 0x88
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	ab21      	add	r3, sp, #132	; 0x84
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	0032      	movs	r2, r6
 80086f2:	003b      	movs	r3, r7
 80086f4:	9805      	ldr	r0, [sp, #20]
 80086f6:	9612      	str	r6, [sp, #72]	; 0x48
 80086f8:	9713      	str	r7, [sp, #76]	; 0x4c
 80086fa:	f001 fe85 	bl	800a408 <__d2b>
 80086fe:	9020      	str	r0, [sp, #128]	; 0x80
 8008700:	2800      	cmp	r0, #0
 8008702:	d100      	bne.n	8008706 <_strtod_l+0x6ea>
 8008704:	e6f4      	b.n	80084f0 <_strtod_l+0x4d4>
 8008706:	2101      	movs	r1, #1
 8008708:	9805      	ldr	r0, [sp, #20]
 800870a:	f001 fbc5 	bl	8009e98 <__i2b>
 800870e:	9007      	str	r0, [sp, #28]
 8008710:	2800      	cmp	r0, #0
 8008712:	d100      	bne.n	8008716 <_strtod_l+0x6fa>
 8008714:	e6ec      	b.n	80084f0 <_strtod_l+0x4d4>
 8008716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008718:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800871a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800871c:	1ad4      	subs	r4, r2, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	db01      	blt.n	8008726 <_strtod_l+0x70a>
 8008722:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008724:	195d      	adds	r5, r3, r5
 8008726:	9908      	ldr	r1, [sp, #32]
 8008728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800872a:	1a5b      	subs	r3, r3, r1
 800872c:	2136      	movs	r1, #54	; 0x36
 800872e:	189b      	adds	r3, r3, r2
 8008730:	1a8a      	subs	r2, r1, r2
 8008732:	4986      	ldr	r1, [pc, #536]	; (800894c <_strtod_l+0x930>)
 8008734:	2001      	movs	r0, #1
 8008736:	468c      	mov	ip, r1
 8008738:	2100      	movs	r1, #0
 800873a:	3b01      	subs	r3, #1
 800873c:	9110      	str	r1, [sp, #64]	; 0x40
 800873e:	9014      	str	r0, [sp, #80]	; 0x50
 8008740:	4563      	cmp	r3, ip
 8008742:	da07      	bge.n	8008754 <_strtod_l+0x738>
 8008744:	4661      	mov	r1, ip
 8008746:	1ac9      	subs	r1, r1, r3
 8008748:	1a52      	subs	r2, r2, r1
 800874a:	291f      	cmp	r1, #31
 800874c:	dd00      	ble.n	8008750 <_strtod_l+0x734>
 800874e:	e0b8      	b.n	80088c2 <_strtod_l+0x8a6>
 8008750:	4088      	lsls	r0, r1
 8008752:	9014      	str	r0, [sp, #80]	; 0x50
 8008754:	18ab      	adds	r3, r5, r2
 8008756:	930c      	str	r3, [sp, #48]	; 0x30
 8008758:	18a4      	adds	r4, r4, r2
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800875e:	191c      	adds	r4, r3, r4
 8008760:	002b      	movs	r3, r5
 8008762:	4295      	cmp	r5, r2
 8008764:	dd00      	ble.n	8008768 <_strtod_l+0x74c>
 8008766:	0013      	movs	r3, r2
 8008768:	42a3      	cmp	r3, r4
 800876a:	dd00      	ble.n	800876e <_strtod_l+0x752>
 800876c:	0023      	movs	r3, r4
 800876e:	2b00      	cmp	r3, #0
 8008770:	dd04      	ble.n	800877c <_strtod_l+0x760>
 8008772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008774:	1ae4      	subs	r4, r4, r3
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	920c      	str	r2, [sp, #48]	; 0x30
 800877a:	1aed      	subs	r5, r5, r3
 800877c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd17      	ble.n	80087b2 <_strtod_l+0x796>
 8008782:	001a      	movs	r2, r3
 8008784:	9907      	ldr	r1, [sp, #28]
 8008786:	9805      	ldr	r0, [sp, #20]
 8008788:	f001 fc4c 	bl	800a024 <__pow5mult>
 800878c:	9007      	str	r0, [sp, #28]
 800878e:	2800      	cmp	r0, #0
 8008790:	d100      	bne.n	8008794 <_strtod_l+0x778>
 8008792:	e6ad      	b.n	80084f0 <_strtod_l+0x4d4>
 8008794:	0001      	movs	r1, r0
 8008796:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008798:	9805      	ldr	r0, [sp, #20]
 800879a:	f001 fb93 	bl	8009ec4 <__multiply>
 800879e:	900f      	str	r0, [sp, #60]	; 0x3c
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d100      	bne.n	80087a6 <_strtod_l+0x78a>
 80087a4:	e6a4      	b.n	80084f0 <_strtod_l+0x4d4>
 80087a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80087a8:	9805      	ldr	r0, [sp, #20]
 80087aa:	f001 fa79 	bl	8009ca0 <_Bfree>
 80087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087b0:	9320      	str	r3, [sp, #128]	; 0x80
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd00      	ble.n	80087ba <_strtod_l+0x79e>
 80087b8:	e089      	b.n	80088ce <_strtod_l+0x8b2>
 80087ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dd08      	ble.n	80087d2 <_strtod_l+0x7b6>
 80087c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c4:	9805      	ldr	r0, [sp, #20]
 80087c6:	f001 fc2d 	bl	800a024 <__pow5mult>
 80087ca:	9009      	str	r0, [sp, #36]	; 0x24
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d100      	bne.n	80087d2 <_strtod_l+0x7b6>
 80087d0:	e68e      	b.n	80084f0 <_strtod_l+0x4d4>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	dd08      	ble.n	80087e8 <_strtod_l+0x7cc>
 80087d6:	0022      	movs	r2, r4
 80087d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087da:	9805      	ldr	r0, [sp, #20]
 80087dc:	f001 fc7e 	bl	800a0dc <__lshift>
 80087e0:	9009      	str	r0, [sp, #36]	; 0x24
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d100      	bne.n	80087e8 <_strtod_l+0x7cc>
 80087e6:	e683      	b.n	80084f0 <_strtod_l+0x4d4>
 80087e8:	2d00      	cmp	r5, #0
 80087ea:	dd08      	ble.n	80087fe <_strtod_l+0x7e2>
 80087ec:	002a      	movs	r2, r5
 80087ee:	9907      	ldr	r1, [sp, #28]
 80087f0:	9805      	ldr	r0, [sp, #20]
 80087f2:	f001 fc73 	bl	800a0dc <__lshift>
 80087f6:	9007      	str	r0, [sp, #28]
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d100      	bne.n	80087fe <_strtod_l+0x7e2>
 80087fc:	e678      	b.n	80084f0 <_strtod_l+0x4d4>
 80087fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008800:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008802:	9805      	ldr	r0, [sp, #20]
 8008804:	f001 fcf4 	bl	800a1f0 <__mdiff>
 8008808:	9006      	str	r0, [sp, #24]
 800880a:	2800      	cmp	r0, #0
 800880c:	d100      	bne.n	8008810 <_strtod_l+0x7f4>
 800880e:	e66f      	b.n	80084f0 <_strtod_l+0x4d4>
 8008810:	2200      	movs	r2, #0
 8008812:	68c3      	ldr	r3, [r0, #12]
 8008814:	9907      	ldr	r1, [sp, #28]
 8008816:	60c2      	str	r2, [r0, #12]
 8008818:	930f      	str	r3, [sp, #60]	; 0x3c
 800881a:	f001 fccd 	bl	800a1b8 <__mcmp>
 800881e:	2800      	cmp	r0, #0
 8008820:	da5f      	bge.n	80088e2 <_strtod_l+0x8c6>
 8008822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008824:	4333      	orrs	r3, r6
 8008826:	d000      	beq.n	800882a <_strtod_l+0x80e>
 8008828:	e08a      	b.n	8008940 <_strtod_l+0x924>
 800882a:	033b      	lsls	r3, r7, #12
 800882c:	d000      	beq.n	8008830 <_strtod_l+0x814>
 800882e:	e087      	b.n	8008940 <_strtod_l+0x924>
 8008830:	22d6      	movs	r2, #214	; 0xd6
 8008832:	4b47      	ldr	r3, [pc, #284]	; (8008950 <_strtod_l+0x934>)
 8008834:	04d2      	lsls	r2, r2, #19
 8008836:	403b      	ands	r3, r7
 8008838:	4293      	cmp	r3, r2
 800883a:	d800      	bhi.n	800883e <_strtod_l+0x822>
 800883c:	e080      	b.n	8008940 <_strtod_l+0x924>
 800883e:	9b06      	ldr	r3, [sp, #24]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	930a      	str	r3, [sp, #40]	; 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <_strtod_l+0x836>
 8008848:	9b06      	ldr	r3, [sp, #24]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	930a      	str	r3, [sp, #40]	; 0x28
 800884e:	2b01      	cmp	r3, #1
 8008850:	dd76      	ble.n	8008940 <_strtod_l+0x924>
 8008852:	9906      	ldr	r1, [sp, #24]
 8008854:	2201      	movs	r2, #1
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f001 fc40 	bl	800a0dc <__lshift>
 800885c:	9907      	ldr	r1, [sp, #28]
 800885e:	9006      	str	r0, [sp, #24]
 8008860:	f001 fcaa 	bl	800a1b8 <__mcmp>
 8008864:	2800      	cmp	r0, #0
 8008866:	dd6b      	ble.n	8008940 <_strtod_l+0x924>
 8008868:	9908      	ldr	r1, [sp, #32]
 800886a:	003b      	movs	r3, r7
 800886c:	4a38      	ldr	r2, [pc, #224]	; (8008950 <_strtod_l+0x934>)
 800886e:	2900      	cmp	r1, #0
 8008870:	d100      	bne.n	8008874 <_strtod_l+0x858>
 8008872:	e092      	b.n	800899a <_strtod_l+0x97e>
 8008874:	0011      	movs	r1, r2
 8008876:	20d6      	movs	r0, #214	; 0xd6
 8008878:	4039      	ands	r1, r7
 800887a:	04c0      	lsls	r0, r0, #19
 800887c:	4281      	cmp	r1, r0
 800887e:	dd00      	ble.n	8008882 <_strtod_l+0x866>
 8008880:	e08b      	b.n	800899a <_strtod_l+0x97e>
 8008882:	23dc      	movs	r3, #220	; 0xdc
 8008884:	049b      	lsls	r3, r3, #18
 8008886:	4299      	cmp	r1, r3
 8008888:	dc00      	bgt.n	800888c <_strtod_l+0x870>
 800888a:	e6a4      	b.n	80085d6 <_strtod_l+0x5ba>
 800888c:	0030      	movs	r0, r6
 800888e:	0039      	movs	r1, r7
 8008890:	2200      	movs	r2, #0
 8008892:	4b30      	ldr	r3, [pc, #192]	; (8008954 <_strtod_l+0x938>)
 8008894:	f7f8 fec0 	bl	8001618 <__aeabi_dmul>
 8008898:	0006      	movs	r6, r0
 800889a:	000f      	movs	r7, r1
 800889c:	4308      	orrs	r0, r1
 800889e:	d000      	beq.n	80088a2 <_strtod_l+0x886>
 80088a0:	e62f      	b.n	8008502 <_strtod_l+0x4e6>
 80088a2:	2322      	movs	r3, #34	; 0x22
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	e62b      	b.n	8008502 <_strtod_l+0x4e6>
 80088aa:	234b      	movs	r3, #75	; 0x4b
 80088ac:	1a9a      	subs	r2, r3, r2
 80088ae:	3b4c      	subs	r3, #76	; 0x4c
 80088b0:	4093      	lsls	r3, r2
 80088b2:	4019      	ands	r1, r3
 80088b4:	000f      	movs	r7, r1
 80088b6:	e6e0      	b.n	800867a <_strtod_l+0x65e>
 80088b8:	2201      	movs	r2, #1
 80088ba:	4252      	negs	r2, r2
 80088bc:	409a      	lsls	r2, r3
 80088be:	4016      	ands	r6, r2
 80088c0:	e6db      	b.n	800867a <_strtod_l+0x65e>
 80088c2:	4925      	ldr	r1, [pc, #148]	; (8008958 <_strtod_l+0x93c>)
 80088c4:	1acb      	subs	r3, r1, r3
 80088c6:	0001      	movs	r1, r0
 80088c8:	4099      	lsls	r1, r3
 80088ca:	9110      	str	r1, [sp, #64]	; 0x40
 80088cc:	e741      	b.n	8008752 <_strtod_l+0x736>
 80088ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	f001 fc02 	bl	800a0dc <__lshift>
 80088d8:	9020      	str	r0, [sp, #128]	; 0x80
 80088da:	2800      	cmp	r0, #0
 80088dc:	d000      	beq.n	80088e0 <_strtod_l+0x8c4>
 80088de:	e76c      	b.n	80087ba <_strtod_l+0x79e>
 80088e0:	e606      	b.n	80084f0 <_strtod_l+0x4d4>
 80088e2:	970c      	str	r7, [sp, #48]	; 0x30
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d176      	bne.n	80089d6 <_strtod_l+0x9ba>
 80088e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ea:	033b      	lsls	r3, r7, #12
 80088ec:	0b1b      	lsrs	r3, r3, #12
 80088ee:	2a00      	cmp	r2, #0
 80088f0:	d038      	beq.n	8008964 <_strtod_l+0x948>
 80088f2:	4a1a      	ldr	r2, [pc, #104]	; (800895c <_strtod_l+0x940>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d138      	bne.n	800896a <_strtod_l+0x94e>
 80088f8:	2201      	movs	r2, #1
 80088fa:	9b08      	ldr	r3, [sp, #32]
 80088fc:	4252      	negs	r2, r2
 80088fe:	0031      	movs	r1, r6
 8008900:	0010      	movs	r0, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <_strtod_l+0x902>
 8008906:	24d4      	movs	r4, #212	; 0xd4
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <_strtod_l+0x934>)
 800890a:	0010      	movs	r0, r2
 800890c:	403b      	ands	r3, r7
 800890e:	04e4      	lsls	r4, r4, #19
 8008910:	42a3      	cmp	r3, r4
 8008912:	d804      	bhi.n	800891e <_strtod_l+0x902>
 8008914:	306c      	adds	r0, #108	; 0x6c
 8008916:	0d1b      	lsrs	r3, r3, #20
 8008918:	1ac3      	subs	r3, r0, r3
 800891a:	409a      	lsls	r2, r3
 800891c:	0010      	movs	r0, r2
 800891e:	4281      	cmp	r1, r0
 8008920:	d123      	bne.n	800896a <_strtod_l+0x94e>
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <_strtod_l+0x944>)
 8008924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008926:	429a      	cmp	r2, r3
 8008928:	d102      	bne.n	8008930 <_strtod_l+0x914>
 800892a:	1c4b      	adds	r3, r1, #1
 800892c:	d100      	bne.n	8008930 <_strtod_l+0x914>
 800892e:	e5df      	b.n	80084f0 <_strtod_l+0x4d4>
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <_strtod_l+0x934>)
 8008932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008934:	2600      	movs	r6, #0
 8008936:	401a      	ands	r2, r3
 8008938:	0013      	movs	r3, r2
 800893a:	2280      	movs	r2, #128	; 0x80
 800893c:	0352      	lsls	r2, r2, #13
 800893e:	189f      	adds	r7, r3, r2
 8008940:	9b08      	ldr	r3, [sp, #32]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1a2      	bne.n	800888c <_strtod_l+0x870>
 8008946:	e5dc      	b.n	8008502 <_strtod_l+0x4e6>
 8008948:	0800b978 	.word	0x0800b978
 800894c:	fffffc02 	.word	0xfffffc02
 8008950:	7ff00000 	.word	0x7ff00000
 8008954:	39500000 	.word	0x39500000
 8008958:	fffffbe2 	.word	0xfffffbe2
 800895c:	000fffff 	.word	0x000fffff
 8008960:	7fefffff 	.word	0x7fefffff
 8008964:	4333      	orrs	r3, r6
 8008966:	d100      	bne.n	800896a <_strtod_l+0x94e>
 8008968:	e77e      	b.n	8008868 <_strtod_l+0x84c>
 800896a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01d      	beq.n	80089ac <_strtod_l+0x990>
 8008970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008972:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008974:	4213      	tst	r3, r2
 8008976:	d0e3      	beq.n	8008940 <_strtod_l+0x924>
 8008978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800897a:	0030      	movs	r0, r6
 800897c:	0039      	movs	r1, r7
 800897e:	9a08      	ldr	r2, [sp, #32]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d017      	beq.n	80089b4 <_strtod_l+0x998>
 8008984:	f7ff fb32 	bl	8007fec <sulp>
 8008988:	0002      	movs	r2, r0
 800898a:	000b      	movs	r3, r1
 800898c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800898e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008990:	f7f7 ff04 	bl	800079c <__aeabi_dadd>
 8008994:	0006      	movs	r6, r0
 8008996:	000f      	movs	r7, r1
 8008998:	e7d2      	b.n	8008940 <_strtod_l+0x924>
 800899a:	2601      	movs	r6, #1
 800899c:	4013      	ands	r3, r2
 800899e:	4a99      	ldr	r2, [pc, #612]	; (8008c04 <_strtod_l+0xbe8>)
 80089a0:	4276      	negs	r6, r6
 80089a2:	189b      	adds	r3, r3, r2
 80089a4:	4a98      	ldr	r2, [pc, #608]	; (8008c08 <_strtod_l+0xbec>)
 80089a6:	431a      	orrs	r2, r3
 80089a8:	0017      	movs	r7, r2
 80089aa:	e7c9      	b.n	8008940 <_strtod_l+0x924>
 80089ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089ae:	4233      	tst	r3, r6
 80089b0:	d0c6      	beq.n	8008940 <_strtod_l+0x924>
 80089b2:	e7e1      	b.n	8008978 <_strtod_l+0x95c>
 80089b4:	f7ff fb1a 	bl	8007fec <sulp>
 80089b8:	0002      	movs	r2, r0
 80089ba:	000b      	movs	r3, r1
 80089bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089c0:	f7f9 f896 	bl	8001af0 <__aeabi_dsub>
 80089c4:	2200      	movs	r2, #0
 80089c6:	2300      	movs	r3, #0
 80089c8:	0006      	movs	r6, r0
 80089ca:	000f      	movs	r7, r1
 80089cc:	f7f7 fd48 	bl	8000460 <__aeabi_dcmpeq>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d0b5      	beq.n	8008940 <_strtod_l+0x924>
 80089d4:	e5ff      	b.n	80085d6 <_strtod_l+0x5ba>
 80089d6:	9907      	ldr	r1, [sp, #28]
 80089d8:	9806      	ldr	r0, [sp, #24]
 80089da:	f001 fd79 	bl	800a4d0 <__ratio>
 80089de:	2380      	movs	r3, #128	; 0x80
 80089e0:	2200      	movs	r2, #0
 80089e2:	05db      	lsls	r3, r3, #23
 80089e4:	0004      	movs	r4, r0
 80089e6:	000d      	movs	r5, r1
 80089e8:	f7f7 fd4a 	bl	8000480 <__aeabi_dcmple>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d075      	beq.n	8008adc <_strtod_l+0xac0>
 80089f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d047      	beq.n	8008a86 <_strtod_l+0xa6a>
 80089f6:	2300      	movs	r3, #0
 80089f8:	4c84      	ldr	r4, [pc, #528]	; (8008c0c <_strtod_l+0xbf0>)
 80089fa:	2500      	movs	r5, #0
 80089fc:	9310      	str	r3, [sp, #64]	; 0x40
 80089fe:	9411      	str	r4, [sp, #68]	; 0x44
 8008a00:	4c82      	ldr	r4, [pc, #520]	; (8008c0c <_strtod_l+0xbf0>)
 8008a02:	4a83      	ldr	r2, [pc, #524]	; (8008c10 <_strtod_l+0xbf4>)
 8008a04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a06:	4013      	ands	r3, r2
 8008a08:	9314      	str	r3, [sp, #80]	; 0x50
 8008a0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a0c:	4b81      	ldr	r3, [pc, #516]	; (8008c14 <_strtod_l+0xbf8>)
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d000      	beq.n	8008a14 <_strtod_l+0x9f8>
 8008a12:	e0ac      	b.n	8008b6e <_strtod_l+0xb52>
 8008a14:	4a80      	ldr	r2, [pc, #512]	; (8008c18 <_strtod_l+0xbfc>)
 8008a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a18:	4694      	mov	ip, r2
 8008a1a:	4463      	add	r3, ip
 8008a1c:	001f      	movs	r7, r3
 8008a1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a22:	0030      	movs	r0, r6
 8008a24:	0039      	movs	r1, r7
 8008a26:	920c      	str	r2, [sp, #48]	; 0x30
 8008a28:	930d      	str	r3, [sp, #52]	; 0x34
 8008a2a:	f001 fc79 	bl	800a320 <__ulp>
 8008a2e:	0002      	movs	r2, r0
 8008a30:	000b      	movs	r3, r1
 8008a32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a36:	f7f8 fdef 	bl	8001618 <__aeabi_dmul>
 8008a3a:	0032      	movs	r2, r6
 8008a3c:	003b      	movs	r3, r7
 8008a3e:	f7f7 fead 	bl	800079c <__aeabi_dadd>
 8008a42:	4a73      	ldr	r2, [pc, #460]	; (8008c10 <_strtod_l+0xbf4>)
 8008a44:	4b75      	ldr	r3, [pc, #468]	; (8008c1c <_strtod_l+0xc00>)
 8008a46:	0006      	movs	r6, r0
 8008a48:	400a      	ands	r2, r1
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d95e      	bls.n	8008b0c <_strtod_l+0xaf0>
 8008a4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a50:	4b73      	ldr	r3, [pc, #460]	; (8008c20 <_strtod_l+0xc04>)
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d103      	bne.n	8008a5e <_strtod_l+0xa42>
 8008a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a58:	3301      	adds	r3, #1
 8008a5a:	d100      	bne.n	8008a5e <_strtod_l+0xa42>
 8008a5c:	e548      	b.n	80084f0 <_strtod_l+0x4d4>
 8008a5e:	2601      	movs	r6, #1
 8008a60:	4f6f      	ldr	r7, [pc, #444]	; (8008c20 <_strtod_l+0xc04>)
 8008a62:	4276      	negs	r6, r6
 8008a64:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008a66:	9805      	ldr	r0, [sp, #20]
 8008a68:	f001 f91a 	bl	8009ca0 <_Bfree>
 8008a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a6e:	9805      	ldr	r0, [sp, #20]
 8008a70:	f001 f916 	bl	8009ca0 <_Bfree>
 8008a74:	9907      	ldr	r1, [sp, #28]
 8008a76:	9805      	ldr	r0, [sp, #20]
 8008a78:	f001 f912 	bl	8009ca0 <_Bfree>
 8008a7c:	9906      	ldr	r1, [sp, #24]
 8008a7e:	9805      	ldr	r0, [sp, #20]
 8008a80:	f001 f90e 	bl	8009ca0 <_Bfree>
 8008a84:	e61d      	b.n	80086c2 <_strtod_l+0x6a6>
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	d11c      	bne.n	8008ac4 <_strtod_l+0xaa8>
 8008a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a8c:	031b      	lsls	r3, r3, #12
 8008a8e:	d11f      	bne.n	8008ad0 <_strtod_l+0xab4>
 8008a90:	2200      	movs	r2, #0
 8008a92:	0020      	movs	r0, r4
 8008a94:	0029      	movs	r1, r5
 8008a96:	4b5d      	ldr	r3, [pc, #372]	; (8008c0c <_strtod_l+0xbf0>)
 8008a98:	f7f7 fce8 	bl	800046c <__aeabi_dcmplt>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d11a      	bne.n	8008ad6 <_strtod_l+0xaba>
 8008aa0:	0020      	movs	r0, r4
 8008aa2:	0029      	movs	r1, r5
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b5f      	ldr	r3, [pc, #380]	; (8008c24 <_strtod_l+0xc08>)
 8008aa8:	f7f8 fdb6 	bl	8001618 <__aeabi_dmul>
 8008aac:	0005      	movs	r5, r0
 8008aae:	000c      	movs	r4, r1
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	061b      	lsls	r3, r3, #24
 8008ab4:	18e3      	adds	r3, r4, r3
 8008ab6:	951c      	str	r5, [sp, #112]	; 0x70
 8008ab8:	931d      	str	r3, [sp, #116]	; 0x74
 8008aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008abe:	9210      	str	r2, [sp, #64]	; 0x40
 8008ac0:	9311      	str	r3, [sp, #68]	; 0x44
 8008ac2:	e79e      	b.n	8008a02 <_strtod_l+0x9e6>
 8008ac4:	2e01      	cmp	r6, #1
 8008ac6:	d103      	bne.n	8008ad0 <_strtod_l+0xab4>
 8008ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d100      	bne.n	8008ad0 <_strtod_l+0xab4>
 8008ace:	e582      	b.n	80085d6 <_strtod_l+0x5ba>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4c55      	ldr	r4, [pc, #340]	; (8008c28 <_strtod_l+0xc0c>)
 8008ad4:	e791      	b.n	80089fa <_strtod_l+0x9de>
 8008ad6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ad8:	4c52      	ldr	r4, [pc, #328]	; (8008c24 <_strtod_l+0xc08>)
 8008ada:	e7e9      	b.n	8008ab0 <_strtod_l+0xa94>
 8008adc:	2200      	movs	r2, #0
 8008ade:	0020      	movs	r0, r4
 8008ae0:	0029      	movs	r1, r5
 8008ae2:	4b50      	ldr	r3, [pc, #320]	; (8008c24 <_strtod_l+0xc08>)
 8008ae4:	f7f8 fd98 	bl	8001618 <__aeabi_dmul>
 8008ae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aea:	0005      	movs	r5, r0
 8008aec:	000b      	movs	r3, r1
 8008aee:	000c      	movs	r4, r1
 8008af0:	2a00      	cmp	r2, #0
 8008af2:	d107      	bne.n	8008b04 <_strtod_l+0xae8>
 8008af4:	2280      	movs	r2, #128	; 0x80
 8008af6:	0612      	lsls	r2, r2, #24
 8008af8:	188b      	adds	r3, r1, r2
 8008afa:	9016      	str	r0, [sp, #88]	; 0x58
 8008afc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008afe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b02:	e7dc      	b.n	8008abe <_strtod_l+0xaa2>
 8008b04:	0002      	movs	r2, r0
 8008b06:	9216      	str	r2, [sp, #88]	; 0x58
 8008b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b0a:	e7f8      	b.n	8008afe <_strtod_l+0xae2>
 8008b0c:	23d4      	movs	r3, #212	; 0xd4
 8008b0e:	049b      	lsls	r3, r3, #18
 8008b10:	18cf      	adds	r7, r1, r3
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1a5      	bne.n	8008a64 <_strtod_l+0xa48>
 8008b18:	4b3d      	ldr	r3, [pc, #244]	; (8008c10 <_strtod_l+0xbf4>)
 8008b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b1c:	403b      	ands	r3, r7
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d1a0      	bne.n	8008a64 <_strtod_l+0xa48>
 8008b22:	0028      	movs	r0, r5
 8008b24:	0021      	movs	r1, r4
 8008b26:	f7f7 fd21 	bl	800056c <__aeabi_d2lz>
 8008b2a:	f7f7 fd5b 	bl	80005e4 <__aeabi_l2d>
 8008b2e:	0002      	movs	r2, r0
 8008b30:	000b      	movs	r3, r1
 8008b32:	0028      	movs	r0, r5
 8008b34:	0021      	movs	r1, r4
 8008b36:	f7f8 ffdb 	bl	8001af0 <__aeabi_dsub>
 8008b3a:	033b      	lsls	r3, r7, #12
 8008b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b3e:	0b1b      	lsrs	r3, r3, #12
 8008b40:	4333      	orrs	r3, r6
 8008b42:	4313      	orrs	r3, r2
 8008b44:	0004      	movs	r4, r0
 8008b46:	000d      	movs	r5, r1
 8008b48:	4a38      	ldr	r2, [pc, #224]	; (8008c2c <_strtod_l+0xc10>)
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d055      	beq.n	8008bfa <_strtod_l+0xbde>
 8008b4e:	4b38      	ldr	r3, [pc, #224]	; (8008c30 <_strtod_l+0xc14>)
 8008b50:	f7f7 fc8c 	bl	800046c <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d000      	beq.n	8008b5a <_strtod_l+0xb3e>
 8008b58:	e4d3      	b.n	8008502 <_strtod_l+0x4e6>
 8008b5a:	0020      	movs	r0, r4
 8008b5c:	0029      	movs	r1, r5
 8008b5e:	4a35      	ldr	r2, [pc, #212]	; (8008c34 <_strtod_l+0xc18>)
 8008b60:	4b30      	ldr	r3, [pc, #192]	; (8008c24 <_strtod_l+0xc08>)
 8008b62:	f7f7 fc97 	bl	8000494 <__aeabi_dcmpgt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d100      	bne.n	8008b6c <_strtod_l+0xb50>
 8008b6a:	e77b      	b.n	8008a64 <_strtod_l+0xa48>
 8008b6c:	e4c9      	b.n	8008502 <_strtod_l+0x4e6>
 8008b6e:	9b08      	ldr	r3, [sp, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d02b      	beq.n	8008bcc <_strtod_l+0xbb0>
 8008b74:	23d4      	movs	r3, #212	; 0xd4
 8008b76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b78:	04db      	lsls	r3, r3, #19
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d826      	bhi.n	8008bcc <_strtod_l+0xbb0>
 8008b7e:	0028      	movs	r0, r5
 8008b80:	0021      	movs	r1, r4
 8008b82:	4a2d      	ldr	r2, [pc, #180]	; (8008c38 <_strtod_l+0xc1c>)
 8008b84:	4b2d      	ldr	r3, [pc, #180]	; (8008c3c <_strtod_l+0xc20>)
 8008b86:	f7f7 fc7b 	bl	8000480 <__aeabi_dcmple>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d017      	beq.n	8008bbe <_strtod_l+0xba2>
 8008b8e:	0028      	movs	r0, r5
 8008b90:	0021      	movs	r1, r4
 8008b92:	f7f7 fccd 	bl	8000530 <__aeabi_d2uiz>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d100      	bne.n	8008b9c <_strtod_l+0xb80>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f7f9 fbbe 	bl	800231c <__aeabi_ui2d>
 8008ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ba2:	0005      	movs	r5, r0
 8008ba4:	000b      	movs	r3, r1
 8008ba6:	000c      	movs	r4, r1
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	d122      	bne.n	8008bf2 <_strtod_l+0xbd6>
 8008bac:	2280      	movs	r2, #128	; 0x80
 8008bae:	0612      	lsls	r2, r2, #24
 8008bb0:	188b      	adds	r3, r1, r2
 8008bb2:	9018      	str	r0, [sp, #96]	; 0x60
 8008bb4:	9319      	str	r3, [sp, #100]	; 0x64
 8008bb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008bba:	9210      	str	r2, [sp, #64]	; 0x40
 8008bbc:	9311      	str	r3, [sp, #68]	; 0x44
 8008bbe:	22d6      	movs	r2, #214	; 0xd6
 8008bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bc2:	04d2      	lsls	r2, r2, #19
 8008bc4:	189b      	adds	r3, r3, r2
 8008bc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	9311      	str	r3, [sp, #68]	; 0x44
 8008bcc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008bd0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008bd2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8008bd4:	f001 fba4 	bl	800a320 <__ulp>
 8008bd8:	0002      	movs	r2, r0
 8008bda:	000b      	movs	r3, r1
 8008bdc:	0030      	movs	r0, r6
 8008bde:	0039      	movs	r1, r7
 8008be0:	f7f8 fd1a 	bl	8001618 <__aeabi_dmul>
 8008be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008be8:	f7f7 fdd8 	bl	800079c <__aeabi_dadd>
 8008bec:	0006      	movs	r6, r0
 8008bee:	000f      	movs	r7, r1
 8008bf0:	e78f      	b.n	8008b12 <_strtod_l+0xaf6>
 8008bf2:	0002      	movs	r2, r0
 8008bf4:	9218      	str	r2, [sp, #96]	; 0x60
 8008bf6:	9319      	str	r3, [sp, #100]	; 0x64
 8008bf8:	e7dd      	b.n	8008bb6 <_strtod_l+0xb9a>
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <_strtod_l+0xc24>)
 8008bfc:	f7f7 fc36 	bl	800046c <__aeabi_dcmplt>
 8008c00:	e7b1      	b.n	8008b66 <_strtod_l+0xb4a>
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	fff00000 	.word	0xfff00000
 8008c08:	000fffff 	.word	0x000fffff
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	7fe00000 	.word	0x7fe00000
 8008c18:	fcb00000 	.word	0xfcb00000
 8008c1c:	7c9fffff 	.word	0x7c9fffff
 8008c20:	7fefffff 	.word	0x7fefffff
 8008c24:	3fe00000 	.word	0x3fe00000
 8008c28:	bff00000 	.word	0xbff00000
 8008c2c:	94a03595 	.word	0x94a03595
 8008c30:	3fdfffff 	.word	0x3fdfffff
 8008c34:	35afe535 	.word	0x35afe535
 8008c38:	ffc00000 	.word	0xffc00000
 8008c3c:	41dfffff 	.word	0x41dfffff
 8008c40:	3fcfffff 	.word	0x3fcfffff

08008c44 <strtof>:
 8008c44:	000a      	movs	r2, r1
 8008c46:	0001      	movs	r1, r0
 8008c48:	4824      	ldr	r0, [pc, #144]	; (8008cdc <strtof+0x98>)
 8008c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <strtof+0x9c>)
 8008c50:	f7ff f9e4 	bl	800801c <_strtod_l>
 8008c54:	0006      	movs	r6, r0
 8008c56:	000c      	movs	r4, r1
 8008c58:	0002      	movs	r2, r0
 8008c5a:	000b      	movs	r3, r1
 8008c5c:	0030      	movs	r0, r6
 8008c5e:	0021      	movs	r1, r4
 8008c60:	f7f9 fad8 	bl	8002214 <__aeabi_dcmpun>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d00d      	beq.n	8008c84 <strtof+0x40>
 8008c68:	481e      	ldr	r0, [pc, #120]	; (8008ce4 <strtof+0xa0>)
 8008c6a:	2c00      	cmp	r4, #0
 8008c6c:	da06      	bge.n	8008c7c <strtof+0x38>
 8008c6e:	f002 f8a7 	bl	800adc0 <nanf>
 8008c72:	2380      	movs	r3, #128	; 0x80
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	18c5      	adds	r5, r0, r3
 8008c78:	1c28      	adds	r0, r5, #0
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	f002 f8a0 	bl	800adc0 <nanf>
 8008c80:	1c05      	adds	r5, r0, #0
 8008c82:	e7f9      	b.n	8008c78 <strtof+0x34>
 8008c84:	0021      	movs	r1, r4
 8008c86:	0030      	movs	r0, r6
 8008c88:	f7f9 fb6e 	bl	8002368 <__aeabi_d2f>
 8008c8c:	0047      	lsls	r7, r0, #1
 8008c8e:	087f      	lsrs	r7, r7, #1
 8008c90:	1c05      	adds	r5, r0, #0
 8008c92:	4915      	ldr	r1, [pc, #84]	; (8008ce8 <strtof+0xa4>)
 8008c94:	1c38      	adds	r0, r7, #0
 8008c96:	f7f7 fd6b 	bl	8000770 <__aeabi_fcmpun>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d1ec      	bne.n	8008c78 <strtof+0x34>
 8008c9e:	4912      	ldr	r1, [pc, #72]	; (8008ce8 <strtof+0xa4>)
 8008ca0:	1c38      	adds	r0, r7, #0
 8008ca2:	f7f7 fc27 	bl	80004f4 <__aeabi_fcmple>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d1e6      	bne.n	8008c78 <strtof+0x34>
 8008caa:	2201      	movs	r2, #1
 8008cac:	0064      	lsls	r4, r4, #1
 8008cae:	0864      	lsrs	r4, r4, #1
 8008cb0:	0030      	movs	r0, r6
 8008cb2:	0021      	movs	r1, r4
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	; (8008cec <strtof+0xa8>)
 8008cb6:	4252      	negs	r2, r2
 8008cb8:	f7f9 faac 	bl	8002214 <__aeabi_dcmpun>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d108      	bne.n	8008cd2 <strtof+0x8e>
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	0030      	movs	r0, r6
 8008cc4:	0021      	movs	r1, r4
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <strtof+0xa8>)
 8008cc8:	4252      	negs	r2, r2
 8008cca:	f7f7 fbd9 	bl	8000480 <__aeabi_dcmple>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0d2      	beq.n	8008c78 <strtof+0x34>
 8008cd2:	2222      	movs	r2, #34	; 0x22
 8008cd4:	4b01      	ldr	r3, [pc, #4]	; (8008cdc <strtof+0x98>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e7cd      	b.n	8008c78 <strtof+0x34>
 8008cdc:	200000a0 	.word	0x200000a0
 8008ce0:	20000108 	.word	0x20000108
 8008ce4:	0800bd72 	.word	0x0800bd72
 8008ce8:	7f7fffff 	.word	0x7f7fffff
 8008cec:	7fefffff 	.word	0x7fefffff

08008cf0 <__strtok_r>:
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d102      	bne.n	8008cfc <__strtok_r+0xc>
 8008cf6:	6810      	ldr	r0, [r2, #0]
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d013      	beq.n	8008d24 <__strtok_r+0x34>
 8008cfc:	0004      	movs	r4, r0
 8008cfe:	0020      	movs	r0, r4
 8008d00:	000e      	movs	r6, r1
 8008d02:	7805      	ldrb	r5, [r0, #0]
 8008d04:	3401      	adds	r4, #1
 8008d06:	7837      	ldrb	r7, [r6, #0]
 8008d08:	2f00      	cmp	r7, #0
 8008d0a:	d104      	bne.n	8008d16 <__strtok_r+0x26>
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d10f      	bne.n	8008d30 <__strtok_r+0x40>
 8008d10:	0028      	movs	r0, r5
 8008d12:	6015      	str	r5, [r2, #0]
 8008d14:	e006      	b.n	8008d24 <__strtok_r+0x34>
 8008d16:	3601      	adds	r6, #1
 8008d18:	42bd      	cmp	r5, r7
 8008d1a:	d1f4      	bne.n	8008d06 <__strtok_r+0x16>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1ee      	bne.n	8008cfe <__strtok_r+0xe>
 8008d20:	6014      	str	r4, [r2, #0]
 8008d22:	7003      	strb	r3, [r0, #0]
 8008d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d26:	002f      	movs	r7, r5
 8008d28:	e00f      	b.n	8008d4a <__strtok_r+0x5a>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	2e00      	cmp	r6, #0
 8008d2e:	d104      	bne.n	8008d3a <__strtok_r+0x4a>
 8008d30:	0023      	movs	r3, r4
 8008d32:	3401      	adds	r4, #1
 8008d34:	781d      	ldrb	r5, [r3, #0]
 8008d36:	0027      	movs	r7, r4
 8008d38:	000b      	movs	r3, r1
 8008d3a:	781e      	ldrb	r6, [r3, #0]
 8008d3c:	42b5      	cmp	r5, r6
 8008d3e:	d1f4      	bne.n	8008d2a <__strtok_r+0x3a>
 8008d40:	2d00      	cmp	r5, #0
 8008d42:	d0f0      	beq.n	8008d26 <__strtok_r+0x36>
 8008d44:	2300      	movs	r3, #0
 8008d46:	3c01      	subs	r4, #1
 8008d48:	7023      	strb	r3, [r4, #0]
 8008d4a:	6017      	str	r7, [r2, #0]
 8008d4c:	e7ea      	b.n	8008d24 <__strtok_r+0x34>

08008d4e <strtok_r>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	2301      	movs	r3, #1
 8008d52:	f7ff ffcd 	bl	8008cf0 <__strtok_r>
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <_strtoul_l.constprop.0>:
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	9202      	str	r2, [sp, #8]
 8008d5e:	4a42      	ldr	r2, [pc, #264]	; (8008e68 <_strtoul_l.constprop.0+0x110>)
 8008d60:	001e      	movs	r6, r3
 8008d62:	9101      	str	r1, [sp, #4]
 8008d64:	000b      	movs	r3, r1
 8008d66:	4694      	mov	ip, r2
 8008d68:	2108      	movs	r1, #8
 8008d6a:	9005      	str	r0, [sp, #20]
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	4660      	mov	r0, ip
 8008d70:	7814      	ldrb	r4, [r2, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	5d00      	ldrb	r0, [r0, r4]
 8008d76:	001d      	movs	r5, r3
 8008d78:	0007      	movs	r7, r0
 8008d7a:	400f      	ands	r7, r1
 8008d7c:	4208      	tst	r0, r1
 8008d7e:	d1f5      	bne.n	8008d6c <_strtoul_l.constprop.0+0x14>
 8008d80:	2c2d      	cmp	r4, #45	; 0x2d
 8008d82:	d13a      	bne.n	8008dfa <_strtoul_l.constprop.0+0xa2>
 8008d84:	2701      	movs	r7, #1
 8008d86:	781c      	ldrb	r4, [r3, #0]
 8008d88:	1c95      	adds	r5, r2, #2
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	d067      	beq.n	8008e5e <_strtoul_l.constprop.0+0x106>
 8008d8e:	2e10      	cmp	r6, #16
 8008d90:	d109      	bne.n	8008da6 <_strtoul_l.constprop.0+0x4e>
 8008d92:	2c30      	cmp	r4, #48	; 0x30
 8008d94:	d107      	bne.n	8008da6 <_strtoul_l.constprop.0+0x4e>
 8008d96:	2220      	movs	r2, #32
 8008d98:	782b      	ldrb	r3, [r5, #0]
 8008d9a:	4393      	bics	r3, r2
 8008d9c:	2b58      	cmp	r3, #88	; 0x58
 8008d9e:	d159      	bne.n	8008e54 <_strtoul_l.constprop.0+0xfc>
 8008da0:	2610      	movs	r6, #16
 8008da2:	786c      	ldrb	r4, [r5, #1]
 8008da4:	3502      	adds	r5, #2
 8008da6:	2001      	movs	r0, #1
 8008da8:	0031      	movs	r1, r6
 8008daa:	4240      	negs	r0, r0
 8008dac:	f7f7 f9d2 	bl	8000154 <__udivsi3>
 8008db0:	9003      	str	r0, [sp, #12]
 8008db2:	2001      	movs	r0, #1
 8008db4:	0031      	movs	r1, r6
 8008db6:	4240      	negs	r0, r0
 8008db8:	f7f7 fa52 	bl	8000260 <__aeabi_uidivmod>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9104      	str	r1, [sp, #16]
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	468c      	mov	ip, r1
 8008dc8:	4252      	negs	r2, r2
 8008dca:	0021      	movs	r1, r4
 8008dcc:	3930      	subs	r1, #48	; 0x30
 8008dce:	2909      	cmp	r1, #9
 8008dd0:	d818      	bhi.n	8008e04 <_strtoul_l.constprop.0+0xac>
 8008dd2:	000c      	movs	r4, r1
 8008dd4:	42a6      	cmp	r6, r4
 8008dd6:	dd23      	ble.n	8008e20 <_strtoul_l.constprop.0+0xc8>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	db1f      	blt.n	8008e1c <_strtoul_l.constprop.0+0xc4>
 8008ddc:	9903      	ldr	r1, [sp, #12]
 8008dde:	0013      	movs	r3, r2
 8008de0:	4281      	cmp	r1, r0
 8008de2:	d307      	bcc.n	8008df4 <_strtoul_l.constprop.0+0x9c>
 8008de4:	d103      	bne.n	8008dee <_strtoul_l.constprop.0+0x96>
 8008de6:	9904      	ldr	r1, [sp, #16]
 8008de8:	0013      	movs	r3, r2
 8008dea:	42a1      	cmp	r1, r4
 8008dec:	db02      	blt.n	8008df4 <_strtoul_l.constprop.0+0x9c>
 8008dee:	4663      	mov	r3, ip
 8008df0:	4370      	muls	r0, r6
 8008df2:	1820      	adds	r0, r4, r0
 8008df4:	782c      	ldrb	r4, [r5, #0]
 8008df6:	3501      	adds	r5, #1
 8008df8:	e7e7      	b.n	8008dca <_strtoul_l.constprop.0+0x72>
 8008dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8008dfc:	d1c5      	bne.n	8008d8a <_strtoul_l.constprop.0+0x32>
 8008dfe:	781c      	ldrb	r4, [r3, #0]
 8008e00:	1c95      	adds	r5, r2, #2
 8008e02:	e7c2      	b.n	8008d8a <_strtoul_l.constprop.0+0x32>
 8008e04:	0021      	movs	r1, r4
 8008e06:	3941      	subs	r1, #65	; 0x41
 8008e08:	2919      	cmp	r1, #25
 8008e0a:	d801      	bhi.n	8008e10 <_strtoul_l.constprop.0+0xb8>
 8008e0c:	3c37      	subs	r4, #55	; 0x37
 8008e0e:	e7e1      	b.n	8008dd4 <_strtoul_l.constprop.0+0x7c>
 8008e10:	0021      	movs	r1, r4
 8008e12:	3961      	subs	r1, #97	; 0x61
 8008e14:	2919      	cmp	r1, #25
 8008e16:	d803      	bhi.n	8008e20 <_strtoul_l.constprop.0+0xc8>
 8008e18:	3c57      	subs	r4, #87	; 0x57
 8008e1a:	e7db      	b.n	8008dd4 <_strtoul_l.constprop.0+0x7c>
 8008e1c:	0013      	movs	r3, r2
 8008e1e:	e7e9      	b.n	8008df4 <_strtoul_l.constprop.0+0x9c>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	da09      	bge.n	8008e38 <_strtoul_l.constprop.0+0xe0>
 8008e24:	2322      	movs	r3, #34	; 0x22
 8008e26:	2001      	movs	r0, #1
 8008e28:	9a05      	ldr	r2, [sp, #20]
 8008e2a:	4240      	negs	r0, r0
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <_strtoul_l.constprop.0+0xf0>
 8008e34:	b007      	add	sp, #28
 8008e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e38:	2f00      	cmp	r7, #0
 8008e3a:	d000      	beq.n	8008e3e <_strtoul_l.constprop.0+0xe6>
 8008e3c:	4240      	negs	r0, r0
 8008e3e:	9a02      	ldr	r2, [sp, #8]
 8008e40:	2a00      	cmp	r2, #0
 8008e42:	d0f7      	beq.n	8008e34 <_strtoul_l.constprop.0+0xdc>
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <_strtoul_l.constprop.0+0xf4>
 8008e48:	1e6b      	subs	r3, r5, #1
 8008e4a:	9301      	str	r3, [sp, #4]
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	9a01      	ldr	r2, [sp, #4]
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e7ef      	b.n	8008e34 <_strtoul_l.constprop.0+0xdc>
 8008e54:	2430      	movs	r4, #48	; 0x30
 8008e56:	2e00      	cmp	r6, #0
 8008e58:	d1a5      	bne.n	8008da6 <_strtoul_l.constprop.0+0x4e>
 8008e5a:	3608      	adds	r6, #8
 8008e5c:	e7a3      	b.n	8008da6 <_strtoul_l.constprop.0+0x4e>
 8008e5e:	2c30      	cmp	r4, #48	; 0x30
 8008e60:	d099      	beq.n	8008d96 <_strtoul_l.constprop.0+0x3e>
 8008e62:	260a      	movs	r6, #10
 8008e64:	e79f      	b.n	8008da6 <_strtoul_l.constprop.0+0x4e>
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	0800b9a1 	.word	0x0800b9a1

08008e6c <strtoul>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	0013      	movs	r3, r2
 8008e70:	000a      	movs	r2, r1
 8008e72:	0001      	movs	r1, r0
 8008e74:	4802      	ldr	r0, [pc, #8]	; (8008e80 <strtoul+0x14>)
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	f7ff ff6e 	bl	8008d58 <_strtoul_l.constprop.0>
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	200000a0 	.word	0x200000a0

08008e84 <_vsniprintf_r>:
 8008e84:	b530      	push	{r4, r5, lr}
 8008e86:	0014      	movs	r4, r2
 8008e88:	0005      	movs	r5, r0
 8008e8a:	001a      	movs	r2, r3
 8008e8c:	b09b      	sub	sp, #108	; 0x6c
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	da05      	bge.n	8008e9e <_vsniprintf_r+0x1a>
 8008e92:	238b      	movs	r3, #139	; 0x8b
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	2001      	movs	r0, #1
 8008e98:	4240      	negs	r0, r0
 8008e9a:	b01b      	add	sp, #108	; 0x6c
 8008e9c:	bd30      	pop	{r4, r5, pc}
 8008e9e:	2382      	movs	r3, #130	; 0x82
 8008ea0:	4668      	mov	r0, sp
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	8183      	strh	r3, [r0, #12]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9100      	str	r1, [sp, #0]
 8008eaa:	9104      	str	r1, [sp, #16]
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d000      	beq.n	8008eb2 <_vsniprintf_r+0x2e>
 8008eb0:	1e63      	subs	r3, r4, #1
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4669      	mov	r1, sp
 8008eba:	425b      	negs	r3, r3
 8008ebc:	81cb      	strh	r3, [r1, #14]
 8008ebe:	0028      	movs	r0, r5
 8008ec0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ec2:	f001 fce3 	bl	800a88c <_svfiprintf_r>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	da01      	bge.n	8008ece <_vsniprintf_r+0x4a>
 8008eca:	238b      	movs	r3, #139	; 0x8b
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	d0e3      	beq.n	8008e9a <_vsniprintf_r+0x16>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9a00      	ldr	r2, [sp, #0]
 8008ed6:	7013      	strb	r3, [r2, #0]
 8008ed8:	e7df      	b.n	8008e9a <_vsniprintf_r+0x16>
	...

08008edc <vsniprintf>:
 8008edc:	b507      	push	{r0, r1, r2, lr}
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	0013      	movs	r3, r2
 8008ee2:	000a      	movs	r2, r1
 8008ee4:	0001      	movs	r1, r0
 8008ee6:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <vsniprintf+0x14>)
 8008ee8:	6800      	ldr	r0, [r0, #0]
 8008eea:	f7ff ffcb 	bl	8008e84 <_vsniprintf_r>
 8008eee:	bd0e      	pop	{r1, r2, r3, pc}
 8008ef0:	200000a0 	.word	0x200000a0

08008ef4 <__swbuf_r>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	0005      	movs	r5, r0
 8008ef8:	000e      	movs	r6, r1
 8008efa:	0014      	movs	r4, r2
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d004      	beq.n	8008f0a <__swbuf_r+0x16>
 8008f00:	6983      	ldr	r3, [r0, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <__swbuf_r+0x16>
 8008f06:	f000 f9f1 	bl	80092ec <__sinit>
 8008f0a:	4b22      	ldr	r3, [pc, #136]	; (8008f94 <__swbuf_r+0xa0>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	d12e      	bne.n	8008f6e <__swbuf_r+0x7a>
 8008f10:	686c      	ldr	r4, [r5, #4]
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	071b      	lsls	r3, r3, #28
 8008f1a:	d532      	bpl.n	8008f82 <__swbuf_r+0x8e>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d02f      	beq.n	8008f82 <__swbuf_r+0x8e>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6922      	ldr	r2, [r4, #16]
 8008f26:	b2f7      	uxtb	r7, r6
 8008f28:	1a98      	subs	r0, r3, r2
 8008f2a:	6963      	ldr	r3, [r4, #20]
 8008f2c:	b2f6      	uxtb	r6, r6
 8008f2e:	4283      	cmp	r3, r0
 8008f30:	dc05      	bgt.n	8008f3e <__swbuf_r+0x4a>
 8008f32:	0021      	movs	r1, r4
 8008f34:	0028      	movs	r0, r5
 8008f36:	f000 f937 	bl	80091a8 <_fflush_r>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d127      	bne.n	8008f8e <__swbuf_r+0x9a>
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	3001      	adds	r0, #1
 8008f42:	3b01      	subs	r3, #1
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	1c5a      	adds	r2, r3, #1
 8008f4a:	6022      	str	r2, [r4, #0]
 8008f4c:	701f      	strb	r7, [r3, #0]
 8008f4e:	6963      	ldr	r3, [r4, #20]
 8008f50:	4283      	cmp	r3, r0
 8008f52:	d004      	beq.n	8008f5e <__swbuf_r+0x6a>
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	07db      	lsls	r3, r3, #31
 8008f58:	d507      	bpl.n	8008f6a <__swbuf_r+0x76>
 8008f5a:	2e0a      	cmp	r6, #10
 8008f5c:	d105      	bne.n	8008f6a <__swbuf_r+0x76>
 8008f5e:	0021      	movs	r1, r4
 8008f60:	0028      	movs	r0, r5
 8008f62:	f000 f921 	bl	80091a8 <_fflush_r>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d111      	bne.n	8008f8e <__swbuf_r+0x9a>
 8008f6a:	0030      	movs	r0, r6
 8008f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6e:	4b0a      	ldr	r3, [pc, #40]	; (8008f98 <__swbuf_r+0xa4>)
 8008f70:	429c      	cmp	r4, r3
 8008f72:	d101      	bne.n	8008f78 <__swbuf_r+0x84>
 8008f74:	68ac      	ldr	r4, [r5, #8]
 8008f76:	e7cc      	b.n	8008f12 <__swbuf_r+0x1e>
 8008f78:	4b08      	ldr	r3, [pc, #32]	; (8008f9c <__swbuf_r+0xa8>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d1c9      	bne.n	8008f12 <__swbuf_r+0x1e>
 8008f7e:	68ec      	ldr	r4, [r5, #12]
 8008f80:	e7c7      	b.n	8008f12 <__swbuf_r+0x1e>
 8008f82:	0021      	movs	r1, r4
 8008f84:	0028      	movs	r0, r5
 8008f86:	f000 f80b 	bl	8008fa0 <__swsetup_r>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d0c9      	beq.n	8008f22 <__swbuf_r+0x2e>
 8008f8e:	2601      	movs	r6, #1
 8008f90:	4276      	negs	r6, r6
 8008f92:	e7ea      	b.n	8008f6a <__swbuf_r+0x76>
 8008f94:	0800bac4 	.word	0x0800bac4
 8008f98:	0800bae4 	.word	0x0800bae4
 8008f9c:	0800baa4 	.word	0x0800baa4

08008fa0 <__swsetup_r>:
 8008fa0:	4b37      	ldr	r3, [pc, #220]	; (8009080 <__swsetup_r+0xe0>)
 8008fa2:	b570      	push	{r4, r5, r6, lr}
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	0006      	movs	r6, r0
 8008fa8:	000c      	movs	r4, r1
 8008faa:	2d00      	cmp	r5, #0
 8008fac:	d005      	beq.n	8008fba <__swsetup_r+0x1a>
 8008fae:	69ab      	ldr	r3, [r5, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <__swsetup_r+0x1a>
 8008fb4:	0028      	movs	r0, r5
 8008fb6:	f000 f999 	bl	80092ec <__sinit>
 8008fba:	4b32      	ldr	r3, [pc, #200]	; (8009084 <__swsetup_r+0xe4>)
 8008fbc:	429c      	cmp	r4, r3
 8008fbe:	d10f      	bne.n	8008fe0 <__swsetup_r+0x40>
 8008fc0:	686c      	ldr	r4, [r5, #4]
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	5ee2      	ldrsh	r2, [r4, r3]
 8008fc6:	b293      	uxth	r3, r2
 8008fc8:	0711      	lsls	r1, r2, #28
 8008fca:	d42d      	bmi.n	8009028 <__swsetup_r+0x88>
 8008fcc:	06d9      	lsls	r1, r3, #27
 8008fce:	d411      	bmi.n	8008ff4 <__swsetup_r+0x54>
 8008fd0:	2309      	movs	r3, #9
 8008fd2:	2001      	movs	r0, #1
 8008fd4:	6033      	str	r3, [r6, #0]
 8008fd6:	3337      	adds	r3, #55	; 0x37
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	4240      	negs	r0, r0
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	4b29      	ldr	r3, [pc, #164]	; (8009088 <__swsetup_r+0xe8>)
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	d101      	bne.n	8008fea <__swsetup_r+0x4a>
 8008fe6:	68ac      	ldr	r4, [r5, #8]
 8008fe8:	e7eb      	b.n	8008fc2 <__swsetup_r+0x22>
 8008fea:	4b28      	ldr	r3, [pc, #160]	; (800908c <__swsetup_r+0xec>)
 8008fec:	429c      	cmp	r4, r3
 8008fee:	d1e8      	bne.n	8008fc2 <__swsetup_r+0x22>
 8008ff0:	68ec      	ldr	r4, [r5, #12]
 8008ff2:	e7e6      	b.n	8008fc2 <__swsetup_r+0x22>
 8008ff4:	075b      	lsls	r3, r3, #29
 8008ff6:	d513      	bpl.n	8009020 <__swsetup_r+0x80>
 8008ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ffa:	2900      	cmp	r1, #0
 8008ffc:	d008      	beq.n	8009010 <__swsetup_r+0x70>
 8008ffe:	0023      	movs	r3, r4
 8009000:	3344      	adds	r3, #68	; 0x44
 8009002:	4299      	cmp	r1, r3
 8009004:	d002      	beq.n	800900c <__swsetup_r+0x6c>
 8009006:	0030      	movs	r0, r6
 8009008:	f001 fafc 	bl	800a604 <_free_r>
 800900c:	2300      	movs	r3, #0
 800900e:	6363      	str	r3, [r4, #52]	; 0x34
 8009010:	2224      	movs	r2, #36	; 0x24
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	4393      	bics	r3, r2
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	2300      	movs	r3, #0
 800901a:	6063      	str	r3, [r4, #4]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	6023      	str	r3, [r4, #0]
 8009020:	2308      	movs	r3, #8
 8009022:	89a2      	ldrh	r2, [r4, #12]
 8009024:	4313      	orrs	r3, r2
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10b      	bne.n	8009046 <__swsetup_r+0xa6>
 800902e:	21a0      	movs	r1, #160	; 0xa0
 8009030:	2280      	movs	r2, #128	; 0x80
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	0089      	lsls	r1, r1, #2
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	400b      	ands	r3, r1
 800903a:	4293      	cmp	r3, r2
 800903c:	d003      	beq.n	8009046 <__swsetup_r+0xa6>
 800903e:	0021      	movs	r1, r4
 8009040:	0030      	movs	r0, r6
 8009042:	f000 fd93 	bl	8009b6c <__smakebuf_r>
 8009046:	220c      	movs	r2, #12
 8009048:	5ea3      	ldrsh	r3, [r4, r2]
 800904a:	2001      	movs	r0, #1
 800904c:	001a      	movs	r2, r3
 800904e:	b299      	uxth	r1, r3
 8009050:	4002      	ands	r2, r0
 8009052:	4203      	tst	r3, r0
 8009054:	d00f      	beq.n	8009076 <__swsetup_r+0xd6>
 8009056:	2200      	movs	r2, #0
 8009058:	60a2      	str	r2, [r4, #8]
 800905a:	6962      	ldr	r2, [r4, #20]
 800905c:	4252      	negs	r2, r2
 800905e:	61a2      	str	r2, [r4, #24]
 8009060:	2000      	movs	r0, #0
 8009062:	6922      	ldr	r2, [r4, #16]
 8009064:	4282      	cmp	r2, r0
 8009066:	d1ba      	bne.n	8008fde <__swsetup_r+0x3e>
 8009068:	060a      	lsls	r2, r1, #24
 800906a:	d5b8      	bpl.n	8008fde <__swsetup_r+0x3e>
 800906c:	2240      	movs	r2, #64	; 0x40
 800906e:	4313      	orrs	r3, r2
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	3801      	subs	r0, #1
 8009074:	e7b3      	b.n	8008fde <__swsetup_r+0x3e>
 8009076:	0788      	lsls	r0, r1, #30
 8009078:	d400      	bmi.n	800907c <__swsetup_r+0xdc>
 800907a:	6962      	ldr	r2, [r4, #20]
 800907c:	60a2      	str	r2, [r4, #8]
 800907e:	e7ef      	b.n	8009060 <__swsetup_r+0xc0>
 8009080:	200000a0 	.word	0x200000a0
 8009084:	0800bac4 	.word	0x0800bac4
 8009088:	0800bae4 	.word	0x0800bae4
 800908c:	0800baa4 	.word	0x0800baa4

08009090 <__sflush_r>:
 8009090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009092:	898b      	ldrh	r3, [r1, #12]
 8009094:	0005      	movs	r5, r0
 8009096:	000c      	movs	r4, r1
 8009098:	071a      	lsls	r2, r3, #28
 800909a:	d45f      	bmi.n	800915c <__sflush_r+0xcc>
 800909c:	684a      	ldr	r2, [r1, #4]
 800909e:	2a00      	cmp	r2, #0
 80090a0:	dc04      	bgt.n	80090ac <__sflush_r+0x1c>
 80090a2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	dc01      	bgt.n	80090ac <__sflush_r+0x1c>
 80090a8:	2000      	movs	r0, #0
 80090aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80090ae:	2f00      	cmp	r7, #0
 80090b0:	d0fa      	beq.n	80090a8 <__sflush_r+0x18>
 80090b2:	2200      	movs	r2, #0
 80090b4:	2180      	movs	r1, #128	; 0x80
 80090b6:	682e      	ldr	r6, [r5, #0]
 80090b8:	602a      	str	r2, [r5, #0]
 80090ba:	001a      	movs	r2, r3
 80090bc:	0149      	lsls	r1, r1, #5
 80090be:	400a      	ands	r2, r1
 80090c0:	420b      	tst	r3, r1
 80090c2:	d034      	beq.n	800912e <__sflush_r+0x9e>
 80090c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	075b      	lsls	r3, r3, #29
 80090ca:	d506      	bpl.n	80090da <__sflush_r+0x4a>
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	1ac0      	subs	r0, r0, r3
 80090d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <__sflush_r+0x4a>
 80090d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090d8:	1ac0      	subs	r0, r0, r3
 80090da:	0002      	movs	r2, r0
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	2300      	movs	r3, #0
 80090e0:	0028      	movs	r0, r5
 80090e2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80090e4:	47b8      	blx	r7
 80090e6:	89a1      	ldrh	r1, [r4, #12]
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d106      	bne.n	80090fa <__sflush_r+0x6a>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	2b1d      	cmp	r3, #29
 80090f0:	d831      	bhi.n	8009156 <__sflush_r+0xc6>
 80090f2:	4a2c      	ldr	r2, [pc, #176]	; (80091a4 <__sflush_r+0x114>)
 80090f4:	40da      	lsrs	r2, r3
 80090f6:	07d3      	lsls	r3, r2, #31
 80090f8:	d52d      	bpl.n	8009156 <__sflush_r+0xc6>
 80090fa:	2300      	movs	r3, #0
 80090fc:	6063      	str	r3, [r4, #4]
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	04cb      	lsls	r3, r1, #19
 8009104:	d505      	bpl.n	8009112 <__sflush_r+0x82>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d102      	bne.n	8009110 <__sflush_r+0x80>
 800910a:	682b      	ldr	r3, [r5, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d100      	bne.n	8009112 <__sflush_r+0x82>
 8009110:	6560      	str	r0, [r4, #84]	; 0x54
 8009112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009114:	602e      	str	r6, [r5, #0]
 8009116:	2900      	cmp	r1, #0
 8009118:	d0c6      	beq.n	80090a8 <__sflush_r+0x18>
 800911a:	0023      	movs	r3, r4
 800911c:	3344      	adds	r3, #68	; 0x44
 800911e:	4299      	cmp	r1, r3
 8009120:	d002      	beq.n	8009128 <__sflush_r+0x98>
 8009122:	0028      	movs	r0, r5
 8009124:	f001 fa6e 	bl	800a604 <_free_r>
 8009128:	2000      	movs	r0, #0
 800912a:	6360      	str	r0, [r4, #52]	; 0x34
 800912c:	e7bd      	b.n	80090aa <__sflush_r+0x1a>
 800912e:	2301      	movs	r3, #1
 8009130:	0028      	movs	r0, r5
 8009132:	6a21      	ldr	r1, [r4, #32]
 8009134:	47b8      	blx	r7
 8009136:	1c43      	adds	r3, r0, #1
 8009138:	d1c5      	bne.n	80090c6 <__sflush_r+0x36>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c2      	beq.n	80090c6 <__sflush_r+0x36>
 8009140:	2b1d      	cmp	r3, #29
 8009142:	d001      	beq.n	8009148 <__sflush_r+0xb8>
 8009144:	2b16      	cmp	r3, #22
 8009146:	d101      	bne.n	800914c <__sflush_r+0xbc>
 8009148:	602e      	str	r6, [r5, #0]
 800914a:	e7ad      	b.n	80090a8 <__sflush_r+0x18>
 800914c:	2340      	movs	r3, #64	; 0x40
 800914e:	89a2      	ldrh	r2, [r4, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	e7a9      	b.n	80090aa <__sflush_r+0x1a>
 8009156:	2340      	movs	r3, #64	; 0x40
 8009158:	430b      	orrs	r3, r1
 800915a:	e7fa      	b.n	8009152 <__sflush_r+0xc2>
 800915c:	690f      	ldr	r7, [r1, #16]
 800915e:	2f00      	cmp	r7, #0
 8009160:	d0a2      	beq.n	80090a8 <__sflush_r+0x18>
 8009162:	680a      	ldr	r2, [r1, #0]
 8009164:	600f      	str	r7, [r1, #0]
 8009166:	1bd2      	subs	r2, r2, r7
 8009168:	9201      	str	r2, [sp, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	079b      	lsls	r3, r3, #30
 800916e:	d100      	bne.n	8009172 <__sflush_r+0xe2>
 8009170:	694a      	ldr	r2, [r1, #20]
 8009172:	60a2      	str	r2, [r4, #8]
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dc00      	bgt.n	800917c <__sflush_r+0xec>
 800917a:	e795      	b.n	80090a8 <__sflush_r+0x18>
 800917c:	003a      	movs	r2, r7
 800917e:	0028      	movs	r0, r5
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009186:	47b0      	blx	r6
 8009188:	2800      	cmp	r0, #0
 800918a:	dc06      	bgt.n	800919a <__sflush_r+0x10a>
 800918c:	2340      	movs	r3, #64	; 0x40
 800918e:	2001      	movs	r0, #1
 8009190:	89a2      	ldrh	r2, [r4, #12]
 8009192:	4240      	negs	r0, r0
 8009194:	4313      	orrs	r3, r2
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	e787      	b.n	80090aa <__sflush_r+0x1a>
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	183f      	adds	r7, r7, r0
 800919e:	1a1b      	subs	r3, r3, r0
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	e7e7      	b.n	8009174 <__sflush_r+0xe4>
 80091a4:	20400001 	.word	0x20400001

080091a8 <_fflush_r>:
 80091a8:	690b      	ldr	r3, [r1, #16]
 80091aa:	b570      	push	{r4, r5, r6, lr}
 80091ac:	0005      	movs	r5, r0
 80091ae:	000c      	movs	r4, r1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <_fflush_r+0x12>
 80091b4:	2500      	movs	r5, #0
 80091b6:	0028      	movs	r0, r5
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d004      	beq.n	80091c8 <_fflush_r+0x20>
 80091be:	6983      	ldr	r3, [r0, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <_fflush_r+0x20>
 80091c4:	f000 f892 	bl	80092ec <__sinit>
 80091c8:	4b14      	ldr	r3, [pc, #80]	; (800921c <_fflush_r+0x74>)
 80091ca:	429c      	cmp	r4, r3
 80091cc:	d11b      	bne.n	8009206 <_fflush_r+0x5e>
 80091ce:	686c      	ldr	r4, [r5, #4]
 80091d0:	220c      	movs	r2, #12
 80091d2:	5ea3      	ldrsh	r3, [r4, r2]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ed      	beq.n	80091b4 <_fflush_r+0xc>
 80091d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091da:	07d2      	lsls	r2, r2, #31
 80091dc:	d404      	bmi.n	80091e8 <_fflush_r+0x40>
 80091de:	059b      	lsls	r3, r3, #22
 80091e0:	d402      	bmi.n	80091e8 <_fflush_r+0x40>
 80091e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091e4:	f000 fc97 	bl	8009b16 <__retarget_lock_acquire_recursive>
 80091e8:	0028      	movs	r0, r5
 80091ea:	0021      	movs	r1, r4
 80091ec:	f7ff ff50 	bl	8009090 <__sflush_r>
 80091f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091f2:	0005      	movs	r5, r0
 80091f4:	07db      	lsls	r3, r3, #31
 80091f6:	d4de      	bmi.n	80091b6 <_fflush_r+0xe>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	059b      	lsls	r3, r3, #22
 80091fc:	d4db      	bmi.n	80091b6 <_fflush_r+0xe>
 80091fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009200:	f000 fc8a 	bl	8009b18 <__retarget_lock_release_recursive>
 8009204:	e7d7      	b.n	80091b6 <_fflush_r+0xe>
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <_fflush_r+0x78>)
 8009208:	429c      	cmp	r4, r3
 800920a:	d101      	bne.n	8009210 <_fflush_r+0x68>
 800920c:	68ac      	ldr	r4, [r5, #8]
 800920e:	e7df      	b.n	80091d0 <_fflush_r+0x28>
 8009210:	4b04      	ldr	r3, [pc, #16]	; (8009224 <_fflush_r+0x7c>)
 8009212:	429c      	cmp	r4, r3
 8009214:	d1dc      	bne.n	80091d0 <_fflush_r+0x28>
 8009216:	68ec      	ldr	r4, [r5, #12]
 8009218:	e7da      	b.n	80091d0 <_fflush_r+0x28>
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	0800bac4 	.word	0x0800bac4
 8009220:	0800bae4 	.word	0x0800bae4
 8009224:	0800baa4 	.word	0x0800baa4

08009228 <std>:
 8009228:	2300      	movs	r3, #0
 800922a:	b510      	push	{r4, lr}
 800922c:	0004      	movs	r4, r0
 800922e:	6003      	str	r3, [r0, #0]
 8009230:	6043      	str	r3, [r0, #4]
 8009232:	6083      	str	r3, [r0, #8]
 8009234:	8181      	strh	r1, [r0, #12]
 8009236:	6643      	str	r3, [r0, #100]	; 0x64
 8009238:	0019      	movs	r1, r3
 800923a:	81c2      	strh	r2, [r0, #14]
 800923c:	6103      	str	r3, [r0, #16]
 800923e:	6143      	str	r3, [r0, #20]
 8009240:	6183      	str	r3, [r0, #24]
 8009242:	2208      	movs	r2, #8
 8009244:	305c      	adds	r0, #92	; 0x5c
 8009246:	f7fe fe44 	bl	8007ed2 <memset>
 800924a:	4b05      	ldr	r3, [pc, #20]	; (8009260 <std+0x38>)
 800924c:	6224      	str	r4, [r4, #32]
 800924e:	6263      	str	r3, [r4, #36]	; 0x24
 8009250:	4b04      	ldr	r3, [pc, #16]	; (8009264 <std+0x3c>)
 8009252:	62a3      	str	r3, [r4, #40]	; 0x28
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <std+0x40>)
 8009256:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <std+0x44>)
 800925a:	6323      	str	r3, [r4, #48]	; 0x30
 800925c:	bd10      	pop	{r4, pc}
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	0800adc9 	.word	0x0800adc9
 8009264:	0800adf1 	.word	0x0800adf1
 8009268:	0800ae29 	.word	0x0800ae29
 800926c:	0800ae55 	.word	0x0800ae55

08009270 <_cleanup_r>:
 8009270:	b510      	push	{r4, lr}
 8009272:	4902      	ldr	r1, [pc, #8]	; (800927c <_cleanup_r+0xc>)
 8009274:	f000 f8ba 	bl	80093ec <_fwalk_reent>
 8009278:	bd10      	pop	{r4, pc}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	080091a9 	.word	0x080091a9

08009280 <__sfmoreglue>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	2568      	movs	r5, #104	; 0x68
 8009284:	1e4a      	subs	r2, r1, #1
 8009286:	4355      	muls	r5, r2
 8009288:	000e      	movs	r6, r1
 800928a:	0029      	movs	r1, r5
 800928c:	3174      	adds	r1, #116	; 0x74
 800928e:	f001 fa25 	bl	800a6dc <_malloc_r>
 8009292:	1e04      	subs	r4, r0, #0
 8009294:	d008      	beq.n	80092a8 <__sfmoreglue+0x28>
 8009296:	2100      	movs	r1, #0
 8009298:	002a      	movs	r2, r5
 800929a:	6001      	str	r1, [r0, #0]
 800929c:	6046      	str	r6, [r0, #4]
 800929e:	300c      	adds	r0, #12
 80092a0:	60a0      	str	r0, [r4, #8]
 80092a2:	3268      	adds	r2, #104	; 0x68
 80092a4:	f7fe fe15 	bl	8007ed2 <memset>
 80092a8:	0020      	movs	r0, r4
 80092aa:	bd70      	pop	{r4, r5, r6, pc}

080092ac <__sfp_lock_acquire>:
 80092ac:	b510      	push	{r4, lr}
 80092ae:	4802      	ldr	r0, [pc, #8]	; (80092b8 <__sfp_lock_acquire+0xc>)
 80092b0:	f000 fc31 	bl	8009b16 <__retarget_lock_acquire_recursive>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	20000eb9 	.word	0x20000eb9

080092bc <__sfp_lock_release>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	4802      	ldr	r0, [pc, #8]	; (80092c8 <__sfp_lock_release+0xc>)
 80092c0:	f000 fc2a 	bl	8009b18 <__retarget_lock_release_recursive>
 80092c4:	bd10      	pop	{r4, pc}
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	20000eb9 	.word	0x20000eb9

080092cc <__sinit_lock_acquire>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	4802      	ldr	r0, [pc, #8]	; (80092d8 <__sinit_lock_acquire+0xc>)
 80092d0:	f000 fc21 	bl	8009b16 <__retarget_lock_acquire_recursive>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	46c0      	nop			; (mov r8, r8)
 80092d8:	20000eba 	.word	0x20000eba

080092dc <__sinit_lock_release>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	4802      	ldr	r0, [pc, #8]	; (80092e8 <__sinit_lock_release+0xc>)
 80092e0:	f000 fc1a 	bl	8009b18 <__retarget_lock_release_recursive>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	20000eba 	.word	0x20000eba

080092ec <__sinit>:
 80092ec:	b513      	push	{r0, r1, r4, lr}
 80092ee:	0004      	movs	r4, r0
 80092f0:	f7ff ffec 	bl	80092cc <__sinit_lock_acquire>
 80092f4:	69a3      	ldr	r3, [r4, #24]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <__sinit+0x14>
 80092fa:	f7ff ffef 	bl	80092dc <__sinit_lock_release>
 80092fe:	bd13      	pop	{r0, r1, r4, pc}
 8009300:	64a3      	str	r3, [r4, #72]	; 0x48
 8009302:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009304:	6523      	str	r3, [r4, #80]	; 0x50
 8009306:	4b13      	ldr	r3, [pc, #76]	; (8009354 <__sinit+0x68>)
 8009308:	4a13      	ldr	r2, [pc, #76]	; (8009358 <__sinit+0x6c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	62a2      	str	r2, [r4, #40]	; 0x28
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	42a3      	cmp	r3, r4
 8009312:	d101      	bne.n	8009318 <__sinit+0x2c>
 8009314:	2301      	movs	r3, #1
 8009316:	61a3      	str	r3, [r4, #24]
 8009318:	0020      	movs	r0, r4
 800931a:	f000 f81f 	bl	800935c <__sfp>
 800931e:	6060      	str	r0, [r4, #4]
 8009320:	0020      	movs	r0, r4
 8009322:	f000 f81b 	bl	800935c <__sfp>
 8009326:	60a0      	str	r0, [r4, #8]
 8009328:	0020      	movs	r0, r4
 800932a:	f000 f817 	bl	800935c <__sfp>
 800932e:	2200      	movs	r2, #0
 8009330:	2104      	movs	r1, #4
 8009332:	60e0      	str	r0, [r4, #12]
 8009334:	6860      	ldr	r0, [r4, #4]
 8009336:	f7ff ff77 	bl	8009228 <std>
 800933a:	2201      	movs	r2, #1
 800933c:	2109      	movs	r1, #9
 800933e:	68a0      	ldr	r0, [r4, #8]
 8009340:	f7ff ff72 	bl	8009228 <std>
 8009344:	2202      	movs	r2, #2
 8009346:	2112      	movs	r1, #18
 8009348:	68e0      	ldr	r0, [r4, #12]
 800934a:	f7ff ff6d 	bl	8009228 <std>
 800934e:	2301      	movs	r3, #1
 8009350:	61a3      	str	r3, [r4, #24]
 8009352:	e7d2      	b.n	80092fa <__sinit+0xe>
 8009354:	0800b93c 	.word	0x0800b93c
 8009358:	08009271 	.word	0x08009271

0800935c <__sfp>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	0007      	movs	r7, r0
 8009360:	f7ff ffa4 	bl	80092ac <__sfp_lock_acquire>
 8009364:	4b1f      	ldr	r3, [pc, #124]	; (80093e4 <__sfp+0x88>)
 8009366:	681e      	ldr	r6, [r3, #0]
 8009368:	69b3      	ldr	r3, [r6, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <__sfp+0x18>
 800936e:	0030      	movs	r0, r6
 8009370:	f7ff ffbc 	bl	80092ec <__sinit>
 8009374:	3648      	adds	r6, #72	; 0x48
 8009376:	68b4      	ldr	r4, [r6, #8]
 8009378:	6873      	ldr	r3, [r6, #4]
 800937a:	3b01      	subs	r3, #1
 800937c:	d504      	bpl.n	8009388 <__sfp+0x2c>
 800937e:	6833      	ldr	r3, [r6, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d022      	beq.n	80093ca <__sfp+0x6e>
 8009384:	6836      	ldr	r6, [r6, #0]
 8009386:	e7f6      	b.n	8009376 <__sfp+0x1a>
 8009388:	220c      	movs	r2, #12
 800938a:	5ea5      	ldrsh	r5, [r4, r2]
 800938c:	2d00      	cmp	r5, #0
 800938e:	d11a      	bne.n	80093c6 <__sfp+0x6a>
 8009390:	0020      	movs	r0, r4
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <__sfp+0x8c>)
 8009394:	3058      	adds	r0, #88	; 0x58
 8009396:	60e3      	str	r3, [r4, #12]
 8009398:	6665      	str	r5, [r4, #100]	; 0x64
 800939a:	f000 fbbb 	bl	8009b14 <__retarget_lock_init_recursive>
 800939e:	f7ff ff8d 	bl	80092bc <__sfp_lock_release>
 80093a2:	0020      	movs	r0, r4
 80093a4:	2208      	movs	r2, #8
 80093a6:	0029      	movs	r1, r5
 80093a8:	6025      	str	r5, [r4, #0]
 80093aa:	60a5      	str	r5, [r4, #8]
 80093ac:	6065      	str	r5, [r4, #4]
 80093ae:	6125      	str	r5, [r4, #16]
 80093b0:	6165      	str	r5, [r4, #20]
 80093b2:	61a5      	str	r5, [r4, #24]
 80093b4:	305c      	adds	r0, #92	; 0x5c
 80093b6:	f7fe fd8c 	bl	8007ed2 <memset>
 80093ba:	6365      	str	r5, [r4, #52]	; 0x34
 80093bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80093be:	64a5      	str	r5, [r4, #72]	; 0x48
 80093c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80093c2:	0020      	movs	r0, r4
 80093c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c6:	3468      	adds	r4, #104	; 0x68
 80093c8:	e7d7      	b.n	800937a <__sfp+0x1e>
 80093ca:	2104      	movs	r1, #4
 80093cc:	0038      	movs	r0, r7
 80093ce:	f7ff ff57 	bl	8009280 <__sfmoreglue>
 80093d2:	1e04      	subs	r4, r0, #0
 80093d4:	6030      	str	r0, [r6, #0]
 80093d6:	d1d5      	bne.n	8009384 <__sfp+0x28>
 80093d8:	f7ff ff70 	bl	80092bc <__sfp_lock_release>
 80093dc:	230c      	movs	r3, #12
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	e7ef      	b.n	80093c2 <__sfp+0x66>
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	0800b93c 	.word	0x0800b93c
 80093e8:	ffff0001 	.word	0xffff0001

080093ec <_fwalk_reent>:
 80093ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ee:	0004      	movs	r4, r0
 80093f0:	0006      	movs	r6, r0
 80093f2:	2700      	movs	r7, #0
 80093f4:	9101      	str	r1, [sp, #4]
 80093f6:	3448      	adds	r4, #72	; 0x48
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	68a5      	ldr	r5, [r4, #8]
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	d504      	bpl.n	8009410 <_fwalk_reent+0x24>
 8009406:	6824      	ldr	r4, [r4, #0]
 8009408:	2c00      	cmp	r4, #0
 800940a:	d1f5      	bne.n	80093f8 <_fwalk_reent+0xc>
 800940c:	0038      	movs	r0, r7
 800940e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009410:	89ab      	ldrh	r3, [r5, #12]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d908      	bls.n	8009428 <_fwalk_reent+0x3c>
 8009416:	220e      	movs	r2, #14
 8009418:	5eab      	ldrsh	r3, [r5, r2]
 800941a:	3301      	adds	r3, #1
 800941c:	d004      	beq.n	8009428 <_fwalk_reent+0x3c>
 800941e:	0029      	movs	r1, r5
 8009420:	0030      	movs	r0, r6
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	4798      	blx	r3
 8009426:	4307      	orrs	r7, r0
 8009428:	3568      	adds	r5, #104	; 0x68
 800942a:	e7e8      	b.n	80093fe <_fwalk_reent+0x12>

0800942c <rshift>:
 800942c:	0002      	movs	r2, r0
 800942e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009430:	6904      	ldr	r4, [r0, #16]
 8009432:	3214      	adds	r2, #20
 8009434:	0013      	movs	r3, r2
 8009436:	b085      	sub	sp, #20
 8009438:	114f      	asrs	r7, r1, #5
 800943a:	42bc      	cmp	r4, r7
 800943c:	dd31      	ble.n	80094a2 <rshift+0x76>
 800943e:	00bb      	lsls	r3, r7, #2
 8009440:	18d3      	adds	r3, r2, r3
 8009442:	261f      	movs	r6, #31
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	000b      	movs	r3, r1
 8009448:	00a5      	lsls	r5, r4, #2
 800944a:	4033      	ands	r3, r6
 800944c:	1955      	adds	r5, r2, r5
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	4231      	tst	r1, r6
 8009452:	d10c      	bne.n	800946e <rshift+0x42>
 8009454:	0016      	movs	r6, r2
 8009456:	9901      	ldr	r1, [sp, #4]
 8009458:	428d      	cmp	r5, r1
 800945a:	d838      	bhi.n	80094ce <rshift+0xa2>
 800945c:	9901      	ldr	r1, [sp, #4]
 800945e:	2300      	movs	r3, #0
 8009460:	3903      	subs	r1, #3
 8009462:	428d      	cmp	r5, r1
 8009464:	d301      	bcc.n	800946a <rshift+0x3e>
 8009466:	1be3      	subs	r3, r4, r7
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	18d3      	adds	r3, r2, r3
 800946c:	e019      	b.n	80094a2 <rshift+0x76>
 800946e:	2120      	movs	r1, #32
 8009470:	9b02      	ldr	r3, [sp, #8]
 8009472:	9e01      	ldr	r6, [sp, #4]
 8009474:	1acb      	subs	r3, r1, r3
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	ce02      	ldmia	r6!, {r1}
 800947a:	9b02      	ldr	r3, [sp, #8]
 800947c:	4694      	mov	ip, r2
 800947e:	40d9      	lsrs	r1, r3
 8009480:	9100      	str	r1, [sp, #0]
 8009482:	42b5      	cmp	r5, r6
 8009484:	d816      	bhi.n	80094b4 <rshift+0x88>
 8009486:	9e01      	ldr	r6, [sp, #4]
 8009488:	2300      	movs	r3, #0
 800948a:	3601      	adds	r6, #1
 800948c:	42b5      	cmp	r5, r6
 800948e:	d302      	bcc.n	8009496 <rshift+0x6a>
 8009490:	1be3      	subs	r3, r4, r7
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	3b04      	subs	r3, #4
 8009496:	9900      	ldr	r1, [sp, #0]
 8009498:	18d3      	adds	r3, r2, r3
 800949a:	6019      	str	r1, [r3, #0]
 800949c:	2900      	cmp	r1, #0
 800949e:	d000      	beq.n	80094a2 <rshift+0x76>
 80094a0:	3304      	adds	r3, #4
 80094a2:	1a99      	subs	r1, r3, r2
 80094a4:	1089      	asrs	r1, r1, #2
 80094a6:	6101      	str	r1, [r0, #16]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d101      	bne.n	80094b0 <rshift+0x84>
 80094ac:	2300      	movs	r3, #0
 80094ae:	6143      	str	r3, [r0, #20]
 80094b0:	b005      	add	sp, #20
 80094b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b4:	6833      	ldr	r3, [r6, #0]
 80094b6:	9903      	ldr	r1, [sp, #12]
 80094b8:	408b      	lsls	r3, r1
 80094ba:	9900      	ldr	r1, [sp, #0]
 80094bc:	4319      	orrs	r1, r3
 80094be:	4663      	mov	r3, ip
 80094c0:	c302      	stmia	r3!, {r1}
 80094c2:	469c      	mov	ip, r3
 80094c4:	ce02      	ldmia	r6!, {r1}
 80094c6:	9b02      	ldr	r3, [sp, #8]
 80094c8:	40d9      	lsrs	r1, r3
 80094ca:	9100      	str	r1, [sp, #0]
 80094cc:	e7d9      	b.n	8009482 <rshift+0x56>
 80094ce:	c908      	ldmia	r1!, {r3}
 80094d0:	c608      	stmia	r6!, {r3}
 80094d2:	e7c1      	b.n	8009458 <rshift+0x2c>

080094d4 <__hexdig_fun>:
 80094d4:	0002      	movs	r2, r0
 80094d6:	3a30      	subs	r2, #48	; 0x30
 80094d8:	0003      	movs	r3, r0
 80094da:	2a09      	cmp	r2, #9
 80094dc:	d802      	bhi.n	80094e4 <__hexdig_fun+0x10>
 80094de:	3b20      	subs	r3, #32
 80094e0:	b2d8      	uxtb	r0, r3
 80094e2:	4770      	bx	lr
 80094e4:	0002      	movs	r2, r0
 80094e6:	3a61      	subs	r2, #97	; 0x61
 80094e8:	2a05      	cmp	r2, #5
 80094ea:	d801      	bhi.n	80094f0 <__hexdig_fun+0x1c>
 80094ec:	3b47      	subs	r3, #71	; 0x47
 80094ee:	e7f7      	b.n	80094e0 <__hexdig_fun+0xc>
 80094f0:	001a      	movs	r2, r3
 80094f2:	3a41      	subs	r2, #65	; 0x41
 80094f4:	2000      	movs	r0, #0
 80094f6:	2a05      	cmp	r2, #5
 80094f8:	d8f3      	bhi.n	80094e2 <__hexdig_fun+0xe>
 80094fa:	3b27      	subs	r3, #39	; 0x27
 80094fc:	e7f0      	b.n	80094e0 <__hexdig_fun+0xc>
	...

08009500 <__gethex>:
 8009500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009502:	b08d      	sub	sp, #52	; 0x34
 8009504:	930a      	str	r3, [sp, #40]	; 0x28
 8009506:	4bbf      	ldr	r3, [pc, #764]	; (8009804 <__gethex+0x304>)
 8009508:	9005      	str	r0, [sp, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	9109      	str	r1, [sp, #36]	; 0x24
 800950e:	0018      	movs	r0, r3
 8009510:	9202      	str	r2, [sp, #8]
 8009512:	9307      	str	r3, [sp, #28]
 8009514:	f7f6 fe02 	bl	800011c <strlen>
 8009518:	2202      	movs	r2, #2
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	4252      	negs	r2, r2
 800951e:	181b      	adds	r3, r3, r0
 8009520:	3b01      	subs	r3, #1
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	9003      	str	r0, [sp, #12]
 8009526:	930b      	str	r3, [sp, #44]	; 0x2c
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	1c8b      	adds	r3, r1, #2
 800952e:	1a52      	subs	r2, r2, r1
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	9301      	str	r3, [sp, #4]
 8009534:	9108      	str	r1, [sp, #32]
 8009536:	9901      	ldr	r1, [sp, #4]
 8009538:	3301      	adds	r3, #1
 800953a:	7808      	ldrb	r0, [r1, #0]
 800953c:	2830      	cmp	r0, #48	; 0x30
 800953e:	d0f7      	beq.n	8009530 <__gethex+0x30>
 8009540:	f7ff ffc8 	bl	80094d4 <__hexdig_fun>
 8009544:	2300      	movs	r3, #0
 8009546:	001c      	movs	r4, r3
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	4298      	cmp	r0, r3
 800954c:	d11f      	bne.n	800958e <__gethex+0x8e>
 800954e:	9a03      	ldr	r2, [sp, #12]
 8009550:	9907      	ldr	r1, [sp, #28]
 8009552:	9801      	ldr	r0, [sp, #4]
 8009554:	f001 fc84 	bl	800ae60 <strncmp>
 8009558:	0007      	movs	r7, r0
 800955a:	42a0      	cmp	r0, r4
 800955c:	d000      	beq.n	8009560 <__gethex+0x60>
 800955e:	e06b      	b.n	8009638 <__gethex+0x138>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	9a03      	ldr	r2, [sp, #12]
 8009564:	5c98      	ldrb	r0, [r3, r2]
 8009566:	189d      	adds	r5, r3, r2
 8009568:	f7ff ffb4 	bl	80094d4 <__hexdig_fun>
 800956c:	2301      	movs	r3, #1
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	42a0      	cmp	r0, r4
 8009572:	d030      	beq.n	80095d6 <__gethex+0xd6>
 8009574:	9501      	str	r5, [sp, #4]
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	7818      	ldrb	r0, [r3, #0]
 800957a:	2830      	cmp	r0, #48	; 0x30
 800957c:	d009      	beq.n	8009592 <__gethex+0x92>
 800957e:	f7ff ffa9 	bl	80094d4 <__hexdig_fun>
 8009582:	4242      	negs	r2, r0
 8009584:	4142      	adcs	r2, r0
 8009586:	2301      	movs	r3, #1
 8009588:	002c      	movs	r4, r5
 800958a:	9204      	str	r2, [sp, #16]
 800958c:	9308      	str	r3, [sp, #32]
 800958e:	9d01      	ldr	r5, [sp, #4]
 8009590:	e004      	b.n	800959c <__gethex+0x9c>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	3301      	adds	r3, #1
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	e7ed      	b.n	8009576 <__gethex+0x76>
 800959a:	3501      	adds	r5, #1
 800959c:	7828      	ldrb	r0, [r5, #0]
 800959e:	f7ff ff99 	bl	80094d4 <__hexdig_fun>
 80095a2:	1e07      	subs	r7, r0, #0
 80095a4:	d1f9      	bne.n	800959a <__gethex+0x9a>
 80095a6:	0028      	movs	r0, r5
 80095a8:	9a03      	ldr	r2, [sp, #12]
 80095aa:	9907      	ldr	r1, [sp, #28]
 80095ac:	f001 fc58 	bl	800ae60 <strncmp>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d10e      	bne.n	80095d2 <__gethex+0xd2>
 80095b4:	2c00      	cmp	r4, #0
 80095b6:	d107      	bne.n	80095c8 <__gethex+0xc8>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	18ed      	adds	r5, r5, r3
 80095bc:	002c      	movs	r4, r5
 80095be:	7828      	ldrb	r0, [r5, #0]
 80095c0:	f7ff ff88 	bl	80094d4 <__hexdig_fun>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d102      	bne.n	80095ce <__gethex+0xce>
 80095c8:	1b64      	subs	r4, r4, r5
 80095ca:	00a7      	lsls	r7, r4, #2
 80095cc:	e003      	b.n	80095d6 <__gethex+0xd6>
 80095ce:	3501      	adds	r5, #1
 80095d0:	e7f5      	b.n	80095be <__gethex+0xbe>
 80095d2:	2c00      	cmp	r4, #0
 80095d4:	d1f8      	bne.n	80095c8 <__gethex+0xc8>
 80095d6:	2220      	movs	r2, #32
 80095d8:	782b      	ldrb	r3, [r5, #0]
 80095da:	002e      	movs	r6, r5
 80095dc:	4393      	bics	r3, r2
 80095de:	2b50      	cmp	r3, #80	; 0x50
 80095e0:	d11d      	bne.n	800961e <__gethex+0x11e>
 80095e2:	786b      	ldrb	r3, [r5, #1]
 80095e4:	2b2b      	cmp	r3, #43	; 0x2b
 80095e6:	d02c      	beq.n	8009642 <__gethex+0x142>
 80095e8:	2b2d      	cmp	r3, #45	; 0x2d
 80095ea:	d02e      	beq.n	800964a <__gethex+0x14a>
 80095ec:	2300      	movs	r3, #0
 80095ee:	1c6e      	adds	r6, r5, #1
 80095f0:	9306      	str	r3, [sp, #24]
 80095f2:	7830      	ldrb	r0, [r6, #0]
 80095f4:	f7ff ff6e 	bl	80094d4 <__hexdig_fun>
 80095f8:	1e43      	subs	r3, r0, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b18      	cmp	r3, #24
 80095fe:	d82b      	bhi.n	8009658 <__gethex+0x158>
 8009600:	3810      	subs	r0, #16
 8009602:	0004      	movs	r4, r0
 8009604:	7870      	ldrb	r0, [r6, #1]
 8009606:	f7ff ff65 	bl	80094d4 <__hexdig_fun>
 800960a:	1e43      	subs	r3, r0, #1
 800960c:	b2db      	uxtb	r3, r3
 800960e:	3601      	adds	r6, #1
 8009610:	2b18      	cmp	r3, #24
 8009612:	d91c      	bls.n	800964e <__gethex+0x14e>
 8009614:	9b06      	ldr	r3, [sp, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d000      	beq.n	800961c <__gethex+0x11c>
 800961a:	4264      	negs	r4, r4
 800961c:	193f      	adds	r7, r7, r4
 800961e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009620:	601e      	str	r6, [r3, #0]
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d019      	beq.n	800965c <__gethex+0x15c>
 8009628:	2600      	movs	r6, #0
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	42b3      	cmp	r3, r6
 800962e:	d100      	bne.n	8009632 <__gethex+0x132>
 8009630:	3606      	adds	r6, #6
 8009632:	0030      	movs	r0, r6
 8009634:	b00d      	add	sp, #52	; 0x34
 8009636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009638:	2301      	movs	r3, #1
 800963a:	2700      	movs	r7, #0
 800963c:	9d01      	ldr	r5, [sp, #4]
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	e7c9      	b.n	80095d6 <__gethex+0xd6>
 8009642:	2300      	movs	r3, #0
 8009644:	9306      	str	r3, [sp, #24]
 8009646:	1cae      	adds	r6, r5, #2
 8009648:	e7d3      	b.n	80095f2 <__gethex+0xf2>
 800964a:	2301      	movs	r3, #1
 800964c:	e7fa      	b.n	8009644 <__gethex+0x144>
 800964e:	230a      	movs	r3, #10
 8009650:	435c      	muls	r4, r3
 8009652:	1824      	adds	r4, r4, r0
 8009654:	3c10      	subs	r4, #16
 8009656:	e7d5      	b.n	8009604 <__gethex+0x104>
 8009658:	002e      	movs	r6, r5
 800965a:	e7e0      	b.n	800961e <__gethex+0x11e>
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	9904      	ldr	r1, [sp, #16]
 8009660:	1aeb      	subs	r3, r5, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	2b07      	cmp	r3, #7
 8009666:	dc0a      	bgt.n	800967e <__gethex+0x17e>
 8009668:	9805      	ldr	r0, [sp, #20]
 800966a:	f000 fad5 	bl	8009c18 <_Balloc>
 800966e:	1e04      	subs	r4, r0, #0
 8009670:	d108      	bne.n	8009684 <__gethex+0x184>
 8009672:	0002      	movs	r2, r0
 8009674:	21de      	movs	r1, #222	; 0xde
 8009676:	4b64      	ldr	r3, [pc, #400]	; (8009808 <__gethex+0x308>)
 8009678:	4864      	ldr	r0, [pc, #400]	; (800980c <__gethex+0x30c>)
 800967a:	f001 fc25 	bl	800aec8 <__assert_func>
 800967e:	3101      	adds	r1, #1
 8009680:	105b      	asrs	r3, r3, #1
 8009682:	e7ef      	b.n	8009664 <__gethex+0x164>
 8009684:	0003      	movs	r3, r0
 8009686:	3314      	adds	r3, #20
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9309      	str	r3, [sp, #36]	; 0x24
 800968c:	2300      	movs	r3, #0
 800968e:	001e      	movs	r6, r3
 8009690:	9306      	str	r3, [sp, #24]
 8009692:	9b01      	ldr	r3, [sp, #4]
 8009694:	42ab      	cmp	r3, r5
 8009696:	d340      	bcc.n	800971a <__gethex+0x21a>
 8009698:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800969a:	9b04      	ldr	r3, [sp, #16]
 800969c:	c540      	stmia	r5!, {r6}
 800969e:	1aed      	subs	r5, r5, r3
 80096a0:	10ad      	asrs	r5, r5, #2
 80096a2:	0030      	movs	r0, r6
 80096a4:	6125      	str	r5, [r4, #16]
 80096a6:	f000 fbaf 	bl	8009e08 <__hi0bits>
 80096aa:	9b02      	ldr	r3, [sp, #8]
 80096ac:	016d      	lsls	r5, r5, #5
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	1a2e      	subs	r6, r5, r0
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	429e      	cmp	r6, r3
 80096b6:	dd5a      	ble.n	800976e <__gethex+0x26e>
 80096b8:	1af6      	subs	r6, r6, r3
 80096ba:	0031      	movs	r1, r6
 80096bc:	0020      	movs	r0, r4
 80096be:	f000 ff51 	bl	800a564 <__any_on>
 80096c2:	1e05      	subs	r5, r0, #0
 80096c4:	d016      	beq.n	80096f4 <__gethex+0x1f4>
 80096c6:	2501      	movs	r5, #1
 80096c8:	211f      	movs	r1, #31
 80096ca:	0028      	movs	r0, r5
 80096cc:	1e73      	subs	r3, r6, #1
 80096ce:	4019      	ands	r1, r3
 80096d0:	4088      	lsls	r0, r1
 80096d2:	0001      	movs	r1, r0
 80096d4:	115a      	asrs	r2, r3, #5
 80096d6:	9804      	ldr	r0, [sp, #16]
 80096d8:	0092      	lsls	r2, r2, #2
 80096da:	5812      	ldr	r2, [r2, r0]
 80096dc:	420a      	tst	r2, r1
 80096de:	d009      	beq.n	80096f4 <__gethex+0x1f4>
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	dd06      	ble.n	80096f2 <__gethex+0x1f2>
 80096e4:	0020      	movs	r0, r4
 80096e6:	1eb1      	subs	r1, r6, #2
 80096e8:	f000 ff3c 	bl	800a564 <__any_on>
 80096ec:	3502      	adds	r5, #2
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d100      	bne.n	80096f4 <__gethex+0x1f4>
 80096f2:	2502      	movs	r5, #2
 80096f4:	0031      	movs	r1, r6
 80096f6:	0020      	movs	r0, r4
 80096f8:	f7ff fe98 	bl	800942c <rshift>
 80096fc:	19bf      	adds	r7, r7, r6
 80096fe:	9b02      	ldr	r3, [sp, #8]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	42bb      	cmp	r3, r7
 8009706:	da42      	bge.n	800978e <__gethex+0x28e>
 8009708:	0021      	movs	r1, r4
 800970a:	9805      	ldr	r0, [sp, #20]
 800970c:	f000 fac8 	bl	8009ca0 <_Bfree>
 8009710:	2300      	movs	r3, #0
 8009712:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009714:	26a3      	movs	r6, #163	; 0xa3
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	e78b      	b.n	8009632 <__gethex+0x132>
 800971a:	1e6b      	subs	r3, r5, #1
 800971c:	9308      	str	r3, [sp, #32]
 800971e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	4293      	cmp	r3, r2
 8009724:	d014      	beq.n	8009750 <__gethex+0x250>
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	2b20      	cmp	r3, #32
 800972a:	d104      	bne.n	8009736 <__gethex+0x236>
 800972c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972e:	c340      	stmia	r3!, {r6}
 8009730:	2600      	movs	r6, #0
 8009732:	9309      	str	r3, [sp, #36]	; 0x24
 8009734:	9606      	str	r6, [sp, #24]
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	7818      	ldrb	r0, [r3, #0]
 800973a:	f7ff fecb 	bl	80094d4 <__hexdig_fun>
 800973e:	230f      	movs	r3, #15
 8009740:	4018      	ands	r0, r3
 8009742:	9b06      	ldr	r3, [sp, #24]
 8009744:	9d08      	ldr	r5, [sp, #32]
 8009746:	4098      	lsls	r0, r3
 8009748:	3304      	adds	r3, #4
 800974a:	4306      	orrs	r6, r0
 800974c:	9306      	str	r3, [sp, #24]
 800974e:	e7a0      	b.n	8009692 <__gethex+0x192>
 8009750:	2301      	movs	r3, #1
 8009752:	9a03      	ldr	r2, [sp, #12]
 8009754:	1a9d      	subs	r5, r3, r2
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	195d      	adds	r5, r3, r5
 800975a:	9b01      	ldr	r3, [sp, #4]
 800975c:	429d      	cmp	r5, r3
 800975e:	d3e2      	bcc.n	8009726 <__gethex+0x226>
 8009760:	0028      	movs	r0, r5
 8009762:	9907      	ldr	r1, [sp, #28]
 8009764:	f001 fb7c 	bl	800ae60 <strncmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	d1dc      	bne.n	8009726 <__gethex+0x226>
 800976c:	e791      	b.n	8009692 <__gethex+0x192>
 800976e:	9b01      	ldr	r3, [sp, #4]
 8009770:	2500      	movs	r5, #0
 8009772:	429e      	cmp	r6, r3
 8009774:	dac3      	bge.n	80096fe <__gethex+0x1fe>
 8009776:	1b9e      	subs	r6, r3, r6
 8009778:	0021      	movs	r1, r4
 800977a:	0032      	movs	r2, r6
 800977c:	9805      	ldr	r0, [sp, #20]
 800977e:	f000 fcad 	bl	800a0dc <__lshift>
 8009782:	0003      	movs	r3, r0
 8009784:	3314      	adds	r3, #20
 8009786:	0004      	movs	r4, r0
 8009788:	1bbf      	subs	r7, r7, r6
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	e7b7      	b.n	80096fe <__gethex+0x1fe>
 800978e:	9b02      	ldr	r3, [sp, #8]
 8009790:	685e      	ldr	r6, [r3, #4]
 8009792:	42be      	cmp	r6, r7
 8009794:	dd71      	ble.n	800987a <__gethex+0x37a>
 8009796:	9b01      	ldr	r3, [sp, #4]
 8009798:	1bf6      	subs	r6, r6, r7
 800979a:	42b3      	cmp	r3, r6
 800979c:	dc38      	bgt.n	8009810 <__gethex+0x310>
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d026      	beq.n	80097f4 <__gethex+0x2f4>
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d028      	beq.n	80097fc <__gethex+0x2fc>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d119      	bne.n	80097e2 <__gethex+0x2e2>
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	42b3      	cmp	r3, r6
 80097b2:	d116      	bne.n	80097e2 <__gethex+0x2e2>
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10d      	bne.n	80097d4 <__gethex+0x2d4>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2662      	movs	r6, #98	; 0x62
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	9a01      	ldr	r2, [sp, #4]
 80097c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	2301      	movs	r3, #1
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	6013      	str	r3, [r2, #0]
 80097ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097d0:	601c      	str	r4, [r3, #0]
 80097d2:	e72e      	b.n	8009632 <__gethex+0x132>
 80097d4:	9901      	ldr	r1, [sp, #4]
 80097d6:	0020      	movs	r0, r4
 80097d8:	3901      	subs	r1, #1
 80097da:	f000 fec3 	bl	800a564 <__any_on>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1ea      	bne.n	80097b8 <__gethex+0x2b8>
 80097e2:	0021      	movs	r1, r4
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f000 fa5b 	bl	8009ca0 <_Bfree>
 80097ea:	2300      	movs	r3, #0
 80097ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097ee:	2650      	movs	r6, #80	; 0x50
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e71e      	b.n	8009632 <__gethex+0x132>
 80097f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f3      	bne.n	80097e2 <__gethex+0x2e2>
 80097fa:	e7dd      	b.n	80097b8 <__gethex+0x2b8>
 80097fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1da      	bne.n	80097b8 <__gethex+0x2b8>
 8009802:	e7ee      	b.n	80097e2 <__gethex+0x2e2>
 8009804:	0800bb7c 	.word	0x0800bb7c
 8009808:	0800bb04 	.word	0x0800bb04
 800980c:	0800bb15 	.word	0x0800bb15
 8009810:	1e77      	subs	r7, r6, #1
 8009812:	2d00      	cmp	r5, #0
 8009814:	d12f      	bne.n	8009876 <__gethex+0x376>
 8009816:	2f00      	cmp	r7, #0
 8009818:	d004      	beq.n	8009824 <__gethex+0x324>
 800981a:	0039      	movs	r1, r7
 800981c:	0020      	movs	r0, r4
 800981e:	f000 fea1 	bl	800a564 <__any_on>
 8009822:	0005      	movs	r5, r0
 8009824:	231f      	movs	r3, #31
 8009826:	117a      	asrs	r2, r7, #5
 8009828:	401f      	ands	r7, r3
 800982a:	3b1e      	subs	r3, #30
 800982c:	40bb      	lsls	r3, r7
 800982e:	9904      	ldr	r1, [sp, #16]
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	5852      	ldr	r2, [r2, r1]
 8009834:	421a      	tst	r2, r3
 8009836:	d001      	beq.n	800983c <__gethex+0x33c>
 8009838:	2302      	movs	r3, #2
 800983a:	431d      	orrs	r5, r3
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	0031      	movs	r1, r6
 8009840:	1b9b      	subs	r3, r3, r6
 8009842:	2602      	movs	r6, #2
 8009844:	0020      	movs	r0, r4
 8009846:	9301      	str	r3, [sp, #4]
 8009848:	f7ff fdf0 	bl	800942c <rshift>
 800984c:	9b02      	ldr	r3, [sp, #8]
 800984e:	685f      	ldr	r7, [r3, #4]
 8009850:	2d00      	cmp	r5, #0
 8009852:	d041      	beq.n	80098d8 <__gethex+0x3d8>
 8009854:	9b02      	ldr	r3, [sp, #8]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d010      	beq.n	800987e <__gethex+0x37e>
 800985c:	2b03      	cmp	r3, #3
 800985e:	d012      	beq.n	8009886 <__gethex+0x386>
 8009860:	2b01      	cmp	r3, #1
 8009862:	d106      	bne.n	8009872 <__gethex+0x372>
 8009864:	07aa      	lsls	r2, r5, #30
 8009866:	d504      	bpl.n	8009872 <__gethex+0x372>
 8009868:	9a04      	ldr	r2, [sp, #16]
 800986a:	6810      	ldr	r0, [r2, #0]
 800986c:	4305      	orrs	r5, r0
 800986e:	421d      	tst	r5, r3
 8009870:	d10c      	bne.n	800988c <__gethex+0x38c>
 8009872:	2310      	movs	r3, #16
 8009874:	e02f      	b.n	80098d6 <__gethex+0x3d6>
 8009876:	2501      	movs	r5, #1
 8009878:	e7d4      	b.n	8009824 <__gethex+0x324>
 800987a:	2601      	movs	r6, #1
 800987c:	e7e8      	b.n	8009850 <__gethex+0x350>
 800987e:	2301      	movs	r3, #1
 8009880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	9313      	str	r3, [sp, #76]	; 0x4c
 8009886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0f2      	beq.n	8009872 <__gethex+0x372>
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	2000      	movs	r0, #0
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	0023      	movs	r3, r4
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	3314      	adds	r3, #20
 800989c:	1899      	adds	r1, r3, r2
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	1c55      	adds	r5, r2, #1
 80098a2:	d01e      	beq.n	80098e2 <__gethex+0x3e2>
 80098a4:	3201      	adds	r2, #1
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	0023      	movs	r3, r4
 80098aa:	3314      	adds	r3, #20
 80098ac:	2e02      	cmp	r6, #2
 80098ae:	d140      	bne.n	8009932 <__gethex+0x432>
 80098b0:	9a02      	ldr	r2, [sp, #8]
 80098b2:	9901      	ldr	r1, [sp, #4]
 80098b4:	6812      	ldr	r2, [r2, #0]
 80098b6:	3a01      	subs	r2, #1
 80098b8:	428a      	cmp	r2, r1
 80098ba:	d10b      	bne.n	80098d4 <__gethex+0x3d4>
 80098bc:	114a      	asrs	r2, r1, #5
 80098be:	211f      	movs	r1, #31
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	4001      	ands	r1, r0
 80098c6:	2001      	movs	r0, #1
 80098c8:	0005      	movs	r5, r0
 80098ca:	408d      	lsls	r5, r1
 80098cc:	58d3      	ldr	r3, [r2, r3]
 80098ce:	422b      	tst	r3, r5
 80098d0:	d000      	beq.n	80098d4 <__gethex+0x3d4>
 80098d2:	2601      	movs	r6, #1
 80098d4:	2320      	movs	r3, #32
 80098d6:	431e      	orrs	r6, r3
 80098d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098da:	601c      	str	r4, [r3, #0]
 80098dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098de:	601f      	str	r7, [r3, #0]
 80098e0:	e6a7      	b.n	8009632 <__gethex+0x132>
 80098e2:	c301      	stmia	r3!, {r0}
 80098e4:	4299      	cmp	r1, r3
 80098e6:	d8da      	bhi.n	800989e <__gethex+0x39e>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	68a2      	ldr	r2, [r4, #8]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	db17      	blt.n	8009920 <__gethex+0x420>
 80098f0:	6863      	ldr	r3, [r4, #4]
 80098f2:	9805      	ldr	r0, [sp, #20]
 80098f4:	1c59      	adds	r1, r3, #1
 80098f6:	f000 f98f 	bl	8009c18 <_Balloc>
 80098fa:	1e05      	subs	r5, r0, #0
 80098fc:	d103      	bne.n	8009906 <__gethex+0x406>
 80098fe:	0002      	movs	r2, r0
 8009900:	2184      	movs	r1, #132	; 0x84
 8009902:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <__gethex+0x474>)
 8009904:	e6b8      	b.n	8009678 <__gethex+0x178>
 8009906:	0021      	movs	r1, r4
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	310c      	adds	r1, #12
 800990c:	1c9a      	adds	r2, r3, #2
 800990e:	0092      	lsls	r2, r2, #2
 8009910:	300c      	adds	r0, #12
 8009912:	f7fe fad5 	bl	8007ec0 <memcpy>
 8009916:	0021      	movs	r1, r4
 8009918:	9805      	ldr	r0, [sp, #20]
 800991a:	f000 f9c1 	bl	8009ca0 <_Bfree>
 800991e:	002c      	movs	r4, r5
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	6122      	str	r2, [r4, #16]
 8009926:	2201      	movs	r2, #1
 8009928:	3304      	adds	r3, #4
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	18e3      	adds	r3, r4, r3
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	e7ba      	b.n	80098a8 <__gethex+0x3a8>
 8009932:	6922      	ldr	r2, [r4, #16]
 8009934:	9903      	ldr	r1, [sp, #12]
 8009936:	428a      	cmp	r2, r1
 8009938:	dd09      	ble.n	800994e <__gethex+0x44e>
 800993a:	2101      	movs	r1, #1
 800993c:	0020      	movs	r0, r4
 800993e:	f7ff fd75 	bl	800942c <rshift>
 8009942:	9b02      	ldr	r3, [sp, #8]
 8009944:	3701      	adds	r7, #1
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	42bb      	cmp	r3, r7
 800994a:	dac2      	bge.n	80098d2 <__gethex+0x3d2>
 800994c:	e6dc      	b.n	8009708 <__gethex+0x208>
 800994e:	221f      	movs	r2, #31
 8009950:	9d01      	ldr	r5, [sp, #4]
 8009952:	9901      	ldr	r1, [sp, #4]
 8009954:	2601      	movs	r6, #1
 8009956:	4015      	ands	r5, r2
 8009958:	4211      	tst	r1, r2
 800995a:	d0bb      	beq.n	80098d4 <__gethex+0x3d4>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	189b      	adds	r3, r3, r2
 8009960:	3b04      	subs	r3, #4
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	f000 fa50 	bl	8009e08 <__hi0bits>
 8009968:	2320      	movs	r3, #32
 800996a:	1b5d      	subs	r5, r3, r5
 800996c:	42a8      	cmp	r0, r5
 800996e:	dbe4      	blt.n	800993a <__gethex+0x43a>
 8009970:	e7b0      	b.n	80098d4 <__gethex+0x3d4>
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	0800bb04 	.word	0x0800bb04

08009978 <L_shift>:
 8009978:	2308      	movs	r3, #8
 800997a:	b570      	push	{r4, r5, r6, lr}
 800997c:	2520      	movs	r5, #32
 800997e:	1a9a      	subs	r2, r3, r2
 8009980:	0092      	lsls	r2, r2, #2
 8009982:	1aad      	subs	r5, r5, r2
 8009984:	6843      	ldr	r3, [r0, #4]
 8009986:	6806      	ldr	r6, [r0, #0]
 8009988:	001c      	movs	r4, r3
 800998a:	40ac      	lsls	r4, r5
 800998c:	40d3      	lsrs	r3, r2
 800998e:	4334      	orrs	r4, r6
 8009990:	6004      	str	r4, [r0, #0]
 8009992:	6043      	str	r3, [r0, #4]
 8009994:	3004      	adds	r0, #4
 8009996:	4288      	cmp	r0, r1
 8009998:	d3f4      	bcc.n	8009984 <L_shift+0xc>
 800999a:	bd70      	pop	{r4, r5, r6, pc}

0800999c <__match>:
 800999c:	b530      	push	{r4, r5, lr}
 800999e:	6803      	ldr	r3, [r0, #0]
 80099a0:	780c      	ldrb	r4, [r1, #0]
 80099a2:	3301      	adds	r3, #1
 80099a4:	2c00      	cmp	r4, #0
 80099a6:	d102      	bne.n	80099ae <__match+0x12>
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	2001      	movs	r0, #1
 80099ac:	bd30      	pop	{r4, r5, pc}
 80099ae:	781a      	ldrb	r2, [r3, #0]
 80099b0:	0015      	movs	r5, r2
 80099b2:	3d41      	subs	r5, #65	; 0x41
 80099b4:	2d19      	cmp	r5, #25
 80099b6:	d800      	bhi.n	80099ba <__match+0x1e>
 80099b8:	3220      	adds	r2, #32
 80099ba:	3101      	adds	r1, #1
 80099bc:	42a2      	cmp	r2, r4
 80099be:	d0ef      	beq.n	80099a0 <__match+0x4>
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7f3      	b.n	80099ac <__match+0x10>

080099c4 <__hexnan>:
 80099c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c6:	680b      	ldr	r3, [r1, #0]
 80099c8:	b08b      	sub	sp, #44	; 0x2c
 80099ca:	9201      	str	r2, [sp, #4]
 80099cc:	9901      	ldr	r1, [sp, #4]
 80099ce:	115a      	asrs	r2, r3, #5
 80099d0:	0092      	lsls	r2, r2, #2
 80099d2:	188a      	adds	r2, r1, r2
 80099d4:	9202      	str	r2, [sp, #8]
 80099d6:	0019      	movs	r1, r3
 80099d8:	221f      	movs	r2, #31
 80099da:	4011      	ands	r1, r2
 80099dc:	9008      	str	r0, [sp, #32]
 80099de:	9106      	str	r1, [sp, #24]
 80099e0:	4213      	tst	r3, r2
 80099e2:	d002      	beq.n	80099ea <__hexnan+0x26>
 80099e4:	9b02      	ldr	r3, [sp, #8]
 80099e6:	3304      	adds	r3, #4
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	2500      	movs	r5, #0
 80099ee:	1f1e      	subs	r6, r3, #4
 80099f0:	0037      	movs	r7, r6
 80099f2:	0034      	movs	r4, r6
 80099f4:	9b08      	ldr	r3, [sp, #32]
 80099f6:	6035      	str	r5, [r6, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	9507      	str	r5, [sp, #28]
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	9503      	str	r5, [sp, #12]
 8009a00:	9b05      	ldr	r3, [sp, #20]
 8009a02:	3301      	adds	r3, #1
 8009a04:	9309      	str	r3, [sp, #36]	; 0x24
 8009a06:	9b05      	ldr	r3, [sp, #20]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d028      	beq.n	8009a62 <__hexnan+0x9e>
 8009a10:	9804      	ldr	r0, [sp, #16]
 8009a12:	f7ff fd5f 	bl	80094d4 <__hexdig_fun>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d154      	bne.n	8009ac4 <__hexnan+0x100>
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d819      	bhi.n	8009a54 <__hexnan+0x90>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	dd12      	ble.n	8009a4e <__hexnan+0x8a>
 8009a28:	42bc      	cmp	r4, r7
 8009a2a:	d206      	bcs.n	8009a3a <__hexnan+0x76>
 8009a2c:	2d07      	cmp	r5, #7
 8009a2e:	dc04      	bgt.n	8009a3a <__hexnan+0x76>
 8009a30:	002a      	movs	r2, r5
 8009a32:	0039      	movs	r1, r7
 8009a34:	0020      	movs	r0, r4
 8009a36:	f7ff ff9f 	bl	8009978 <L_shift>
 8009a3a:	9b01      	ldr	r3, [sp, #4]
 8009a3c:	2508      	movs	r5, #8
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	d905      	bls.n	8009a4e <__hexnan+0x8a>
 8009a42:	1f27      	subs	r7, r4, #4
 8009a44:	2500      	movs	r5, #0
 8009a46:	003c      	movs	r4, r7
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	603d      	str	r5, [r7, #0]
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	e7d5      	b.n	8009a00 <__hexnan+0x3c>
 8009a54:	9b04      	ldr	r3, [sp, #16]
 8009a56:	2b29      	cmp	r3, #41	; 0x29
 8009a58:	d159      	bne.n	8009b0e <__hexnan+0x14a>
 8009a5a:	9b05      	ldr	r3, [sp, #20]
 8009a5c:	9a08      	ldr	r2, [sp, #32]
 8009a5e:	3302      	adds	r3, #2
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d052      	beq.n	8009b0e <__hexnan+0x14a>
 8009a68:	42bc      	cmp	r4, r7
 8009a6a:	d206      	bcs.n	8009a7a <__hexnan+0xb6>
 8009a6c:	2d07      	cmp	r5, #7
 8009a6e:	dc04      	bgt.n	8009a7a <__hexnan+0xb6>
 8009a70:	002a      	movs	r2, r5
 8009a72:	0039      	movs	r1, r7
 8009a74:	0020      	movs	r0, r4
 8009a76:	f7ff ff7f 	bl	8009978 <L_shift>
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	d935      	bls.n	8009aec <__hexnan+0x128>
 8009a80:	001a      	movs	r2, r3
 8009a82:	0023      	movs	r3, r4
 8009a84:	cb02      	ldmia	r3!, {r1}
 8009a86:	c202      	stmia	r2!, {r1}
 8009a88:	429e      	cmp	r6, r3
 8009a8a:	d2fb      	bcs.n	8009a84 <__hexnan+0xc0>
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	1c61      	adds	r1, r4, #1
 8009a90:	1eda      	subs	r2, r3, #3
 8009a92:	2304      	movs	r3, #4
 8009a94:	4291      	cmp	r1, r2
 8009a96:	d805      	bhi.n	8009aa4 <__hexnan+0xe0>
 8009a98:	9b02      	ldr	r3, [sp, #8]
 8009a9a:	3b04      	subs	r3, #4
 8009a9c:	1b1b      	subs	r3, r3, r4
 8009a9e:	089b      	lsrs	r3, r3, #2
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	9a01      	ldr	r2, [sp, #4]
 8009aa6:	18d3      	adds	r3, r2, r3
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	c304      	stmia	r3!, {r2}
 8009aac:	429e      	cmp	r6, r3
 8009aae:	d2fc      	bcs.n	8009aaa <__hexnan+0xe6>
 8009ab0:	6833      	ldr	r3, [r6, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <__hexnan+0xfc>
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	d126      	bne.n	8009b0a <__hexnan+0x146>
 8009abc:	2301      	movs	r3, #1
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	2005      	movs	r0, #5
 8009ac2:	e025      	b.n	8009b10 <__hexnan+0x14c>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	3501      	adds	r5, #1
 8009ac8:	3301      	adds	r3, #1
 8009aca:	9303      	str	r3, [sp, #12]
 8009acc:	2d08      	cmp	r5, #8
 8009ace:	dd06      	ble.n	8009ade <__hexnan+0x11a>
 8009ad0:	9b01      	ldr	r3, [sp, #4]
 8009ad2:	429c      	cmp	r4, r3
 8009ad4:	d9bb      	bls.n	8009a4e <__hexnan+0x8a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	2501      	movs	r5, #1
 8009ada:	3c04      	subs	r4, #4
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	220f      	movs	r2, #15
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	4010      	ands	r0, r2
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	4318      	orrs	r0, r3
 8009ae8:	6020      	str	r0, [r4, #0]
 8009aea:	e7b0      	b.n	8009a4e <__hexnan+0x8a>
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0de      	beq.n	8009ab0 <__hexnan+0xec>
 8009af2:	2120      	movs	r1, #32
 8009af4:	9a06      	ldr	r2, [sp, #24]
 8009af6:	9b02      	ldr	r3, [sp, #8]
 8009af8:	1a89      	subs	r1, r1, r2
 8009afa:	2201      	movs	r2, #1
 8009afc:	4252      	negs	r2, r2
 8009afe:	40ca      	lsrs	r2, r1
 8009b00:	3b04      	subs	r3, #4
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	400a      	ands	r2, r1
 8009b06:	601a      	str	r2, [r3, #0]
 8009b08:	e7d2      	b.n	8009ab0 <__hexnan+0xec>
 8009b0a:	3e04      	subs	r6, #4
 8009b0c:	e7d0      	b.n	8009ab0 <__hexnan+0xec>
 8009b0e:	2004      	movs	r0, #4
 8009b10:	b00b      	add	sp, #44	; 0x2c
 8009b12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b14 <__retarget_lock_init_recursive>:
 8009b14:	4770      	bx	lr

08009b16 <__retarget_lock_acquire_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_release_recursive>:
 8009b18:	4770      	bx	lr
	...

08009b1c <__swhatbuf_r>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	000e      	movs	r6, r1
 8009b20:	001d      	movs	r5, r3
 8009b22:	230e      	movs	r3, #14
 8009b24:	5ec9      	ldrsh	r1, [r1, r3]
 8009b26:	0014      	movs	r4, r2
 8009b28:	b096      	sub	sp, #88	; 0x58
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	da08      	bge.n	8009b40 <__swhatbuf_r+0x24>
 8009b2e:	220c      	movs	r2, #12
 8009b30:	5eb3      	ldrsh	r3, [r6, r2]
 8009b32:	2200      	movs	r2, #0
 8009b34:	602a      	str	r2, [r5, #0]
 8009b36:	061b      	lsls	r3, r3, #24
 8009b38:	d411      	bmi.n	8009b5e <__swhatbuf_r+0x42>
 8009b3a:	2380      	movs	r3, #128	; 0x80
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	e00f      	b.n	8009b60 <__swhatbuf_r+0x44>
 8009b40:	466a      	mov	r2, sp
 8009b42:	f001 fa01 	bl	800af48 <_fstat_r>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	dbf1      	blt.n	8009b2e <__swhatbuf_r+0x12>
 8009b4a:	23f0      	movs	r3, #240	; 0xf0
 8009b4c:	9901      	ldr	r1, [sp, #4]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	4019      	ands	r1, r3
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <__swhatbuf_r+0x4c>)
 8009b54:	18c9      	adds	r1, r1, r3
 8009b56:	424b      	negs	r3, r1
 8009b58:	4159      	adcs	r1, r3
 8009b5a:	6029      	str	r1, [r5, #0]
 8009b5c:	e7ed      	b.n	8009b3a <__swhatbuf_r+0x1e>
 8009b5e:	2340      	movs	r3, #64	; 0x40
 8009b60:	2000      	movs	r0, #0
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	b016      	add	sp, #88	; 0x58
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	ffffe000 	.word	0xffffe000

08009b6c <__smakebuf_r>:
 8009b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6e:	2602      	movs	r6, #2
 8009b70:	898b      	ldrh	r3, [r1, #12]
 8009b72:	0005      	movs	r5, r0
 8009b74:	000c      	movs	r4, r1
 8009b76:	4233      	tst	r3, r6
 8009b78:	d006      	beq.n	8009b88 <__smakebuf_r+0x1c>
 8009b7a:	0023      	movs	r3, r4
 8009b7c:	3347      	adds	r3, #71	; 0x47
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	2301      	movs	r3, #1
 8009b84:	6163      	str	r3, [r4, #20]
 8009b86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009b88:	466a      	mov	r2, sp
 8009b8a:	ab01      	add	r3, sp, #4
 8009b8c:	f7ff ffc6 	bl	8009b1c <__swhatbuf_r>
 8009b90:	9900      	ldr	r1, [sp, #0]
 8009b92:	0007      	movs	r7, r0
 8009b94:	0028      	movs	r0, r5
 8009b96:	f000 fda1 	bl	800a6dc <_malloc_r>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d108      	bne.n	8009bb0 <__smakebuf_r+0x44>
 8009b9e:	220c      	movs	r2, #12
 8009ba0:	5ea3      	ldrsh	r3, [r4, r2]
 8009ba2:	059a      	lsls	r2, r3, #22
 8009ba4:	d4ef      	bmi.n	8009b86 <__smakebuf_r+0x1a>
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	4393      	bics	r3, r2
 8009baa:	431e      	orrs	r6, r3
 8009bac:	81a6      	strh	r6, [r4, #12]
 8009bae:	e7e4      	b.n	8009b7a <__smakebuf_r+0xe>
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <__smakebuf_r+0x84>)
 8009bb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	89a2      	ldrh	r2, [r4, #12]
 8009bb8:	6020      	str	r0, [r4, #0]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	6120      	str	r0, [r4, #16]
 8009bc2:	6163      	str	r3, [r4, #20]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <__smakebuf_r+0x7a>
 8009bca:	0028      	movs	r0, r5
 8009bcc:	230e      	movs	r3, #14
 8009bce:	5ee1      	ldrsh	r1, [r4, r3]
 8009bd0:	f001 f9cc 	bl	800af6c <_isatty_r>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d006      	beq.n	8009be6 <__smakebuf_r+0x7a>
 8009bd8:	2203      	movs	r2, #3
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	4393      	bics	r3, r2
 8009bde:	001a      	movs	r2, r3
 8009be0:	2301      	movs	r3, #1
 8009be2:	4313      	orrs	r3, r2
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	89a0      	ldrh	r0, [r4, #12]
 8009be8:	4307      	orrs	r7, r0
 8009bea:	81a7      	strh	r7, [r4, #12]
 8009bec:	e7cb      	b.n	8009b86 <__smakebuf_r+0x1a>
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	08009271 	.word	0x08009271

08009bf4 <__ascii_mbtowc>:
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	d100      	bne.n	8009bfc <__ascii_mbtowc+0x8>
 8009bfa:	a901      	add	r1, sp, #4
 8009bfc:	1e10      	subs	r0, r2, #0
 8009bfe:	d006      	beq.n	8009c0e <__ascii_mbtowc+0x1a>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <__ascii_mbtowc+0x1e>
 8009c04:	7813      	ldrb	r3, [r2, #0]
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	7810      	ldrb	r0, [r2, #0]
 8009c0a:	1e43      	subs	r3, r0, #1
 8009c0c:	4198      	sbcs	r0, r3
 8009c0e:	b002      	add	sp, #8
 8009c10:	4770      	bx	lr
 8009c12:	2002      	movs	r0, #2
 8009c14:	4240      	negs	r0, r0
 8009c16:	e7fa      	b.n	8009c0e <__ascii_mbtowc+0x1a>

08009c18 <_Balloc>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c1c:	0006      	movs	r6, r0
 8009c1e:	000c      	movs	r4, r1
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	d10e      	bne.n	8009c42 <_Balloc+0x2a>
 8009c24:	2010      	movs	r0, #16
 8009c26:	f001 f9c7 	bl	800afb8 <malloc>
 8009c2a:	1e02      	subs	r2, r0, #0
 8009c2c:	6270      	str	r0, [r6, #36]	; 0x24
 8009c2e:	d104      	bne.n	8009c3a <_Balloc+0x22>
 8009c30:	2166      	movs	r1, #102	; 0x66
 8009c32:	4b19      	ldr	r3, [pc, #100]	; (8009c98 <_Balloc+0x80>)
 8009c34:	4819      	ldr	r0, [pc, #100]	; (8009c9c <_Balloc+0x84>)
 8009c36:	f001 f947 	bl	800aec8 <__assert_func>
 8009c3a:	6045      	str	r5, [r0, #4]
 8009c3c:	6085      	str	r5, [r0, #8]
 8009c3e:	6005      	str	r5, [r0, #0]
 8009c40:	60c5      	str	r5, [r0, #12]
 8009c42:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009c44:	68eb      	ldr	r3, [r5, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d013      	beq.n	8009c72 <_Balloc+0x5a>
 8009c4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c4c:	00a2      	lsls	r2, r4, #2
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	189b      	adds	r3, r3, r2
 8009c52:	6818      	ldr	r0, [r3, #0]
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d118      	bne.n	8009c8a <_Balloc+0x72>
 8009c58:	2101      	movs	r1, #1
 8009c5a:	000d      	movs	r5, r1
 8009c5c:	40a5      	lsls	r5, r4
 8009c5e:	1d6a      	adds	r2, r5, #5
 8009c60:	0030      	movs	r0, r6
 8009c62:	0092      	lsls	r2, r2, #2
 8009c64:	f000 fca1 	bl	800a5aa <_calloc_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d00c      	beq.n	8009c86 <_Balloc+0x6e>
 8009c6c:	6044      	str	r4, [r0, #4]
 8009c6e:	6085      	str	r5, [r0, #8]
 8009c70:	e00d      	b.n	8009c8e <_Balloc+0x76>
 8009c72:	2221      	movs	r2, #33	; 0x21
 8009c74:	2104      	movs	r1, #4
 8009c76:	0030      	movs	r0, r6
 8009c78:	f000 fc97 	bl	800a5aa <_calloc_r>
 8009c7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c7e:	60e8      	str	r0, [r5, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e1      	bne.n	8009c4a <_Balloc+0x32>
 8009c86:	2000      	movs	r0, #0
 8009c88:	bd70      	pop	{r4, r5, r6, pc}
 8009c8a:	6802      	ldr	r2, [r0, #0]
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	6103      	str	r3, [r0, #16]
 8009c92:	60c3      	str	r3, [r0, #12]
 8009c94:	e7f8      	b.n	8009c88 <_Balloc+0x70>
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	0800bb90 	.word	0x0800bb90
 8009c9c:	0800bba7 	.word	0x0800bba7

08009ca0 <_Bfree>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ca4:	0005      	movs	r5, r0
 8009ca6:	000c      	movs	r4, r1
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	d10e      	bne.n	8009cca <_Bfree+0x2a>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f001 f983 	bl	800afb8 <malloc>
 8009cb2:	1e02      	subs	r2, r0, #0
 8009cb4:	6268      	str	r0, [r5, #36]	; 0x24
 8009cb6:	d104      	bne.n	8009cc2 <_Bfree+0x22>
 8009cb8:	218a      	movs	r1, #138	; 0x8a
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <_Bfree+0x40>)
 8009cbc:	4809      	ldr	r0, [pc, #36]	; (8009ce4 <_Bfree+0x44>)
 8009cbe:	f001 f903 	bl	800aec8 <__assert_func>
 8009cc2:	6046      	str	r6, [r0, #4]
 8009cc4:	6086      	str	r6, [r0, #8]
 8009cc6:	6006      	str	r6, [r0, #0]
 8009cc8:	60c6      	str	r6, [r0, #12]
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	d007      	beq.n	8009cde <_Bfree+0x3e>
 8009cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009cd0:	6862      	ldr	r2, [r4, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	0092      	lsls	r2, r2, #2
 8009cd6:	189b      	adds	r3, r3, r2
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	6022      	str	r2, [r4, #0]
 8009cdc:	601c      	str	r4, [r3, #0]
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	0800bb90 	.word	0x0800bb90
 8009ce4:	0800bba7 	.word	0x0800bba7

08009ce8 <__multadd>:
 8009ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cea:	000e      	movs	r6, r1
 8009cec:	9001      	str	r0, [sp, #4]
 8009cee:	000c      	movs	r4, r1
 8009cf0:	001d      	movs	r5, r3
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	690f      	ldr	r7, [r1, #16]
 8009cf6:	3614      	adds	r6, #20
 8009cf8:	6833      	ldr	r3, [r6, #0]
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	b299      	uxth	r1, r3
 8009cfe:	4351      	muls	r1, r2
 8009d00:	0c1b      	lsrs	r3, r3, #16
 8009d02:	4353      	muls	r3, r2
 8009d04:	1949      	adds	r1, r1, r5
 8009d06:	0c0d      	lsrs	r5, r1, #16
 8009d08:	195b      	adds	r3, r3, r5
 8009d0a:	0c1d      	lsrs	r5, r3, #16
 8009d0c:	b289      	uxth	r1, r1
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	185b      	adds	r3, r3, r1
 8009d12:	c608      	stmia	r6!, {r3}
 8009d14:	4287      	cmp	r7, r0
 8009d16:	dcef      	bgt.n	8009cf8 <__multadd+0x10>
 8009d18:	2d00      	cmp	r5, #0
 8009d1a:	d022      	beq.n	8009d62 <__multadd+0x7a>
 8009d1c:	68a3      	ldr	r3, [r4, #8]
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	dc19      	bgt.n	8009d56 <__multadd+0x6e>
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	9801      	ldr	r0, [sp, #4]
 8009d26:	1c59      	adds	r1, r3, #1
 8009d28:	f7ff ff76 	bl	8009c18 <_Balloc>
 8009d2c:	1e06      	subs	r6, r0, #0
 8009d2e:	d105      	bne.n	8009d3c <__multadd+0x54>
 8009d30:	0002      	movs	r2, r0
 8009d32:	21b5      	movs	r1, #181	; 0xb5
 8009d34:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <__multadd+0x80>)
 8009d36:	480d      	ldr	r0, [pc, #52]	; (8009d6c <__multadd+0x84>)
 8009d38:	f001 f8c6 	bl	800aec8 <__assert_func>
 8009d3c:	0021      	movs	r1, r4
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	310c      	adds	r1, #12
 8009d42:	1c9a      	adds	r2, r3, #2
 8009d44:	0092      	lsls	r2, r2, #2
 8009d46:	300c      	adds	r0, #12
 8009d48:	f7fe f8ba 	bl	8007ec0 <memcpy>
 8009d4c:	0021      	movs	r1, r4
 8009d4e:	9801      	ldr	r0, [sp, #4]
 8009d50:	f7ff ffa6 	bl	8009ca0 <_Bfree>
 8009d54:	0034      	movs	r4, r6
 8009d56:	1d3b      	adds	r3, r7, #4
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	18e3      	adds	r3, r4, r3
 8009d5c:	605d      	str	r5, [r3, #4]
 8009d5e:	1c7b      	adds	r3, r7, #1
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	0020      	movs	r0, r4
 8009d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	0800bb04 	.word	0x0800bb04
 8009d6c:	0800bba7 	.word	0x0800bba7

08009d70 <__s2b>:
 8009d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d72:	0006      	movs	r6, r0
 8009d74:	0018      	movs	r0, r3
 8009d76:	000c      	movs	r4, r1
 8009d78:	3008      	adds	r0, #8
 8009d7a:	2109      	movs	r1, #9
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	0015      	movs	r5, r2
 8009d80:	f7f6 fa72 	bl	8000268 <__divsi3>
 8009d84:	2301      	movs	r3, #1
 8009d86:	2100      	movs	r1, #0
 8009d88:	4283      	cmp	r3, r0
 8009d8a:	db0a      	blt.n	8009da2 <__s2b+0x32>
 8009d8c:	0030      	movs	r0, r6
 8009d8e:	f7ff ff43 	bl	8009c18 <_Balloc>
 8009d92:	1e01      	subs	r1, r0, #0
 8009d94:	d108      	bne.n	8009da8 <__s2b+0x38>
 8009d96:	0002      	movs	r2, r0
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <__s2b+0x90>)
 8009d9a:	481a      	ldr	r0, [pc, #104]	; (8009e04 <__s2b+0x94>)
 8009d9c:	31ce      	adds	r1, #206	; 0xce
 8009d9e:	f001 f893 	bl	800aec8 <__assert_func>
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	3101      	adds	r1, #1
 8009da6:	e7ef      	b.n	8009d88 <__s2b+0x18>
 8009da8:	9b08      	ldr	r3, [sp, #32]
 8009daa:	6143      	str	r3, [r0, #20]
 8009dac:	2301      	movs	r3, #1
 8009dae:	6103      	str	r3, [r0, #16]
 8009db0:	2d09      	cmp	r5, #9
 8009db2:	dd18      	ble.n	8009de6 <__s2b+0x76>
 8009db4:	0023      	movs	r3, r4
 8009db6:	3309      	adds	r3, #9
 8009db8:	001f      	movs	r7, r3
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	1964      	adds	r4, r4, r5
 8009dbe:	783b      	ldrb	r3, [r7, #0]
 8009dc0:	220a      	movs	r2, #10
 8009dc2:	0030      	movs	r0, r6
 8009dc4:	3b30      	subs	r3, #48	; 0x30
 8009dc6:	f7ff ff8f 	bl	8009ce8 <__multadd>
 8009dca:	3701      	adds	r7, #1
 8009dcc:	0001      	movs	r1, r0
 8009dce:	42a7      	cmp	r7, r4
 8009dd0:	d1f5      	bne.n	8009dbe <__s2b+0x4e>
 8009dd2:	002c      	movs	r4, r5
 8009dd4:	9b00      	ldr	r3, [sp, #0]
 8009dd6:	3c08      	subs	r4, #8
 8009dd8:	191c      	adds	r4, r3, r4
 8009dda:	002f      	movs	r7, r5
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	429f      	cmp	r7, r3
 8009de0:	db04      	blt.n	8009dec <__s2b+0x7c>
 8009de2:	0008      	movs	r0, r1
 8009de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009de6:	2509      	movs	r5, #9
 8009de8:	340a      	adds	r4, #10
 8009dea:	e7f6      	b.n	8009dda <__s2b+0x6a>
 8009dec:	1b63      	subs	r3, r4, r5
 8009dee:	5ddb      	ldrb	r3, [r3, r7]
 8009df0:	220a      	movs	r2, #10
 8009df2:	0030      	movs	r0, r6
 8009df4:	3b30      	subs	r3, #48	; 0x30
 8009df6:	f7ff ff77 	bl	8009ce8 <__multadd>
 8009dfa:	3701      	adds	r7, #1
 8009dfc:	0001      	movs	r1, r0
 8009dfe:	e7ed      	b.n	8009ddc <__s2b+0x6c>
 8009e00:	0800bb04 	.word	0x0800bb04
 8009e04:	0800bba7 	.word	0x0800bba7

08009e08 <__hi0bits>:
 8009e08:	0003      	movs	r3, r0
 8009e0a:	0c02      	lsrs	r2, r0, #16
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4282      	cmp	r2, r0
 8009e10:	d101      	bne.n	8009e16 <__hi0bits+0xe>
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	3010      	adds	r0, #16
 8009e16:	0e1a      	lsrs	r2, r3, #24
 8009e18:	d101      	bne.n	8009e1e <__hi0bits+0x16>
 8009e1a:	3008      	adds	r0, #8
 8009e1c:	021b      	lsls	r3, r3, #8
 8009e1e:	0f1a      	lsrs	r2, r3, #28
 8009e20:	d101      	bne.n	8009e26 <__hi0bits+0x1e>
 8009e22:	3004      	adds	r0, #4
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	0f9a      	lsrs	r2, r3, #30
 8009e28:	d101      	bne.n	8009e2e <__hi0bits+0x26>
 8009e2a:	3002      	adds	r0, #2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	db03      	blt.n	8009e3a <__hi0bits+0x32>
 8009e32:	3001      	adds	r0, #1
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	d400      	bmi.n	8009e3a <__hi0bits+0x32>
 8009e38:	2020      	movs	r0, #32
 8009e3a:	4770      	bx	lr

08009e3c <__lo0bits>:
 8009e3c:	6803      	ldr	r3, [r0, #0]
 8009e3e:	0002      	movs	r2, r0
 8009e40:	2107      	movs	r1, #7
 8009e42:	0018      	movs	r0, r3
 8009e44:	4008      	ands	r0, r1
 8009e46:	420b      	tst	r3, r1
 8009e48:	d00d      	beq.n	8009e66 <__lo0bits+0x2a>
 8009e4a:	3906      	subs	r1, #6
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	420b      	tst	r3, r1
 8009e50:	d105      	bne.n	8009e5e <__lo0bits+0x22>
 8009e52:	3002      	adds	r0, #2
 8009e54:	4203      	tst	r3, r0
 8009e56:	d003      	beq.n	8009e60 <__lo0bits+0x24>
 8009e58:	40cb      	lsrs	r3, r1
 8009e5a:	0008      	movs	r0, r1
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	4770      	bx	lr
 8009e60:	089b      	lsrs	r3, r3, #2
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	e7fb      	b.n	8009e5e <__lo0bits+0x22>
 8009e66:	b299      	uxth	r1, r3
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d101      	bne.n	8009e70 <__lo0bits+0x34>
 8009e6c:	2010      	movs	r0, #16
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	b2d9      	uxtb	r1, r3
 8009e72:	2900      	cmp	r1, #0
 8009e74:	d101      	bne.n	8009e7a <__lo0bits+0x3e>
 8009e76:	3008      	adds	r0, #8
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	0719      	lsls	r1, r3, #28
 8009e7c:	d101      	bne.n	8009e82 <__lo0bits+0x46>
 8009e7e:	3004      	adds	r0, #4
 8009e80:	091b      	lsrs	r3, r3, #4
 8009e82:	0799      	lsls	r1, r3, #30
 8009e84:	d101      	bne.n	8009e8a <__lo0bits+0x4e>
 8009e86:	3002      	adds	r0, #2
 8009e88:	089b      	lsrs	r3, r3, #2
 8009e8a:	07d9      	lsls	r1, r3, #31
 8009e8c:	d4e9      	bmi.n	8009e62 <__lo0bits+0x26>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	085b      	lsrs	r3, r3, #1
 8009e92:	d1e6      	bne.n	8009e62 <__lo0bits+0x26>
 8009e94:	2020      	movs	r0, #32
 8009e96:	e7e2      	b.n	8009e5e <__lo0bits+0x22>

08009e98 <__i2b>:
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	000c      	movs	r4, r1
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	f7ff febb 	bl	8009c18 <_Balloc>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d106      	bne.n	8009eb4 <__i2b+0x1c>
 8009ea6:	21a0      	movs	r1, #160	; 0xa0
 8009ea8:	0002      	movs	r2, r0
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <__i2b+0x24>)
 8009eac:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <__i2b+0x28>)
 8009eae:	0049      	lsls	r1, r1, #1
 8009eb0:	f001 f80a 	bl	800aec8 <__assert_func>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	6144      	str	r4, [r0, #20]
 8009eb8:	6103      	str	r3, [r0, #16]
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	0800bb04 	.word	0x0800bb04
 8009ec0:	0800bba7 	.word	0x0800bba7

08009ec4 <__multiply>:
 8009ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	0014      	movs	r4, r2
 8009eca:	6912      	ldr	r2, [r2, #16]
 8009ecc:	000d      	movs	r5, r1
 8009ece:	b089      	sub	sp, #36	; 0x24
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	da01      	bge.n	8009ed8 <__multiply+0x14>
 8009ed4:	0025      	movs	r5, r4
 8009ed6:	000c      	movs	r4, r1
 8009ed8:	692f      	ldr	r7, [r5, #16]
 8009eda:	6926      	ldr	r6, [r4, #16]
 8009edc:	6869      	ldr	r1, [r5, #4]
 8009ede:	19bb      	adds	r3, r7, r6
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	68ab      	ldr	r3, [r5, #8]
 8009ee4:	19ba      	adds	r2, r7, r6
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	da00      	bge.n	8009eec <__multiply+0x28>
 8009eea:	3101      	adds	r1, #1
 8009eec:	f7ff fe94 	bl	8009c18 <_Balloc>
 8009ef0:	9001      	str	r0, [sp, #4]
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d106      	bne.n	8009f04 <__multiply+0x40>
 8009ef6:	215e      	movs	r1, #94	; 0x5e
 8009ef8:	0002      	movs	r2, r0
 8009efa:	4b48      	ldr	r3, [pc, #288]	; (800a01c <__multiply+0x158>)
 8009efc:	4848      	ldr	r0, [pc, #288]	; (800a020 <__multiply+0x15c>)
 8009efe:	31ff      	adds	r1, #255	; 0xff
 8009f00:	f000 ffe2 	bl	800aec8 <__assert_func>
 8009f04:	9b01      	ldr	r3, [sp, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	3314      	adds	r3, #20
 8009f0a:	469c      	mov	ip, r3
 8009f0c:	19bb      	adds	r3, r7, r6
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4463      	add	r3, ip
 8009f12:	9303      	str	r3, [sp, #12]
 8009f14:	4663      	mov	r3, ip
 8009f16:	9903      	ldr	r1, [sp, #12]
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	d32c      	bcc.n	8009f76 <__multiply+0xb2>
 8009f1c:	002b      	movs	r3, r5
 8009f1e:	0022      	movs	r2, r4
 8009f20:	3314      	adds	r3, #20
 8009f22:	00bf      	lsls	r7, r7, #2
 8009f24:	3214      	adds	r2, #20
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	00b6      	lsls	r6, r6, #2
 8009f2a:	19db      	adds	r3, r3, r7
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	1993      	adds	r3, r2, r6
 8009f30:	9307      	str	r3, [sp, #28]
 8009f32:	2304      	movs	r3, #4
 8009f34:	9305      	str	r3, [sp, #20]
 8009f36:	002b      	movs	r3, r5
 8009f38:	9904      	ldr	r1, [sp, #16]
 8009f3a:	3315      	adds	r3, #21
 8009f3c:	9200      	str	r2, [sp, #0]
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	d305      	bcc.n	8009f4e <__multiply+0x8a>
 8009f42:	1b4b      	subs	r3, r1, r5
 8009f44:	3b15      	subs	r3, #21
 8009f46:	089b      	lsrs	r3, r3, #2
 8009f48:	3301      	adds	r3, #1
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	9a00      	ldr	r2, [sp, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d311      	bcc.n	8009f7a <__multiply+0xb6>
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dd06      	ble.n	8009f6a <__multiply+0xa6>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	3b04      	subs	r3, #4
 8009f60:	9303      	str	r3, [sp, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d053      	beq.n	800a012 <__multiply+0x14e>
 8009f6a:	9b01      	ldr	r3, [sp, #4]
 8009f6c:	9a02      	ldr	r2, [sp, #8]
 8009f6e:	0018      	movs	r0, r3
 8009f70:	611a      	str	r2, [r3, #16]
 8009f72:	b009      	add	sp, #36	; 0x24
 8009f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f76:	c304      	stmia	r3!, {r2}
 8009f78:	e7cd      	b.n	8009f16 <__multiply+0x52>
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	b298      	uxth	r0, r3
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d01b      	beq.n	8009fbc <__multiply+0xf8>
 8009f84:	4667      	mov	r7, ip
 8009f86:	2400      	movs	r4, #0
 8009f88:	9e06      	ldr	r6, [sp, #24]
 8009f8a:	ce02      	ldmia	r6!, {r1}
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	b28b      	uxth	r3, r1
 8009f90:	4343      	muls	r3, r0
 8009f92:	b292      	uxth	r2, r2
 8009f94:	189b      	adds	r3, r3, r2
 8009f96:	191b      	adds	r3, r3, r4
 8009f98:	0c0c      	lsrs	r4, r1, #16
 8009f9a:	4344      	muls	r4, r0
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	0c11      	lsrs	r1, r2, #16
 8009fa0:	1861      	adds	r1, r4, r1
 8009fa2:	0c1c      	lsrs	r4, r3, #16
 8009fa4:	1909      	adds	r1, r1, r4
 8009fa6:	0c0c      	lsrs	r4, r1, #16
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	0409      	lsls	r1, r1, #16
 8009fac:	430b      	orrs	r3, r1
 8009fae:	c708      	stmia	r7!, {r3}
 8009fb0:	9b04      	ldr	r3, [sp, #16]
 8009fb2:	42b3      	cmp	r3, r6
 8009fb4:	d8e9      	bhi.n	8009f8a <__multiply+0xc6>
 8009fb6:	4663      	mov	r3, ip
 8009fb8:	9a05      	ldr	r2, [sp, #20]
 8009fba:	509c      	str	r4, [r3, r2]
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	0c1e      	lsrs	r6, r3, #16
 8009fc2:	d020      	beq.n	800a006 <__multiply+0x142>
 8009fc4:	4663      	mov	r3, ip
 8009fc6:	002c      	movs	r4, r5
 8009fc8:	4660      	mov	r0, ip
 8009fca:	2700      	movs	r7, #0
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3414      	adds	r4, #20
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	b291      	uxth	r1, r2
 8009fd6:	4371      	muls	r1, r6
 8009fd8:	6802      	ldr	r2, [r0, #0]
 8009fda:	0c12      	lsrs	r2, r2, #16
 8009fdc:	1889      	adds	r1, r1, r2
 8009fde:	19cf      	adds	r7, r1, r7
 8009fe0:	0439      	lsls	r1, r7, #16
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	cc02      	ldmia	r4!, {r1}
 8009fe8:	6843      	ldr	r3, [r0, #4]
 8009fea:	0c09      	lsrs	r1, r1, #16
 8009fec:	4371      	muls	r1, r6
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	0c3f      	lsrs	r7, r7, #16
 8009ff2:	18cb      	adds	r3, r1, r3
 8009ff4:	9a04      	ldr	r2, [sp, #16]
 8009ff6:	19db      	adds	r3, r3, r7
 8009ff8:	0c1f      	lsrs	r7, r3, #16
 8009ffa:	3004      	adds	r0, #4
 8009ffc:	42a2      	cmp	r2, r4
 8009ffe:	d8e7      	bhi.n	8009fd0 <__multiply+0x10c>
 800a000:	4662      	mov	r2, ip
 800a002:	9905      	ldr	r1, [sp, #20]
 800a004:	5053      	str	r3, [r2, r1]
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	3304      	adds	r3, #4
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2304      	movs	r3, #4
 800a00e:	449c      	add	ip, r3
 800a010:	e79d      	b.n	8009f4e <__multiply+0x8a>
 800a012:	9b02      	ldr	r3, [sp, #8]
 800a014:	3b01      	subs	r3, #1
 800a016:	9302      	str	r3, [sp, #8]
 800a018:	e79d      	b.n	8009f56 <__multiply+0x92>
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	0800bb04 	.word	0x0800bb04
 800a020:	0800bba7 	.word	0x0800bba7

0800a024 <__pow5mult>:
 800a024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a026:	2303      	movs	r3, #3
 800a028:	0015      	movs	r5, r2
 800a02a:	0007      	movs	r7, r0
 800a02c:	000e      	movs	r6, r1
 800a02e:	401a      	ands	r2, r3
 800a030:	421d      	tst	r5, r3
 800a032:	d008      	beq.n	800a046 <__pow5mult+0x22>
 800a034:	4925      	ldr	r1, [pc, #148]	; (800a0cc <__pow5mult+0xa8>)
 800a036:	3a01      	subs	r2, #1
 800a038:	0092      	lsls	r2, r2, #2
 800a03a:	5852      	ldr	r2, [r2, r1]
 800a03c:	2300      	movs	r3, #0
 800a03e:	0031      	movs	r1, r6
 800a040:	f7ff fe52 	bl	8009ce8 <__multadd>
 800a044:	0006      	movs	r6, r0
 800a046:	10ad      	asrs	r5, r5, #2
 800a048:	d03d      	beq.n	800a0c6 <__pow5mult+0xa2>
 800a04a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	d10f      	bne.n	800a070 <__pow5mult+0x4c>
 800a050:	2010      	movs	r0, #16
 800a052:	f000 ffb1 	bl	800afb8 <malloc>
 800a056:	1e02      	subs	r2, r0, #0
 800a058:	6278      	str	r0, [r7, #36]	; 0x24
 800a05a:	d105      	bne.n	800a068 <__pow5mult+0x44>
 800a05c:	21d7      	movs	r1, #215	; 0xd7
 800a05e:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <__pow5mult+0xac>)
 800a060:	481c      	ldr	r0, [pc, #112]	; (800a0d4 <__pow5mult+0xb0>)
 800a062:	0049      	lsls	r1, r1, #1
 800a064:	f000 ff30 	bl	800aec8 <__assert_func>
 800a068:	6044      	str	r4, [r0, #4]
 800a06a:	6084      	str	r4, [r0, #8]
 800a06c:	6004      	str	r4, [r0, #0]
 800a06e:	60c4      	str	r4, [r0, #12]
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	689c      	ldr	r4, [r3, #8]
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	2c00      	cmp	r4, #0
 800a078:	d108      	bne.n	800a08c <__pow5mult+0x68>
 800a07a:	0038      	movs	r0, r7
 800a07c:	4916      	ldr	r1, [pc, #88]	; (800a0d8 <__pow5mult+0xb4>)
 800a07e:	f7ff ff0b 	bl	8009e98 <__i2b>
 800a082:	9b01      	ldr	r3, [sp, #4]
 800a084:	0004      	movs	r4, r0
 800a086:	6098      	str	r0, [r3, #8]
 800a088:	2300      	movs	r3, #0
 800a08a:	6003      	str	r3, [r0, #0]
 800a08c:	2301      	movs	r3, #1
 800a08e:	421d      	tst	r5, r3
 800a090:	d00a      	beq.n	800a0a8 <__pow5mult+0x84>
 800a092:	0031      	movs	r1, r6
 800a094:	0022      	movs	r2, r4
 800a096:	0038      	movs	r0, r7
 800a098:	f7ff ff14 	bl	8009ec4 <__multiply>
 800a09c:	0031      	movs	r1, r6
 800a09e:	9001      	str	r0, [sp, #4]
 800a0a0:	0038      	movs	r0, r7
 800a0a2:	f7ff fdfd 	bl	8009ca0 <_Bfree>
 800a0a6:	9e01      	ldr	r6, [sp, #4]
 800a0a8:	106d      	asrs	r5, r5, #1
 800a0aa:	d00c      	beq.n	800a0c6 <__pow5mult+0xa2>
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d107      	bne.n	800a0c2 <__pow5mult+0x9e>
 800a0b2:	0022      	movs	r2, r4
 800a0b4:	0021      	movs	r1, r4
 800a0b6:	0038      	movs	r0, r7
 800a0b8:	f7ff ff04 	bl	8009ec4 <__multiply>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6020      	str	r0, [r4, #0]
 800a0c0:	6003      	str	r3, [r0, #0]
 800a0c2:	0004      	movs	r4, r0
 800a0c4:	e7e2      	b.n	800a08c <__pow5mult+0x68>
 800a0c6:	0030      	movs	r0, r6
 800a0c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	0800bcf8 	.word	0x0800bcf8
 800a0d0:	0800bb90 	.word	0x0800bb90
 800a0d4:	0800bba7 	.word	0x0800bba7
 800a0d8:	00000271 	.word	0x00000271

0800a0dc <__lshift>:
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	000c      	movs	r4, r1
 800a0e0:	0017      	movs	r7, r2
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	1155      	asrs	r5, r2, #5
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	18eb      	adds	r3, r5, r3
 800a0ea:	9302      	str	r3, [sp, #8]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	6849      	ldr	r1, [r1, #4]
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	9004      	str	r0, [sp, #16]
 800a0f6:	9a01      	ldr	r2, [sp, #4]
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	db10      	blt.n	800a11e <__lshift+0x42>
 800a0fc:	9804      	ldr	r0, [sp, #16]
 800a0fe:	f7ff fd8b 	bl	8009c18 <_Balloc>
 800a102:	2300      	movs	r3, #0
 800a104:	0002      	movs	r2, r0
 800a106:	0006      	movs	r6, r0
 800a108:	0019      	movs	r1, r3
 800a10a:	3214      	adds	r2, #20
 800a10c:	4298      	cmp	r0, r3
 800a10e:	d10c      	bne.n	800a12a <__lshift+0x4e>
 800a110:	21da      	movs	r1, #218	; 0xda
 800a112:	0002      	movs	r2, r0
 800a114:	4b26      	ldr	r3, [pc, #152]	; (800a1b0 <__lshift+0xd4>)
 800a116:	4827      	ldr	r0, [pc, #156]	; (800a1b4 <__lshift+0xd8>)
 800a118:	31ff      	adds	r1, #255	; 0xff
 800a11a:	f000 fed5 	bl	800aec8 <__assert_func>
 800a11e:	3101      	adds	r1, #1
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	e7e8      	b.n	800a0f6 <__lshift+0x1a>
 800a124:	0098      	lsls	r0, r3, #2
 800a126:	5011      	str	r1, [r2, r0]
 800a128:	3301      	adds	r3, #1
 800a12a:	42ab      	cmp	r3, r5
 800a12c:	dbfa      	blt.n	800a124 <__lshift+0x48>
 800a12e:	43eb      	mvns	r3, r5
 800a130:	17db      	asrs	r3, r3, #31
 800a132:	401d      	ands	r5, r3
 800a134:	211f      	movs	r1, #31
 800a136:	0023      	movs	r3, r4
 800a138:	0038      	movs	r0, r7
 800a13a:	00ad      	lsls	r5, r5, #2
 800a13c:	1955      	adds	r5, r2, r5
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	3314      	adds	r3, #20
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	4008      	ands	r0, r1
 800a146:	4684      	mov	ip, r0
 800a148:	189a      	adds	r2, r3, r2
 800a14a:	420f      	tst	r7, r1
 800a14c:	d02a      	beq.n	800a1a4 <__lshift+0xc8>
 800a14e:	3101      	adds	r1, #1
 800a150:	1a09      	subs	r1, r1, r0
 800a152:	9105      	str	r1, [sp, #20]
 800a154:	2100      	movs	r1, #0
 800a156:	9503      	str	r5, [sp, #12]
 800a158:	4667      	mov	r7, ip
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	40b8      	lsls	r0, r7
 800a15e:	4301      	orrs	r1, r0
 800a160:	9803      	ldr	r0, [sp, #12]
 800a162:	c002      	stmia	r0!, {r1}
 800a164:	cb02      	ldmia	r3!, {r1}
 800a166:	9003      	str	r0, [sp, #12]
 800a168:	9805      	ldr	r0, [sp, #20]
 800a16a:	40c1      	lsrs	r1, r0
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d8f3      	bhi.n	800a158 <__lshift+0x7c>
 800a170:	0020      	movs	r0, r4
 800a172:	3015      	adds	r0, #21
 800a174:	2304      	movs	r3, #4
 800a176:	4282      	cmp	r2, r0
 800a178:	d304      	bcc.n	800a184 <__lshift+0xa8>
 800a17a:	1b13      	subs	r3, r2, r4
 800a17c:	3b15      	subs	r3, #21
 800a17e:	089b      	lsrs	r3, r3, #2
 800a180:	3301      	adds	r3, #1
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	50e9      	str	r1, [r5, r3]
 800a186:	2900      	cmp	r1, #0
 800a188:	d002      	beq.n	800a190 <__lshift+0xb4>
 800a18a:	9b02      	ldr	r3, [sp, #8]
 800a18c:	3302      	adds	r3, #2
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	9b01      	ldr	r3, [sp, #4]
 800a192:	9804      	ldr	r0, [sp, #16]
 800a194:	3b01      	subs	r3, #1
 800a196:	0021      	movs	r1, r4
 800a198:	6133      	str	r3, [r6, #16]
 800a19a:	f7ff fd81 	bl	8009ca0 <_Bfree>
 800a19e:	0030      	movs	r0, r6
 800a1a0:	b007      	add	sp, #28
 800a1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a4:	cb02      	ldmia	r3!, {r1}
 800a1a6:	c502      	stmia	r5!, {r1}
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d8fb      	bhi.n	800a1a4 <__lshift+0xc8>
 800a1ac:	e7f0      	b.n	800a190 <__lshift+0xb4>
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	0800bb04 	.word	0x0800bb04
 800a1b4:	0800bba7 	.word	0x0800bba7

0800a1b8 <__mcmp>:
 800a1b8:	6902      	ldr	r2, [r0, #16]
 800a1ba:	690b      	ldr	r3, [r1, #16]
 800a1bc:	b530      	push	{r4, r5, lr}
 800a1be:	0004      	movs	r4, r0
 800a1c0:	1ad0      	subs	r0, r2, r3
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d10d      	bne.n	800a1e2 <__mcmp+0x2a>
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	3414      	adds	r4, #20
 800a1ca:	3114      	adds	r1, #20
 800a1cc:	18e2      	adds	r2, r4, r3
 800a1ce:	18c9      	adds	r1, r1, r3
 800a1d0:	3a04      	subs	r2, #4
 800a1d2:	3904      	subs	r1, #4
 800a1d4:	6815      	ldr	r5, [r2, #0]
 800a1d6:	680b      	ldr	r3, [r1, #0]
 800a1d8:	429d      	cmp	r5, r3
 800a1da:	d003      	beq.n	800a1e4 <__mcmp+0x2c>
 800a1dc:	2001      	movs	r0, #1
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	d303      	bcc.n	800a1ea <__mcmp+0x32>
 800a1e2:	bd30      	pop	{r4, r5, pc}
 800a1e4:	4294      	cmp	r4, r2
 800a1e6:	d3f3      	bcc.n	800a1d0 <__mcmp+0x18>
 800a1e8:	e7fb      	b.n	800a1e2 <__mcmp+0x2a>
 800a1ea:	4240      	negs	r0, r0
 800a1ec:	e7f9      	b.n	800a1e2 <__mcmp+0x2a>
	...

0800a1f0 <__mdiff>:
 800a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f2:	000e      	movs	r6, r1
 800a1f4:	0007      	movs	r7, r0
 800a1f6:	0011      	movs	r1, r2
 800a1f8:	0030      	movs	r0, r6
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	0014      	movs	r4, r2
 800a1fe:	f7ff ffdb 	bl	800a1b8 <__mcmp>
 800a202:	1e05      	subs	r5, r0, #0
 800a204:	d110      	bne.n	800a228 <__mdiff+0x38>
 800a206:	0001      	movs	r1, r0
 800a208:	0038      	movs	r0, r7
 800a20a:	f7ff fd05 	bl	8009c18 <_Balloc>
 800a20e:	1e02      	subs	r2, r0, #0
 800a210:	d104      	bne.n	800a21c <__mdiff+0x2c>
 800a212:	4b40      	ldr	r3, [pc, #256]	; (800a314 <__mdiff+0x124>)
 800a214:	4940      	ldr	r1, [pc, #256]	; (800a318 <__mdiff+0x128>)
 800a216:	4841      	ldr	r0, [pc, #260]	; (800a31c <__mdiff+0x12c>)
 800a218:	f000 fe56 	bl	800aec8 <__assert_func>
 800a21c:	2301      	movs	r3, #1
 800a21e:	6145      	str	r5, [r0, #20]
 800a220:	6103      	str	r3, [r0, #16]
 800a222:	0010      	movs	r0, r2
 800a224:	b007      	add	sp, #28
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	2301      	movs	r3, #1
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	2800      	cmp	r0, #0
 800a22e:	db04      	blt.n	800a23a <__mdiff+0x4a>
 800a230:	0023      	movs	r3, r4
 800a232:	0034      	movs	r4, r6
 800a234:	001e      	movs	r6, r3
 800a236:	2300      	movs	r3, #0
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	0038      	movs	r0, r7
 800a23c:	6861      	ldr	r1, [r4, #4]
 800a23e:	f7ff fceb 	bl	8009c18 <_Balloc>
 800a242:	1e02      	subs	r2, r0, #0
 800a244:	d103      	bne.n	800a24e <__mdiff+0x5e>
 800a246:	2190      	movs	r1, #144	; 0x90
 800a248:	4b32      	ldr	r3, [pc, #200]	; (800a314 <__mdiff+0x124>)
 800a24a:	0089      	lsls	r1, r1, #2
 800a24c:	e7e3      	b.n	800a216 <__mdiff+0x26>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	2700      	movs	r7, #0
 800a252:	60c3      	str	r3, [r0, #12]
 800a254:	6920      	ldr	r0, [r4, #16]
 800a256:	3414      	adds	r4, #20
 800a258:	9401      	str	r4, [sp, #4]
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	0084      	lsls	r4, r0, #2
 800a25e:	191b      	adds	r3, r3, r4
 800a260:	0034      	movs	r4, r6
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	6933      	ldr	r3, [r6, #16]
 800a266:	3414      	adds	r4, #20
 800a268:	0099      	lsls	r1, r3, #2
 800a26a:	1863      	adds	r3, r4, r1
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	0013      	movs	r3, r2
 800a270:	3314      	adds	r3, #20
 800a272:	469c      	mov	ip, r3
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	cc02      	ldmia	r4!, {r1}
 800a27e:	cb20      	ldmia	r3!, {r5}
 800a280:	9304      	str	r3, [sp, #16]
 800a282:	b2ab      	uxth	r3, r5
 800a284:	19df      	adds	r7, r3, r7
 800a286:	b28b      	uxth	r3, r1
 800a288:	1afb      	subs	r3, r7, r3
 800a28a:	0c09      	lsrs	r1, r1, #16
 800a28c:	0c2d      	lsrs	r5, r5, #16
 800a28e:	1a6d      	subs	r5, r5, r1
 800a290:	1419      	asrs	r1, r3, #16
 800a292:	186d      	adds	r5, r5, r1
 800a294:	4661      	mov	r1, ip
 800a296:	142f      	asrs	r7, r5, #16
 800a298:	b29b      	uxth	r3, r3
 800a29a:	042d      	lsls	r5, r5, #16
 800a29c:	432b      	orrs	r3, r5
 800a29e:	c108      	stmia	r1!, {r3}
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	468c      	mov	ip, r1
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d8e8      	bhi.n	800a27a <__mdiff+0x8a>
 800a2a8:	0031      	movs	r1, r6
 800a2aa:	9c03      	ldr	r4, [sp, #12]
 800a2ac:	3115      	adds	r1, #21
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	428c      	cmp	r4, r1
 800a2b2:	d304      	bcc.n	800a2be <__mdiff+0xce>
 800a2b4:	1ba3      	subs	r3, r4, r6
 800a2b6:	3b15      	subs	r3, #21
 800a2b8:	089b      	lsrs	r3, r3, #2
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	9901      	ldr	r1, [sp, #4]
 800a2c0:	18cc      	adds	r4, r1, r3
 800a2c2:	9905      	ldr	r1, [sp, #20]
 800a2c4:	0026      	movs	r6, r4
 800a2c6:	18cb      	adds	r3, r1, r3
 800a2c8:	469c      	mov	ip, r3
 800a2ca:	9902      	ldr	r1, [sp, #8]
 800a2cc:	428e      	cmp	r6, r1
 800a2ce:	d310      	bcc.n	800a2f2 <__mdiff+0x102>
 800a2d0:	9e02      	ldr	r6, [sp, #8]
 800a2d2:	1ee1      	subs	r1, r4, #3
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	428e      	cmp	r6, r1
 800a2d8:	d304      	bcc.n	800a2e4 <__mdiff+0xf4>
 800a2da:	0031      	movs	r1, r6
 800a2dc:	3103      	adds	r1, #3
 800a2de:	1b0c      	subs	r4, r1, r4
 800a2e0:	08a4      	lsrs	r4, r4, #2
 800a2e2:	00a5      	lsls	r5, r4, #2
 800a2e4:	195b      	adds	r3, r3, r5
 800a2e6:	3b04      	subs	r3, #4
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	2900      	cmp	r1, #0
 800a2ec:	d00f      	beq.n	800a30e <__mdiff+0x11e>
 800a2ee:	6110      	str	r0, [r2, #16]
 800a2f0:	e797      	b.n	800a222 <__mdiff+0x32>
 800a2f2:	ce02      	ldmia	r6!, {r1}
 800a2f4:	b28d      	uxth	r5, r1
 800a2f6:	19ed      	adds	r5, r5, r7
 800a2f8:	0c0f      	lsrs	r7, r1, #16
 800a2fa:	1429      	asrs	r1, r5, #16
 800a2fc:	1879      	adds	r1, r7, r1
 800a2fe:	140f      	asrs	r7, r1, #16
 800a300:	b2ad      	uxth	r5, r5
 800a302:	0409      	lsls	r1, r1, #16
 800a304:	430d      	orrs	r5, r1
 800a306:	4661      	mov	r1, ip
 800a308:	c120      	stmia	r1!, {r5}
 800a30a:	468c      	mov	ip, r1
 800a30c:	e7dd      	b.n	800a2ca <__mdiff+0xda>
 800a30e:	3801      	subs	r0, #1
 800a310:	e7e9      	b.n	800a2e6 <__mdiff+0xf6>
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	0800bb04 	.word	0x0800bb04
 800a318:	00000232 	.word	0x00000232
 800a31c:	0800bba7 	.word	0x0800bba7

0800a320 <__ulp>:
 800a320:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <__ulp+0x40>)
 800a322:	4019      	ands	r1, r3
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <__ulp+0x44>)
 800a326:	18c9      	adds	r1, r1, r3
 800a328:	2900      	cmp	r1, #0
 800a32a:	dd04      	ble.n	800a336 <__ulp+0x16>
 800a32c:	2200      	movs	r2, #0
 800a32e:	000b      	movs	r3, r1
 800a330:	0010      	movs	r0, r2
 800a332:	0019      	movs	r1, r3
 800a334:	4770      	bx	lr
 800a336:	4249      	negs	r1, r1
 800a338:	2200      	movs	r2, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	1509      	asrs	r1, r1, #20
 800a33e:	2913      	cmp	r1, #19
 800a340:	dc04      	bgt.n	800a34c <__ulp+0x2c>
 800a342:	2080      	movs	r0, #128	; 0x80
 800a344:	0300      	lsls	r0, r0, #12
 800a346:	4108      	asrs	r0, r1
 800a348:	0003      	movs	r3, r0
 800a34a:	e7f1      	b.n	800a330 <__ulp+0x10>
 800a34c:	3914      	subs	r1, #20
 800a34e:	2001      	movs	r0, #1
 800a350:	291e      	cmp	r1, #30
 800a352:	dc02      	bgt.n	800a35a <__ulp+0x3a>
 800a354:	2080      	movs	r0, #128	; 0x80
 800a356:	0600      	lsls	r0, r0, #24
 800a358:	40c8      	lsrs	r0, r1
 800a35a:	0002      	movs	r2, r0
 800a35c:	e7e8      	b.n	800a330 <__ulp+0x10>
 800a35e:	46c0      	nop			; (mov r8, r8)
 800a360:	7ff00000 	.word	0x7ff00000
 800a364:	fcc00000 	.word	0xfcc00000

0800a368 <__b2d>:
 800a368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36a:	0006      	movs	r6, r0
 800a36c:	6903      	ldr	r3, [r0, #16]
 800a36e:	3614      	adds	r6, #20
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	18f3      	adds	r3, r6, r3
 800a374:	1f1d      	subs	r5, r3, #4
 800a376:	682c      	ldr	r4, [r5, #0]
 800a378:	000f      	movs	r7, r1
 800a37a:	0020      	movs	r0, r4
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	f7ff fd43 	bl	8009e08 <__hi0bits>
 800a382:	2320      	movs	r3, #32
 800a384:	1a1b      	subs	r3, r3, r0
 800a386:	491f      	ldr	r1, [pc, #124]	; (800a404 <__b2d+0x9c>)
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	280a      	cmp	r0, #10
 800a38c:	dc16      	bgt.n	800a3bc <__b2d+0x54>
 800a38e:	230b      	movs	r3, #11
 800a390:	0027      	movs	r7, r4
 800a392:	1a1b      	subs	r3, r3, r0
 800a394:	40df      	lsrs	r7, r3
 800a396:	4339      	orrs	r1, r7
 800a398:	469c      	mov	ip, r3
 800a39a:	000b      	movs	r3, r1
 800a39c:	2100      	movs	r1, #0
 800a39e:	42ae      	cmp	r6, r5
 800a3a0:	d202      	bcs.n	800a3a8 <__b2d+0x40>
 800a3a2:	9901      	ldr	r1, [sp, #4]
 800a3a4:	3908      	subs	r1, #8
 800a3a6:	6809      	ldr	r1, [r1, #0]
 800a3a8:	3015      	adds	r0, #21
 800a3aa:	4084      	lsls	r4, r0
 800a3ac:	4660      	mov	r0, ip
 800a3ae:	40c1      	lsrs	r1, r0
 800a3b0:	430c      	orrs	r4, r1
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	0010      	movs	r0, r2
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	b003      	add	sp, #12
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3bc:	2700      	movs	r7, #0
 800a3be:	42ae      	cmp	r6, r5
 800a3c0:	d202      	bcs.n	800a3c8 <__b2d+0x60>
 800a3c2:	9d01      	ldr	r5, [sp, #4]
 800a3c4:	3d08      	subs	r5, #8
 800a3c6:	682f      	ldr	r7, [r5, #0]
 800a3c8:	230b      	movs	r3, #11
 800a3ca:	425b      	negs	r3, r3
 800a3cc:	469c      	mov	ip, r3
 800a3ce:	4484      	add	ip, r0
 800a3d0:	280b      	cmp	r0, #11
 800a3d2:	d013      	beq.n	800a3fc <__b2d+0x94>
 800a3d4:	4663      	mov	r3, ip
 800a3d6:	2020      	movs	r0, #32
 800a3d8:	409c      	lsls	r4, r3
 800a3da:	1ac0      	subs	r0, r0, r3
 800a3dc:	003b      	movs	r3, r7
 800a3de:	40c3      	lsrs	r3, r0
 800a3e0:	431c      	orrs	r4, r3
 800a3e2:	4321      	orrs	r1, r4
 800a3e4:	000b      	movs	r3, r1
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	42b5      	cmp	r5, r6
 800a3ea:	d901      	bls.n	800a3f0 <__b2d+0x88>
 800a3ec:	3d04      	subs	r5, #4
 800a3ee:	6829      	ldr	r1, [r5, #0]
 800a3f0:	4664      	mov	r4, ip
 800a3f2:	40c1      	lsrs	r1, r0
 800a3f4:	40a7      	lsls	r7, r4
 800a3f6:	430f      	orrs	r7, r1
 800a3f8:	003a      	movs	r2, r7
 800a3fa:	e7db      	b.n	800a3b4 <__b2d+0x4c>
 800a3fc:	4321      	orrs	r1, r4
 800a3fe:	000b      	movs	r3, r1
 800a400:	e7fa      	b.n	800a3f8 <__b2d+0x90>
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	3ff00000 	.word	0x3ff00000

0800a408 <__d2b>:
 800a408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a40a:	2101      	movs	r1, #1
 800a40c:	0014      	movs	r4, r2
 800a40e:	001e      	movs	r6, r3
 800a410:	9f08      	ldr	r7, [sp, #32]
 800a412:	f7ff fc01 	bl	8009c18 <_Balloc>
 800a416:	1e05      	subs	r5, r0, #0
 800a418:	d105      	bne.n	800a426 <__d2b+0x1e>
 800a41a:	0002      	movs	r2, r0
 800a41c:	4b26      	ldr	r3, [pc, #152]	; (800a4b8 <__d2b+0xb0>)
 800a41e:	4927      	ldr	r1, [pc, #156]	; (800a4bc <__d2b+0xb4>)
 800a420:	4827      	ldr	r0, [pc, #156]	; (800a4c0 <__d2b+0xb8>)
 800a422:	f000 fd51 	bl	800aec8 <__assert_func>
 800a426:	0333      	lsls	r3, r6, #12
 800a428:	0076      	lsls	r6, r6, #1
 800a42a:	0b1b      	lsrs	r3, r3, #12
 800a42c:	0d76      	lsrs	r6, r6, #21
 800a42e:	d124      	bne.n	800a47a <__d2b+0x72>
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	2c00      	cmp	r4, #0
 800a434:	d027      	beq.n	800a486 <__d2b+0x7e>
 800a436:	4668      	mov	r0, sp
 800a438:	9400      	str	r4, [sp, #0]
 800a43a:	f7ff fcff 	bl	8009e3c <__lo0bits>
 800a43e:	9c00      	ldr	r4, [sp, #0]
 800a440:	2800      	cmp	r0, #0
 800a442:	d01e      	beq.n	800a482 <__d2b+0x7a>
 800a444:	9b01      	ldr	r3, [sp, #4]
 800a446:	2120      	movs	r1, #32
 800a448:	001a      	movs	r2, r3
 800a44a:	1a09      	subs	r1, r1, r0
 800a44c:	408a      	lsls	r2, r1
 800a44e:	40c3      	lsrs	r3, r0
 800a450:	4322      	orrs	r2, r4
 800a452:	616a      	str	r2, [r5, #20]
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	9c01      	ldr	r4, [sp, #4]
 800a458:	61ac      	str	r4, [r5, #24]
 800a45a:	1e63      	subs	r3, r4, #1
 800a45c:	419c      	sbcs	r4, r3
 800a45e:	3401      	adds	r4, #1
 800a460:	612c      	str	r4, [r5, #16]
 800a462:	2e00      	cmp	r6, #0
 800a464:	d018      	beq.n	800a498 <__d2b+0x90>
 800a466:	4b17      	ldr	r3, [pc, #92]	; (800a4c4 <__d2b+0xbc>)
 800a468:	18f6      	adds	r6, r6, r3
 800a46a:	2335      	movs	r3, #53	; 0x35
 800a46c:	1836      	adds	r6, r6, r0
 800a46e:	1a18      	subs	r0, r3, r0
 800a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a472:	603e      	str	r6, [r7, #0]
 800a474:	6018      	str	r0, [r3, #0]
 800a476:	0028      	movs	r0, r5
 800a478:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a47a:	2280      	movs	r2, #128	; 0x80
 800a47c:	0352      	lsls	r2, r2, #13
 800a47e:	4313      	orrs	r3, r2
 800a480:	e7d6      	b.n	800a430 <__d2b+0x28>
 800a482:	616c      	str	r4, [r5, #20]
 800a484:	e7e7      	b.n	800a456 <__d2b+0x4e>
 800a486:	a801      	add	r0, sp, #4
 800a488:	f7ff fcd8 	bl	8009e3c <__lo0bits>
 800a48c:	2401      	movs	r4, #1
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	612c      	str	r4, [r5, #16]
 800a492:	616b      	str	r3, [r5, #20]
 800a494:	3020      	adds	r0, #32
 800a496:	e7e4      	b.n	800a462 <__d2b+0x5a>
 800a498:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <__d2b+0xc0>)
 800a49a:	18c0      	adds	r0, r0, r3
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <__d2b+0xc4>)
 800a49e:	6038      	str	r0, [r7, #0]
 800a4a0:	18e3      	adds	r3, r4, r3
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	18eb      	adds	r3, r5, r3
 800a4a6:	6958      	ldr	r0, [r3, #20]
 800a4a8:	f7ff fcae 	bl	8009e08 <__hi0bits>
 800a4ac:	0164      	lsls	r4, r4, #5
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	1a24      	subs	r4, r4, r0
 800a4b2:	601c      	str	r4, [r3, #0]
 800a4b4:	e7df      	b.n	800a476 <__d2b+0x6e>
 800a4b6:	46c0      	nop			; (mov r8, r8)
 800a4b8:	0800bb04 	.word	0x0800bb04
 800a4bc:	0000030a 	.word	0x0000030a
 800a4c0:	0800bba7 	.word	0x0800bba7
 800a4c4:	fffffbcd 	.word	0xfffffbcd
 800a4c8:	fffffbce 	.word	0xfffffbce
 800a4cc:	3fffffff 	.word	0x3fffffff

0800a4d0 <__ratio>:
 800a4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	000f      	movs	r7, r1
 800a4d6:	a904      	add	r1, sp, #16
 800a4d8:	0006      	movs	r6, r0
 800a4da:	f7ff ff45 	bl	800a368 <__b2d>
 800a4de:	9000      	str	r0, [sp, #0]
 800a4e0:	9101      	str	r1, [sp, #4]
 800a4e2:	9c00      	ldr	r4, [sp, #0]
 800a4e4:	9d01      	ldr	r5, [sp, #4]
 800a4e6:	0038      	movs	r0, r7
 800a4e8:	a905      	add	r1, sp, #20
 800a4ea:	f7ff ff3d 	bl	800a368 <__b2d>
 800a4ee:	9002      	str	r0, [sp, #8]
 800a4f0:	9103      	str	r1, [sp, #12]
 800a4f2:	9a02      	ldr	r2, [sp, #8]
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	6931      	ldr	r1, [r6, #16]
 800a4f8:	6938      	ldr	r0, [r7, #16]
 800a4fa:	9e05      	ldr	r6, [sp, #20]
 800a4fc:	1a08      	subs	r0, r1, r0
 800a4fe:	9904      	ldr	r1, [sp, #16]
 800a500:	0140      	lsls	r0, r0, #5
 800a502:	1b89      	subs	r1, r1, r6
 800a504:	1841      	adds	r1, r0, r1
 800a506:	0508      	lsls	r0, r1, #20
 800a508:	2900      	cmp	r1, #0
 800a50a:	dd07      	ble.n	800a51c <__ratio+0x4c>
 800a50c:	9901      	ldr	r1, [sp, #4]
 800a50e:	1845      	adds	r5, r0, r1
 800a510:	0020      	movs	r0, r4
 800a512:	0029      	movs	r1, r5
 800a514:	f7f6 fc7e 	bl	8000e14 <__aeabi_ddiv>
 800a518:	b007      	add	sp, #28
 800a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a51c:	9903      	ldr	r1, [sp, #12]
 800a51e:	1a0b      	subs	r3, r1, r0
 800a520:	e7f6      	b.n	800a510 <__ratio+0x40>

0800a522 <__copybits>:
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	0014      	movs	r4, r2
 800a526:	0005      	movs	r5, r0
 800a528:	3901      	subs	r1, #1
 800a52a:	6913      	ldr	r3, [r2, #16]
 800a52c:	1149      	asrs	r1, r1, #5
 800a52e:	3101      	adds	r1, #1
 800a530:	0089      	lsls	r1, r1, #2
 800a532:	3414      	adds	r4, #20
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	1841      	adds	r1, r0, r1
 800a538:	18e3      	adds	r3, r4, r3
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	d80d      	bhi.n	800a55a <__copybits+0x38>
 800a53e:	0014      	movs	r4, r2
 800a540:	3411      	adds	r4, #17
 800a542:	2500      	movs	r5, #0
 800a544:	429c      	cmp	r4, r3
 800a546:	d803      	bhi.n	800a550 <__copybits+0x2e>
 800a548:	1a9b      	subs	r3, r3, r2
 800a54a:	3b11      	subs	r3, #17
 800a54c:	089b      	lsrs	r3, r3, #2
 800a54e:	009d      	lsls	r5, r3, #2
 800a550:	2300      	movs	r3, #0
 800a552:	1940      	adds	r0, r0, r5
 800a554:	4281      	cmp	r1, r0
 800a556:	d803      	bhi.n	800a560 <__copybits+0x3e>
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	cc40      	ldmia	r4!, {r6}
 800a55c:	c540      	stmia	r5!, {r6}
 800a55e:	e7ec      	b.n	800a53a <__copybits+0x18>
 800a560:	c008      	stmia	r0!, {r3}
 800a562:	e7f7      	b.n	800a554 <__copybits+0x32>

0800a564 <__any_on>:
 800a564:	0002      	movs	r2, r0
 800a566:	6900      	ldr	r0, [r0, #16]
 800a568:	b510      	push	{r4, lr}
 800a56a:	3214      	adds	r2, #20
 800a56c:	114b      	asrs	r3, r1, #5
 800a56e:	4298      	cmp	r0, r3
 800a570:	db13      	blt.n	800a59a <__any_on+0x36>
 800a572:	dd0c      	ble.n	800a58e <__any_on+0x2a>
 800a574:	241f      	movs	r4, #31
 800a576:	0008      	movs	r0, r1
 800a578:	4020      	ands	r0, r4
 800a57a:	4221      	tst	r1, r4
 800a57c:	d007      	beq.n	800a58e <__any_on+0x2a>
 800a57e:	0099      	lsls	r1, r3, #2
 800a580:	588c      	ldr	r4, [r1, r2]
 800a582:	0021      	movs	r1, r4
 800a584:	40c1      	lsrs	r1, r0
 800a586:	4081      	lsls	r1, r0
 800a588:	2001      	movs	r0, #1
 800a58a:	428c      	cmp	r4, r1
 800a58c:	d104      	bne.n	800a598 <__any_on+0x34>
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	18d3      	adds	r3, r2, r3
 800a592:	4293      	cmp	r3, r2
 800a594:	d803      	bhi.n	800a59e <__any_on+0x3a>
 800a596:	2000      	movs	r0, #0
 800a598:	bd10      	pop	{r4, pc}
 800a59a:	0003      	movs	r3, r0
 800a59c:	e7f7      	b.n	800a58e <__any_on+0x2a>
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	d0f5      	beq.n	800a592 <__any_on+0x2e>
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7f6      	b.n	800a598 <__any_on+0x34>

0800a5aa <_calloc_r>:
 800a5aa:	b570      	push	{r4, r5, r6, lr}
 800a5ac:	0c13      	lsrs	r3, r2, #16
 800a5ae:	0c0d      	lsrs	r5, r1, #16
 800a5b0:	d11e      	bne.n	800a5f0 <_calloc_r+0x46>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10c      	bne.n	800a5d0 <_calloc_r+0x26>
 800a5b6:	b289      	uxth	r1, r1
 800a5b8:	b294      	uxth	r4, r2
 800a5ba:	434c      	muls	r4, r1
 800a5bc:	0021      	movs	r1, r4
 800a5be:	f000 f88d 	bl	800a6dc <_malloc_r>
 800a5c2:	1e05      	subs	r5, r0, #0
 800a5c4:	d01b      	beq.n	800a5fe <_calloc_r+0x54>
 800a5c6:	0022      	movs	r2, r4
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	f7fd fc82 	bl	8007ed2 <memset>
 800a5ce:	e016      	b.n	800a5fe <_calloc_r+0x54>
 800a5d0:	1c1d      	adds	r5, r3, #0
 800a5d2:	1c0b      	adds	r3, r1, #0
 800a5d4:	b292      	uxth	r2, r2
 800a5d6:	b289      	uxth	r1, r1
 800a5d8:	b29c      	uxth	r4, r3
 800a5da:	4351      	muls	r1, r2
 800a5dc:	b2ab      	uxth	r3, r5
 800a5de:	4363      	muls	r3, r4
 800a5e0:	0c0c      	lsrs	r4, r1, #16
 800a5e2:	191c      	adds	r4, r3, r4
 800a5e4:	0c22      	lsrs	r2, r4, #16
 800a5e6:	d107      	bne.n	800a5f8 <_calloc_r+0x4e>
 800a5e8:	0424      	lsls	r4, r4, #16
 800a5ea:	b289      	uxth	r1, r1
 800a5ec:	430c      	orrs	r4, r1
 800a5ee:	e7e5      	b.n	800a5bc <_calloc_r+0x12>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <_calloc_r+0x4e>
 800a5f4:	1c13      	adds	r3, r2, #0
 800a5f6:	e7ed      	b.n	800a5d4 <_calloc_r+0x2a>
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	6003      	str	r3, [r0, #0]
 800a5fe:	0028      	movs	r0, r5
 800a600:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a604 <_free_r>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	0005      	movs	r5, r0
 800a608:	2900      	cmp	r1, #0
 800a60a:	d010      	beq.n	800a62e <_free_r+0x2a>
 800a60c:	1f0c      	subs	r4, r1, #4
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	da00      	bge.n	800a616 <_free_r+0x12>
 800a614:	18e4      	adds	r4, r4, r3
 800a616:	0028      	movs	r0, r5
 800a618:	f000 fcf6 	bl	800b008 <__malloc_lock>
 800a61c:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <_free_r+0x90>)
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <_free_r+0x2c>
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	6014      	str	r4, [r2, #0]
 800a628:	0028      	movs	r0, r5
 800a62a:	f000 fcf5 	bl	800b018 <__malloc_unlock>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	42a3      	cmp	r3, r4
 800a632:	d908      	bls.n	800a646 <_free_r+0x42>
 800a634:	6821      	ldr	r1, [r4, #0]
 800a636:	1860      	adds	r0, r4, r1
 800a638:	4283      	cmp	r3, r0
 800a63a:	d1f3      	bne.n	800a624 <_free_r+0x20>
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	1841      	adds	r1, r0, r1
 800a642:	6021      	str	r1, [r4, #0]
 800a644:	e7ee      	b.n	800a624 <_free_r+0x20>
 800a646:	001a      	movs	r2, r3
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <_free_r+0x4e>
 800a64e:	42a3      	cmp	r3, r4
 800a650:	d9f9      	bls.n	800a646 <_free_r+0x42>
 800a652:	6811      	ldr	r1, [r2, #0]
 800a654:	1850      	adds	r0, r2, r1
 800a656:	42a0      	cmp	r0, r4
 800a658:	d10b      	bne.n	800a672 <_free_r+0x6e>
 800a65a:	6820      	ldr	r0, [r4, #0]
 800a65c:	1809      	adds	r1, r1, r0
 800a65e:	1850      	adds	r0, r2, r1
 800a660:	6011      	str	r1, [r2, #0]
 800a662:	4283      	cmp	r3, r0
 800a664:	d1e0      	bne.n	800a628 <_free_r+0x24>
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	1841      	adds	r1, r0, r1
 800a66c:	6011      	str	r1, [r2, #0]
 800a66e:	6053      	str	r3, [r2, #4]
 800a670:	e7da      	b.n	800a628 <_free_r+0x24>
 800a672:	42a0      	cmp	r0, r4
 800a674:	d902      	bls.n	800a67c <_free_r+0x78>
 800a676:	230c      	movs	r3, #12
 800a678:	602b      	str	r3, [r5, #0]
 800a67a:	e7d5      	b.n	800a628 <_free_r+0x24>
 800a67c:	6821      	ldr	r1, [r4, #0]
 800a67e:	1860      	adds	r0, r4, r1
 800a680:	4283      	cmp	r3, r0
 800a682:	d103      	bne.n	800a68c <_free_r+0x88>
 800a684:	6818      	ldr	r0, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	1841      	adds	r1, r0, r1
 800a68a:	6021      	str	r1, [r4, #0]
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	6054      	str	r4, [r2, #4]
 800a690:	e7ca      	b.n	800a628 <_free_r+0x24>
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	20000ebc 	.word	0x20000ebc

0800a698 <sbrk_aligned>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	4e0f      	ldr	r6, [pc, #60]	; (800a6d8 <sbrk_aligned+0x40>)
 800a69c:	000d      	movs	r5, r1
 800a69e:	6831      	ldr	r1, [r6, #0]
 800a6a0:	0004      	movs	r4, r0
 800a6a2:	2900      	cmp	r1, #0
 800a6a4:	d102      	bne.n	800a6ac <sbrk_aligned+0x14>
 800a6a6:	f000 fb79 	bl	800ad9c <_sbrk_r>
 800a6aa:	6030      	str	r0, [r6, #0]
 800a6ac:	0029      	movs	r1, r5
 800a6ae:	0020      	movs	r0, r4
 800a6b0:	f000 fb74 	bl	800ad9c <_sbrk_r>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d00a      	beq.n	800a6ce <sbrk_aligned+0x36>
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	1cc5      	adds	r5, r0, #3
 800a6bc:	439d      	bics	r5, r3
 800a6be:	42a8      	cmp	r0, r5
 800a6c0:	d007      	beq.n	800a6d2 <sbrk_aligned+0x3a>
 800a6c2:	1a29      	subs	r1, r5, r0
 800a6c4:	0020      	movs	r0, r4
 800a6c6:	f000 fb69 	bl	800ad9c <_sbrk_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d101      	bne.n	800a6d2 <sbrk_aligned+0x3a>
 800a6ce:	2501      	movs	r5, #1
 800a6d0:	426d      	negs	r5, r5
 800a6d2:	0028      	movs	r0, r5
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	46c0      	nop			; (mov r8, r8)
 800a6d8:	20000ec0 	.word	0x20000ec0

0800a6dc <_malloc_r>:
 800a6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6de:	2203      	movs	r2, #3
 800a6e0:	1ccb      	adds	r3, r1, #3
 800a6e2:	4393      	bics	r3, r2
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	0006      	movs	r6, r0
 800a6e8:	001f      	movs	r7, r3
 800a6ea:	2b0c      	cmp	r3, #12
 800a6ec:	d232      	bcs.n	800a754 <_malloc_r+0x78>
 800a6ee:	270c      	movs	r7, #12
 800a6f0:	42b9      	cmp	r1, r7
 800a6f2:	d831      	bhi.n	800a758 <_malloc_r+0x7c>
 800a6f4:	0030      	movs	r0, r6
 800a6f6:	f000 fc87 	bl	800b008 <__malloc_lock>
 800a6fa:	4d32      	ldr	r5, [pc, #200]	; (800a7c4 <_malloc_r+0xe8>)
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	001c      	movs	r4, r3
 800a700:	2c00      	cmp	r4, #0
 800a702:	d12e      	bne.n	800a762 <_malloc_r+0x86>
 800a704:	0039      	movs	r1, r7
 800a706:	0030      	movs	r0, r6
 800a708:	f7ff ffc6 	bl	800a698 <sbrk_aligned>
 800a70c:	0004      	movs	r4, r0
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d11e      	bne.n	800a750 <_malloc_r+0x74>
 800a712:	682c      	ldr	r4, [r5, #0]
 800a714:	0025      	movs	r5, r4
 800a716:	2d00      	cmp	r5, #0
 800a718:	d14a      	bne.n	800a7b0 <_malloc_r+0xd4>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	0029      	movs	r1, r5
 800a71e:	18e3      	adds	r3, r4, r3
 800a720:	0030      	movs	r0, r6
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	f000 fb3a 	bl	800ad9c <_sbrk_r>
 800a728:	9b01      	ldr	r3, [sp, #4]
 800a72a:	4283      	cmp	r3, r0
 800a72c:	d143      	bne.n	800a7b6 <_malloc_r+0xda>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	3703      	adds	r7, #3
 800a732:	1aff      	subs	r7, r7, r3
 800a734:	2303      	movs	r3, #3
 800a736:	439f      	bics	r7, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	2f0c      	cmp	r7, #12
 800a73c:	d200      	bcs.n	800a740 <_malloc_r+0x64>
 800a73e:	270c      	movs	r7, #12
 800a740:	0039      	movs	r1, r7
 800a742:	0030      	movs	r0, r6
 800a744:	f7ff ffa8 	bl	800a698 <sbrk_aligned>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d034      	beq.n	800a7b6 <_malloc_r+0xda>
 800a74c:	6823      	ldr	r3, [r4, #0]
 800a74e:	19df      	adds	r7, r3, r7
 800a750:	6027      	str	r7, [r4, #0]
 800a752:	e013      	b.n	800a77c <_malloc_r+0xa0>
 800a754:	2b00      	cmp	r3, #0
 800a756:	dacb      	bge.n	800a6f0 <_malloc_r+0x14>
 800a758:	230c      	movs	r3, #12
 800a75a:	2500      	movs	r5, #0
 800a75c:	6033      	str	r3, [r6, #0]
 800a75e:	0028      	movs	r0, r5
 800a760:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	1bd1      	subs	r1, r2, r7
 800a766:	d420      	bmi.n	800a7aa <_malloc_r+0xce>
 800a768:	290b      	cmp	r1, #11
 800a76a:	d917      	bls.n	800a79c <_malloc_r+0xc0>
 800a76c:	19e2      	adds	r2, r4, r7
 800a76e:	6027      	str	r7, [r4, #0]
 800a770:	42a3      	cmp	r3, r4
 800a772:	d111      	bne.n	800a798 <_malloc_r+0xbc>
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	6863      	ldr	r3, [r4, #4]
 800a778:	6011      	str	r1, [r2, #0]
 800a77a:	6053      	str	r3, [r2, #4]
 800a77c:	0030      	movs	r0, r6
 800a77e:	0025      	movs	r5, r4
 800a780:	f000 fc4a 	bl	800b018 <__malloc_unlock>
 800a784:	2207      	movs	r2, #7
 800a786:	350b      	adds	r5, #11
 800a788:	1d23      	adds	r3, r4, #4
 800a78a:	4395      	bics	r5, r2
 800a78c:	1aea      	subs	r2, r5, r3
 800a78e:	429d      	cmp	r5, r3
 800a790:	d0e5      	beq.n	800a75e <_malloc_r+0x82>
 800a792:	1b5b      	subs	r3, r3, r5
 800a794:	50a3      	str	r3, [r4, r2]
 800a796:	e7e2      	b.n	800a75e <_malloc_r+0x82>
 800a798:	605a      	str	r2, [r3, #4]
 800a79a:	e7ec      	b.n	800a776 <_malloc_r+0x9a>
 800a79c:	6862      	ldr	r2, [r4, #4]
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	d101      	bne.n	800a7a6 <_malloc_r+0xca>
 800a7a2:	602a      	str	r2, [r5, #0]
 800a7a4:	e7ea      	b.n	800a77c <_malloc_r+0xa0>
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	e7e8      	b.n	800a77c <_malloc_r+0xa0>
 800a7aa:	0023      	movs	r3, r4
 800a7ac:	6864      	ldr	r4, [r4, #4]
 800a7ae:	e7a7      	b.n	800a700 <_malloc_r+0x24>
 800a7b0:	002c      	movs	r4, r5
 800a7b2:	686d      	ldr	r5, [r5, #4]
 800a7b4:	e7af      	b.n	800a716 <_malloc_r+0x3a>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	0030      	movs	r0, r6
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f000 fc2c 	bl	800b018 <__malloc_unlock>
 800a7c0:	e7cd      	b.n	800a75e <_malloc_r+0x82>
 800a7c2:	46c0      	nop			; (mov r8, r8)
 800a7c4:	20000ebc 	.word	0x20000ebc

0800a7c8 <__ssputs_r>:
 800a7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ca:	688e      	ldr	r6, [r1, #8]
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	0007      	movs	r7, r0
 800a7d0:	000c      	movs	r4, r1
 800a7d2:	9203      	str	r2, [sp, #12]
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	429e      	cmp	r6, r3
 800a7d8:	d83c      	bhi.n	800a854 <__ssputs_r+0x8c>
 800a7da:	2390      	movs	r3, #144	; 0x90
 800a7dc:	898a      	ldrh	r2, [r1, #12]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	421a      	tst	r2, r3
 800a7e2:	d034      	beq.n	800a84e <__ssputs_r+0x86>
 800a7e4:	6909      	ldr	r1, [r1, #16]
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	6960      	ldr	r0, [r4, #20]
 800a7ea:	1a5b      	subs	r3, r3, r1
 800a7ec:	9302      	str	r3, [sp, #8]
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	4343      	muls	r3, r0
 800a7f2:	0fdd      	lsrs	r5, r3, #31
 800a7f4:	18ed      	adds	r5, r5, r3
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	9802      	ldr	r0, [sp, #8]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	181b      	adds	r3, r3, r0
 800a7fe:	106d      	asrs	r5, r5, #1
 800a800:	42ab      	cmp	r3, r5
 800a802:	d900      	bls.n	800a806 <__ssputs_r+0x3e>
 800a804:	001d      	movs	r5, r3
 800a806:	0553      	lsls	r3, r2, #21
 800a808:	d532      	bpl.n	800a870 <__ssputs_r+0xa8>
 800a80a:	0029      	movs	r1, r5
 800a80c:	0038      	movs	r0, r7
 800a80e:	f7ff ff65 	bl	800a6dc <_malloc_r>
 800a812:	1e06      	subs	r6, r0, #0
 800a814:	d109      	bne.n	800a82a <__ssputs_r+0x62>
 800a816:	230c      	movs	r3, #12
 800a818:	603b      	str	r3, [r7, #0]
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	2001      	movs	r0, #1
 800a81e:	89a2      	ldrh	r2, [r4, #12]
 800a820:	4240      	negs	r0, r0
 800a822:	4313      	orrs	r3, r2
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	b005      	add	sp, #20
 800a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82a:	9a02      	ldr	r2, [sp, #8]
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	f7fd fb47 	bl	8007ec0 <memcpy>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	4a14      	ldr	r2, [pc, #80]	; (800a888 <__ssputs_r+0xc0>)
 800a836:	401a      	ands	r2, r3
 800a838:	2380      	movs	r3, #128	; 0x80
 800a83a:	4313      	orrs	r3, r2
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	9b02      	ldr	r3, [sp, #8]
 800a840:	6126      	str	r6, [r4, #16]
 800a842:	18f6      	adds	r6, r6, r3
 800a844:	6026      	str	r6, [r4, #0]
 800a846:	6165      	str	r5, [r4, #20]
 800a848:	9e01      	ldr	r6, [sp, #4]
 800a84a:	1aed      	subs	r5, r5, r3
 800a84c:	60a5      	str	r5, [r4, #8]
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	429e      	cmp	r6, r3
 800a852:	d900      	bls.n	800a856 <__ssputs_r+0x8e>
 800a854:	9e01      	ldr	r6, [sp, #4]
 800a856:	0032      	movs	r2, r6
 800a858:	9903      	ldr	r1, [sp, #12]
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	f000 fbc1 	bl	800afe2 <memmove>
 800a860:	68a3      	ldr	r3, [r4, #8]
 800a862:	2000      	movs	r0, #0
 800a864:	1b9b      	subs	r3, r3, r6
 800a866:	60a3      	str	r3, [r4, #8]
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	199e      	adds	r6, r3, r6
 800a86c:	6026      	str	r6, [r4, #0]
 800a86e:	e7da      	b.n	800a826 <__ssputs_r+0x5e>
 800a870:	002a      	movs	r2, r5
 800a872:	0038      	movs	r0, r7
 800a874:	f000 fbd8 	bl	800b028 <_realloc_r>
 800a878:	1e06      	subs	r6, r0, #0
 800a87a:	d1e0      	bne.n	800a83e <__ssputs_r+0x76>
 800a87c:	0038      	movs	r0, r7
 800a87e:	6921      	ldr	r1, [r4, #16]
 800a880:	f7ff fec0 	bl	800a604 <_free_r>
 800a884:	e7c7      	b.n	800a816 <__ssputs_r+0x4e>
 800a886:	46c0      	nop			; (mov r8, r8)
 800a888:	fffffb7f 	.word	0xfffffb7f

0800a88c <_svfiprintf_r>:
 800a88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88e:	b0a1      	sub	sp, #132	; 0x84
 800a890:	9003      	str	r0, [sp, #12]
 800a892:	001d      	movs	r5, r3
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	000f      	movs	r7, r1
 800a898:	0016      	movs	r6, r2
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	d511      	bpl.n	800a8c2 <_svfiprintf_r+0x36>
 800a89e:	690b      	ldr	r3, [r1, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10e      	bne.n	800a8c2 <_svfiprintf_r+0x36>
 800a8a4:	2140      	movs	r1, #64	; 0x40
 800a8a6:	f7ff ff19 	bl	800a6dc <_malloc_r>
 800a8aa:	6038      	str	r0, [r7, #0]
 800a8ac:	6138      	str	r0, [r7, #16]
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d105      	bne.n	800a8be <_svfiprintf_r+0x32>
 800a8b2:	230c      	movs	r3, #12
 800a8b4:	9a03      	ldr	r2, [sp, #12]
 800a8b6:	3801      	subs	r0, #1
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	b021      	add	sp, #132	; 0x84
 800a8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8be:	2340      	movs	r3, #64	; 0x40
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	ac08      	add	r4, sp, #32
 800a8c6:	6163      	str	r3, [r4, #20]
 800a8c8:	3320      	adds	r3, #32
 800a8ca:	7663      	strb	r3, [r4, #25]
 800a8cc:	3310      	adds	r3, #16
 800a8ce:	76a3      	strb	r3, [r4, #26]
 800a8d0:	9507      	str	r5, [sp, #28]
 800a8d2:	0035      	movs	r5, r6
 800a8d4:	782b      	ldrb	r3, [r5, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <_svfiprintf_r+0x52>
 800a8da:	2b25      	cmp	r3, #37	; 0x25
 800a8dc:	d147      	bne.n	800a96e <_svfiprintf_r+0xe2>
 800a8de:	1bab      	subs	r3, r5, r6
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	42b5      	cmp	r5, r6
 800a8e4:	d00c      	beq.n	800a900 <_svfiprintf_r+0x74>
 800a8e6:	0032      	movs	r2, r6
 800a8e8:	0039      	movs	r1, r7
 800a8ea:	9803      	ldr	r0, [sp, #12]
 800a8ec:	f7ff ff6c 	bl	800a7c8 <__ssputs_r>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d100      	bne.n	800a8f6 <_svfiprintf_r+0x6a>
 800a8f4:	e0ae      	b.n	800aa54 <_svfiprintf_r+0x1c8>
 800a8f6:	6962      	ldr	r2, [r4, #20]
 800a8f8:	9b05      	ldr	r3, [sp, #20]
 800a8fa:	4694      	mov	ip, r2
 800a8fc:	4463      	add	r3, ip
 800a8fe:	6163      	str	r3, [r4, #20]
 800a900:	782b      	ldrb	r3, [r5, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d100      	bne.n	800a908 <_svfiprintf_r+0x7c>
 800a906:	e0a5      	b.n	800aa54 <_svfiprintf_r+0x1c8>
 800a908:	2201      	movs	r2, #1
 800a90a:	2300      	movs	r3, #0
 800a90c:	4252      	negs	r2, r2
 800a90e:	6062      	str	r2, [r4, #4]
 800a910:	a904      	add	r1, sp, #16
 800a912:	3254      	adds	r2, #84	; 0x54
 800a914:	1852      	adds	r2, r2, r1
 800a916:	1c6e      	adds	r6, r5, #1
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	60e3      	str	r3, [r4, #12]
 800a91c:	60a3      	str	r3, [r4, #8]
 800a91e:	7013      	strb	r3, [r2, #0]
 800a920:	65a3      	str	r3, [r4, #88]	; 0x58
 800a922:	2205      	movs	r2, #5
 800a924:	7831      	ldrb	r1, [r6, #0]
 800a926:	4854      	ldr	r0, [pc, #336]	; (800aa78 <_svfiprintf_r+0x1ec>)
 800a928:	f000 fb50 	bl	800afcc <memchr>
 800a92c:	1c75      	adds	r5, r6, #1
 800a92e:	2800      	cmp	r0, #0
 800a930:	d11f      	bne.n	800a972 <_svfiprintf_r+0xe6>
 800a932:	6822      	ldr	r2, [r4, #0]
 800a934:	06d3      	lsls	r3, r2, #27
 800a936:	d504      	bpl.n	800a942 <_svfiprintf_r+0xb6>
 800a938:	2353      	movs	r3, #83	; 0x53
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	185b      	adds	r3, r3, r1
 800a93e:	2120      	movs	r1, #32
 800a940:	7019      	strb	r1, [r3, #0]
 800a942:	0713      	lsls	r3, r2, #28
 800a944:	d504      	bpl.n	800a950 <_svfiprintf_r+0xc4>
 800a946:	2353      	movs	r3, #83	; 0x53
 800a948:	a904      	add	r1, sp, #16
 800a94a:	185b      	adds	r3, r3, r1
 800a94c:	212b      	movs	r1, #43	; 0x2b
 800a94e:	7019      	strb	r1, [r3, #0]
 800a950:	7833      	ldrb	r3, [r6, #0]
 800a952:	2b2a      	cmp	r3, #42	; 0x2a
 800a954:	d016      	beq.n	800a984 <_svfiprintf_r+0xf8>
 800a956:	0035      	movs	r5, r6
 800a958:	2100      	movs	r1, #0
 800a95a:	200a      	movs	r0, #10
 800a95c:	68e3      	ldr	r3, [r4, #12]
 800a95e:	782a      	ldrb	r2, [r5, #0]
 800a960:	1c6e      	adds	r6, r5, #1
 800a962:	3a30      	subs	r2, #48	; 0x30
 800a964:	2a09      	cmp	r2, #9
 800a966:	d94e      	bls.n	800aa06 <_svfiprintf_r+0x17a>
 800a968:	2900      	cmp	r1, #0
 800a96a:	d111      	bne.n	800a990 <_svfiprintf_r+0x104>
 800a96c:	e017      	b.n	800a99e <_svfiprintf_r+0x112>
 800a96e:	3501      	adds	r5, #1
 800a970:	e7b0      	b.n	800a8d4 <_svfiprintf_r+0x48>
 800a972:	4b41      	ldr	r3, [pc, #260]	; (800aa78 <_svfiprintf_r+0x1ec>)
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	1ac0      	subs	r0, r0, r3
 800a978:	2301      	movs	r3, #1
 800a97a:	4083      	lsls	r3, r0
 800a97c:	4313      	orrs	r3, r2
 800a97e:	002e      	movs	r6, r5
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	e7ce      	b.n	800a922 <_svfiprintf_r+0x96>
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	1d19      	adds	r1, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	9107      	str	r1, [sp, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	db01      	blt.n	800a994 <_svfiprintf_r+0x108>
 800a990:	930b      	str	r3, [sp, #44]	; 0x2c
 800a992:	e004      	b.n	800a99e <_svfiprintf_r+0x112>
 800a994:	425b      	negs	r3, r3
 800a996:	60e3      	str	r3, [r4, #12]
 800a998:	2302      	movs	r3, #2
 800a99a:	4313      	orrs	r3, r2
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	782b      	ldrb	r3, [r5, #0]
 800a9a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9a2:	d10a      	bne.n	800a9ba <_svfiprintf_r+0x12e>
 800a9a4:	786b      	ldrb	r3, [r5, #1]
 800a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a8:	d135      	bne.n	800aa16 <_svfiprintf_r+0x18a>
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	3502      	adds	r5, #2
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9207      	str	r2, [sp, #28]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	db2b      	blt.n	800aa10 <_svfiprintf_r+0x184>
 800a9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ba:	4e30      	ldr	r6, [pc, #192]	; (800aa7c <_svfiprintf_r+0x1f0>)
 800a9bc:	2203      	movs	r2, #3
 800a9be:	0030      	movs	r0, r6
 800a9c0:	7829      	ldrb	r1, [r5, #0]
 800a9c2:	f000 fb03 	bl	800afcc <memchr>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d006      	beq.n	800a9d8 <_svfiprintf_r+0x14c>
 800a9ca:	2340      	movs	r3, #64	; 0x40
 800a9cc:	1b80      	subs	r0, r0, r6
 800a9ce:	4083      	lsls	r3, r0
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	3501      	adds	r5, #1
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	7829      	ldrb	r1, [r5, #0]
 800a9da:	2206      	movs	r2, #6
 800a9dc:	4828      	ldr	r0, [pc, #160]	; (800aa80 <_svfiprintf_r+0x1f4>)
 800a9de:	1c6e      	adds	r6, r5, #1
 800a9e0:	7621      	strb	r1, [r4, #24]
 800a9e2:	f000 faf3 	bl	800afcc <memchr>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d03c      	beq.n	800aa64 <_svfiprintf_r+0x1d8>
 800a9ea:	4b26      	ldr	r3, [pc, #152]	; (800aa84 <_svfiprintf_r+0x1f8>)
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d125      	bne.n	800aa3c <_svfiprintf_r+0x1b0>
 800a9f0:	2207      	movs	r2, #7
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	3307      	adds	r3, #7
 800a9f6:	4393      	bics	r3, r2
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	9307      	str	r3, [sp, #28]
 800a9fc:	6963      	ldr	r3, [r4, #20]
 800a9fe:	9a04      	ldr	r2, [sp, #16]
 800aa00:	189b      	adds	r3, r3, r2
 800aa02:	6163      	str	r3, [r4, #20]
 800aa04:	e765      	b.n	800a8d2 <_svfiprintf_r+0x46>
 800aa06:	4343      	muls	r3, r0
 800aa08:	0035      	movs	r5, r6
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	189b      	adds	r3, r3, r2
 800aa0e:	e7a6      	b.n	800a95e <_svfiprintf_r+0xd2>
 800aa10:	2301      	movs	r3, #1
 800aa12:	425b      	negs	r3, r3
 800aa14:	e7d0      	b.n	800a9b8 <_svfiprintf_r+0x12c>
 800aa16:	2300      	movs	r3, #0
 800aa18:	200a      	movs	r0, #10
 800aa1a:	001a      	movs	r2, r3
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	7829      	ldrb	r1, [r5, #0]
 800aa22:	1c6e      	adds	r6, r5, #1
 800aa24:	3930      	subs	r1, #48	; 0x30
 800aa26:	2909      	cmp	r1, #9
 800aa28:	d903      	bls.n	800aa32 <_svfiprintf_r+0x1a6>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c5      	beq.n	800a9ba <_svfiprintf_r+0x12e>
 800aa2e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa30:	e7c3      	b.n	800a9ba <_svfiprintf_r+0x12e>
 800aa32:	4342      	muls	r2, r0
 800aa34:	0035      	movs	r5, r6
 800aa36:	2301      	movs	r3, #1
 800aa38:	1852      	adds	r2, r2, r1
 800aa3a:	e7f1      	b.n	800aa20 <_svfiprintf_r+0x194>
 800aa3c:	ab07      	add	r3, sp, #28
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	003a      	movs	r2, r7
 800aa42:	0021      	movs	r1, r4
 800aa44:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <_svfiprintf_r+0x1fc>)
 800aa46:	9803      	ldr	r0, [sp, #12]
 800aa48:	e000      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa4a:	bf00      	nop
 800aa4c:	9004      	str	r0, [sp, #16]
 800aa4e:	9b04      	ldr	r3, [sp, #16]
 800aa50:	3301      	adds	r3, #1
 800aa52:	d1d3      	bne.n	800a9fc <_svfiprintf_r+0x170>
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa58:	065b      	lsls	r3, r3, #25
 800aa5a:	d400      	bmi.n	800aa5e <_svfiprintf_r+0x1d2>
 800aa5c:	e72d      	b.n	800a8ba <_svfiprintf_r+0x2e>
 800aa5e:	2001      	movs	r0, #1
 800aa60:	4240      	negs	r0, r0
 800aa62:	e72a      	b.n	800a8ba <_svfiprintf_r+0x2e>
 800aa64:	ab07      	add	r3, sp, #28
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	003a      	movs	r2, r7
 800aa6a:	0021      	movs	r1, r4
 800aa6c:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <_svfiprintf_r+0x1fc>)
 800aa6e:	9803      	ldr	r0, [sp, #12]
 800aa70:	f000 f87c 	bl	800ab6c <_printf_i>
 800aa74:	e7ea      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	0800bd04 	.word	0x0800bd04
 800aa7c:	0800bd0a 	.word	0x0800bd0a
 800aa80:	0800bd0e 	.word	0x0800bd0e
 800aa84:	00000000 	.word	0x00000000
 800aa88:	0800a7c9 	.word	0x0800a7c9

0800aa8c <_printf_common>:
 800aa8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa8e:	0015      	movs	r5, r2
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	688a      	ldr	r2, [r1, #8]
 800aa94:	690b      	ldr	r3, [r1, #16]
 800aa96:	000c      	movs	r4, r1
 800aa98:	9000      	str	r0, [sp, #0]
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	da00      	bge.n	800aaa0 <_printf_common+0x14>
 800aa9e:	0013      	movs	r3, r2
 800aaa0:	0022      	movs	r2, r4
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	3243      	adds	r2, #67	; 0x43
 800aaa6:	7812      	ldrb	r2, [r2, #0]
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d001      	beq.n	800aab0 <_printf_common+0x24>
 800aaac:	3301      	adds	r3, #1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	069b      	lsls	r3, r3, #26
 800aab4:	d502      	bpl.n	800aabc <_printf_common+0x30>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	3302      	adds	r3, #2
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	2306      	movs	r3, #6
 800aac0:	0017      	movs	r7, r2
 800aac2:	401f      	ands	r7, r3
 800aac4:	421a      	tst	r2, r3
 800aac6:	d027      	beq.n	800ab18 <_printf_common+0x8c>
 800aac8:	0023      	movs	r3, r4
 800aaca:	3343      	adds	r3, #67	; 0x43
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	1e5a      	subs	r2, r3, #1
 800aad0:	4193      	sbcs	r3, r2
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	0692      	lsls	r2, r2, #26
 800aad6:	d430      	bmi.n	800ab3a <_printf_common+0xae>
 800aad8:	0022      	movs	r2, r4
 800aada:	9901      	ldr	r1, [sp, #4]
 800aadc:	9800      	ldr	r0, [sp, #0]
 800aade:	9e08      	ldr	r6, [sp, #32]
 800aae0:	3243      	adds	r2, #67	; 0x43
 800aae2:	47b0      	blx	r6
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d025      	beq.n	800ab34 <_printf_common+0xa8>
 800aae8:	2306      	movs	r3, #6
 800aaea:	6820      	ldr	r0, [r4, #0]
 800aaec:	682a      	ldr	r2, [r5, #0]
 800aaee:	68e1      	ldr	r1, [r4, #12]
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	4003      	ands	r3, r0
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d103      	bne.n	800ab00 <_printf_common+0x74>
 800aaf8:	1a8d      	subs	r5, r1, r2
 800aafa:	43eb      	mvns	r3, r5
 800aafc:	17db      	asrs	r3, r3, #31
 800aafe:	401d      	ands	r5, r3
 800ab00:	68a3      	ldr	r3, [r4, #8]
 800ab02:	6922      	ldr	r2, [r4, #16]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	dd01      	ble.n	800ab0c <_printf_common+0x80>
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	18ed      	adds	r5, r5, r3
 800ab0c:	2700      	movs	r7, #0
 800ab0e:	42bd      	cmp	r5, r7
 800ab10:	d120      	bne.n	800ab54 <_printf_common+0xc8>
 800ab12:	2000      	movs	r0, #0
 800ab14:	e010      	b.n	800ab38 <_printf_common+0xac>
 800ab16:	3701      	adds	r7, #1
 800ab18:	68e3      	ldr	r3, [r4, #12]
 800ab1a:	682a      	ldr	r2, [r5, #0]
 800ab1c:	1a9b      	subs	r3, r3, r2
 800ab1e:	42bb      	cmp	r3, r7
 800ab20:	ddd2      	ble.n	800aac8 <_printf_common+0x3c>
 800ab22:	0022      	movs	r2, r4
 800ab24:	2301      	movs	r3, #1
 800ab26:	9901      	ldr	r1, [sp, #4]
 800ab28:	9800      	ldr	r0, [sp, #0]
 800ab2a:	9e08      	ldr	r6, [sp, #32]
 800ab2c:	3219      	adds	r2, #25
 800ab2e:	47b0      	blx	r6
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d1f0      	bne.n	800ab16 <_printf_common+0x8a>
 800ab34:	2001      	movs	r0, #1
 800ab36:	4240      	negs	r0, r0
 800ab38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab3a:	2030      	movs	r0, #48	; 0x30
 800ab3c:	18e1      	adds	r1, r4, r3
 800ab3e:	3143      	adds	r1, #67	; 0x43
 800ab40:	7008      	strb	r0, [r1, #0]
 800ab42:	0021      	movs	r1, r4
 800ab44:	1c5a      	adds	r2, r3, #1
 800ab46:	3145      	adds	r1, #69	; 0x45
 800ab48:	7809      	ldrb	r1, [r1, #0]
 800ab4a:	18a2      	adds	r2, r4, r2
 800ab4c:	3243      	adds	r2, #67	; 0x43
 800ab4e:	3302      	adds	r3, #2
 800ab50:	7011      	strb	r1, [r2, #0]
 800ab52:	e7c1      	b.n	800aad8 <_printf_common+0x4c>
 800ab54:	0022      	movs	r2, r4
 800ab56:	2301      	movs	r3, #1
 800ab58:	9901      	ldr	r1, [sp, #4]
 800ab5a:	9800      	ldr	r0, [sp, #0]
 800ab5c:	9e08      	ldr	r6, [sp, #32]
 800ab5e:	321a      	adds	r2, #26
 800ab60:	47b0      	blx	r6
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d0e6      	beq.n	800ab34 <_printf_common+0xa8>
 800ab66:	3701      	adds	r7, #1
 800ab68:	e7d1      	b.n	800ab0e <_printf_common+0x82>
	...

0800ab6c <_printf_i>:
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	b08b      	sub	sp, #44	; 0x2c
 800ab70:	9206      	str	r2, [sp, #24]
 800ab72:	000a      	movs	r2, r1
 800ab74:	3243      	adds	r2, #67	; 0x43
 800ab76:	9307      	str	r3, [sp, #28]
 800ab78:	9005      	str	r0, [sp, #20]
 800ab7a:	9204      	str	r2, [sp, #16]
 800ab7c:	7e0a      	ldrb	r2, [r1, #24]
 800ab7e:	000c      	movs	r4, r1
 800ab80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab82:	2a78      	cmp	r2, #120	; 0x78
 800ab84:	d807      	bhi.n	800ab96 <_printf_i+0x2a>
 800ab86:	2a62      	cmp	r2, #98	; 0x62
 800ab88:	d809      	bhi.n	800ab9e <_printf_i+0x32>
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	d100      	bne.n	800ab90 <_printf_i+0x24>
 800ab8e:	e0c1      	b.n	800ad14 <_printf_i+0x1a8>
 800ab90:	2a58      	cmp	r2, #88	; 0x58
 800ab92:	d100      	bne.n	800ab96 <_printf_i+0x2a>
 800ab94:	e08c      	b.n	800acb0 <_printf_i+0x144>
 800ab96:	0026      	movs	r6, r4
 800ab98:	3642      	adds	r6, #66	; 0x42
 800ab9a:	7032      	strb	r2, [r6, #0]
 800ab9c:	e022      	b.n	800abe4 <_printf_i+0x78>
 800ab9e:	0010      	movs	r0, r2
 800aba0:	3863      	subs	r0, #99	; 0x63
 800aba2:	2815      	cmp	r0, #21
 800aba4:	d8f7      	bhi.n	800ab96 <_printf_i+0x2a>
 800aba6:	f7f5 facb 	bl	8000140 <__gnu_thumb1_case_shi>
 800abaa:	0016      	.short	0x0016
 800abac:	fff6001f 	.word	0xfff6001f
 800abb0:	fff6fff6 	.word	0xfff6fff6
 800abb4:	001ffff6 	.word	0x001ffff6
 800abb8:	fff6fff6 	.word	0xfff6fff6
 800abbc:	fff6fff6 	.word	0xfff6fff6
 800abc0:	003600a8 	.word	0x003600a8
 800abc4:	fff6009a 	.word	0xfff6009a
 800abc8:	00b9fff6 	.word	0x00b9fff6
 800abcc:	0036fff6 	.word	0x0036fff6
 800abd0:	fff6fff6 	.word	0xfff6fff6
 800abd4:	009e      	.short	0x009e
 800abd6:	0026      	movs	r6, r4
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	3642      	adds	r6, #66	; 0x42
 800abdc:	1d11      	adds	r1, r2, #4
 800abde:	6019      	str	r1, [r3, #0]
 800abe0:	6813      	ldr	r3, [r2, #0]
 800abe2:	7033      	strb	r3, [r6, #0]
 800abe4:	2301      	movs	r3, #1
 800abe6:	e0a7      	b.n	800ad38 <_printf_i+0x1cc>
 800abe8:	6808      	ldr	r0, [r1, #0]
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	1d0a      	adds	r2, r1, #4
 800abee:	0605      	lsls	r5, r0, #24
 800abf0:	d50b      	bpl.n	800ac0a <_printf_i+0x9e>
 800abf2:	680d      	ldr	r5, [r1, #0]
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	da03      	bge.n	800ac02 <_printf_i+0x96>
 800abfa:	232d      	movs	r3, #45	; 0x2d
 800abfc:	9a04      	ldr	r2, [sp, #16]
 800abfe:	426d      	negs	r5, r5
 800ac00:	7013      	strb	r3, [r2, #0]
 800ac02:	4b61      	ldr	r3, [pc, #388]	; (800ad88 <_printf_i+0x21c>)
 800ac04:	270a      	movs	r7, #10
 800ac06:	9303      	str	r3, [sp, #12]
 800ac08:	e01b      	b.n	800ac42 <_printf_i+0xd6>
 800ac0a:	680d      	ldr	r5, [r1, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	0641      	lsls	r1, r0, #25
 800ac10:	d5f1      	bpl.n	800abf6 <_printf_i+0x8a>
 800ac12:	b22d      	sxth	r5, r5
 800ac14:	e7ef      	b.n	800abf6 <_printf_i+0x8a>
 800ac16:	680d      	ldr	r5, [r1, #0]
 800ac18:	6819      	ldr	r1, [r3, #0]
 800ac1a:	1d08      	adds	r0, r1, #4
 800ac1c:	6018      	str	r0, [r3, #0]
 800ac1e:	062e      	lsls	r6, r5, #24
 800ac20:	d501      	bpl.n	800ac26 <_printf_i+0xba>
 800ac22:	680d      	ldr	r5, [r1, #0]
 800ac24:	e003      	b.n	800ac2e <_printf_i+0xc2>
 800ac26:	066d      	lsls	r5, r5, #25
 800ac28:	d5fb      	bpl.n	800ac22 <_printf_i+0xb6>
 800ac2a:	680d      	ldr	r5, [r1, #0]
 800ac2c:	b2ad      	uxth	r5, r5
 800ac2e:	4b56      	ldr	r3, [pc, #344]	; (800ad88 <_printf_i+0x21c>)
 800ac30:	2708      	movs	r7, #8
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	2a6f      	cmp	r2, #111	; 0x6f
 800ac36:	d000      	beq.n	800ac3a <_printf_i+0xce>
 800ac38:	3702      	adds	r7, #2
 800ac3a:	0023      	movs	r3, r4
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	3343      	adds	r3, #67	; 0x43
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	6863      	ldr	r3, [r4, #4]
 800ac44:	60a3      	str	r3, [r4, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	db03      	blt.n	800ac52 <_printf_i+0xe6>
 800ac4a:	2204      	movs	r2, #4
 800ac4c:	6821      	ldr	r1, [r4, #0]
 800ac4e:	4391      	bics	r1, r2
 800ac50:	6021      	str	r1, [r4, #0]
 800ac52:	2d00      	cmp	r5, #0
 800ac54:	d102      	bne.n	800ac5c <_printf_i+0xf0>
 800ac56:	9e04      	ldr	r6, [sp, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00c      	beq.n	800ac76 <_printf_i+0x10a>
 800ac5c:	9e04      	ldr	r6, [sp, #16]
 800ac5e:	0028      	movs	r0, r5
 800ac60:	0039      	movs	r1, r7
 800ac62:	f7f5 fafd 	bl	8000260 <__aeabi_uidivmod>
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	3e01      	subs	r6, #1
 800ac6a:	5c5b      	ldrb	r3, [r3, r1]
 800ac6c:	7033      	strb	r3, [r6, #0]
 800ac6e:	002b      	movs	r3, r5
 800ac70:	0005      	movs	r5, r0
 800ac72:	429f      	cmp	r7, r3
 800ac74:	d9f3      	bls.n	800ac5e <_printf_i+0xf2>
 800ac76:	2f08      	cmp	r7, #8
 800ac78:	d109      	bne.n	800ac8e <_printf_i+0x122>
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	07db      	lsls	r3, r3, #31
 800ac7e:	d506      	bpl.n	800ac8e <_printf_i+0x122>
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	6922      	ldr	r2, [r4, #16]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	dc02      	bgt.n	800ac8e <_printf_i+0x122>
 800ac88:	2330      	movs	r3, #48	; 0x30
 800ac8a:	3e01      	subs	r6, #1
 800ac8c:	7033      	strb	r3, [r6, #0]
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	1b9b      	subs	r3, r3, r6
 800ac92:	6123      	str	r3, [r4, #16]
 800ac94:	9b07      	ldr	r3, [sp, #28]
 800ac96:	0021      	movs	r1, r4
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	9805      	ldr	r0, [sp, #20]
 800ac9c:	9b06      	ldr	r3, [sp, #24]
 800ac9e:	aa09      	add	r2, sp, #36	; 0x24
 800aca0:	f7ff fef4 	bl	800aa8c <_printf_common>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d14c      	bne.n	800ad42 <_printf_i+0x1d6>
 800aca8:	2001      	movs	r0, #1
 800acaa:	4240      	negs	r0, r0
 800acac:	b00b      	add	sp, #44	; 0x2c
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	3145      	adds	r1, #69	; 0x45
 800acb2:	700a      	strb	r2, [r1, #0]
 800acb4:	4a34      	ldr	r2, [pc, #208]	; (800ad88 <_printf_i+0x21c>)
 800acb6:	9203      	str	r2, [sp, #12]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	6821      	ldr	r1, [r4, #0]
 800acbc:	ca20      	ldmia	r2!, {r5}
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	0608      	lsls	r0, r1, #24
 800acc2:	d516      	bpl.n	800acf2 <_printf_i+0x186>
 800acc4:	07cb      	lsls	r3, r1, #31
 800acc6:	d502      	bpl.n	800acce <_printf_i+0x162>
 800acc8:	2320      	movs	r3, #32
 800acca:	4319      	orrs	r1, r3
 800accc:	6021      	str	r1, [r4, #0]
 800acce:	2710      	movs	r7, #16
 800acd0:	2d00      	cmp	r5, #0
 800acd2:	d1b2      	bne.n	800ac3a <_printf_i+0xce>
 800acd4:	2320      	movs	r3, #32
 800acd6:	6822      	ldr	r2, [r4, #0]
 800acd8:	439a      	bics	r2, r3
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	e7ad      	b.n	800ac3a <_printf_i+0xce>
 800acde:	2220      	movs	r2, #32
 800ace0:	6809      	ldr	r1, [r1, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	6022      	str	r2, [r4, #0]
 800ace6:	0022      	movs	r2, r4
 800ace8:	2178      	movs	r1, #120	; 0x78
 800acea:	3245      	adds	r2, #69	; 0x45
 800acec:	7011      	strb	r1, [r2, #0]
 800acee:	4a27      	ldr	r2, [pc, #156]	; (800ad8c <_printf_i+0x220>)
 800acf0:	e7e1      	b.n	800acb6 <_printf_i+0x14a>
 800acf2:	0648      	lsls	r0, r1, #25
 800acf4:	d5e6      	bpl.n	800acc4 <_printf_i+0x158>
 800acf6:	b2ad      	uxth	r5, r5
 800acf8:	e7e4      	b.n	800acc4 <_printf_i+0x158>
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	680d      	ldr	r5, [r1, #0]
 800acfe:	1d10      	adds	r0, r2, #4
 800ad00:	6949      	ldr	r1, [r1, #20]
 800ad02:	6018      	str	r0, [r3, #0]
 800ad04:	6813      	ldr	r3, [r2, #0]
 800ad06:	062e      	lsls	r6, r5, #24
 800ad08:	d501      	bpl.n	800ad0e <_printf_i+0x1a2>
 800ad0a:	6019      	str	r1, [r3, #0]
 800ad0c:	e002      	b.n	800ad14 <_printf_i+0x1a8>
 800ad0e:	066d      	lsls	r5, r5, #25
 800ad10:	d5fb      	bpl.n	800ad0a <_printf_i+0x19e>
 800ad12:	8019      	strh	r1, [r3, #0]
 800ad14:	2300      	movs	r3, #0
 800ad16:	9e04      	ldr	r6, [sp, #16]
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	e7bb      	b.n	800ac94 <_printf_i+0x128>
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	1d11      	adds	r1, r2, #4
 800ad20:	6019      	str	r1, [r3, #0]
 800ad22:	6816      	ldr	r6, [r2, #0]
 800ad24:	2100      	movs	r1, #0
 800ad26:	0030      	movs	r0, r6
 800ad28:	6862      	ldr	r2, [r4, #4]
 800ad2a:	f000 f94f 	bl	800afcc <memchr>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d001      	beq.n	800ad36 <_printf_i+0x1ca>
 800ad32:	1b80      	subs	r0, r0, r6
 800ad34:	6060      	str	r0, [r4, #4]
 800ad36:	6863      	ldr	r3, [r4, #4]
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	7013      	strb	r3, [r2, #0]
 800ad40:	e7a8      	b.n	800ac94 <_printf_i+0x128>
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	0032      	movs	r2, r6
 800ad46:	9906      	ldr	r1, [sp, #24]
 800ad48:	9805      	ldr	r0, [sp, #20]
 800ad4a:	9d07      	ldr	r5, [sp, #28]
 800ad4c:	47a8      	blx	r5
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	d0aa      	beq.n	800aca8 <_printf_i+0x13c>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	079b      	lsls	r3, r3, #30
 800ad56:	d415      	bmi.n	800ad84 <_printf_i+0x218>
 800ad58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5a:	68e0      	ldr	r0, [r4, #12]
 800ad5c:	4298      	cmp	r0, r3
 800ad5e:	daa5      	bge.n	800acac <_printf_i+0x140>
 800ad60:	0018      	movs	r0, r3
 800ad62:	e7a3      	b.n	800acac <_printf_i+0x140>
 800ad64:	0022      	movs	r2, r4
 800ad66:	2301      	movs	r3, #1
 800ad68:	9906      	ldr	r1, [sp, #24]
 800ad6a:	9805      	ldr	r0, [sp, #20]
 800ad6c:	9e07      	ldr	r6, [sp, #28]
 800ad6e:	3219      	adds	r2, #25
 800ad70:	47b0      	blx	r6
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	d098      	beq.n	800aca8 <_printf_i+0x13c>
 800ad76:	3501      	adds	r5, #1
 800ad78:	68e3      	ldr	r3, [r4, #12]
 800ad7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	42ab      	cmp	r3, r5
 800ad80:	dcf0      	bgt.n	800ad64 <_printf_i+0x1f8>
 800ad82:	e7e9      	b.n	800ad58 <_printf_i+0x1ec>
 800ad84:	2500      	movs	r5, #0
 800ad86:	e7f7      	b.n	800ad78 <_printf_i+0x20c>
 800ad88:	0800bd15 	.word	0x0800bd15
 800ad8c:	0800bd26 	.word	0x0800bd26

0800ad90 <nan>:
 800ad90:	2000      	movs	r0, #0
 800ad92:	4901      	ldr	r1, [pc, #4]	; (800ad98 <nan+0x8>)
 800ad94:	4770      	bx	lr
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	7ff80000 	.word	0x7ff80000

0800ad9c <_sbrk_r>:
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	b570      	push	{r4, r5, r6, lr}
 800ada0:	4d06      	ldr	r5, [pc, #24]	; (800adbc <_sbrk_r+0x20>)
 800ada2:	0004      	movs	r4, r0
 800ada4:	0008      	movs	r0, r1
 800ada6:	602b      	str	r3, [r5, #0]
 800ada8:	f7f7 ff62 	bl	8002c70 <_sbrk>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d103      	bne.n	800adb8 <_sbrk_r+0x1c>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d000      	beq.n	800adb8 <_sbrk_r+0x1c>
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	bd70      	pop	{r4, r5, r6, pc}
 800adba:	46c0      	nop			; (mov r8, r8)
 800adbc:	20000ec4 	.word	0x20000ec4

0800adc0 <nanf>:
 800adc0:	4800      	ldr	r0, [pc, #0]	; (800adc4 <nanf+0x4>)
 800adc2:	4770      	bx	lr
 800adc4:	7fc00000 	.word	0x7fc00000

0800adc8 <__sread>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	000c      	movs	r4, r1
 800adcc:	250e      	movs	r5, #14
 800adce:	5f49      	ldrsh	r1, [r1, r5]
 800add0:	f000 faba 	bl	800b348 <_read_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	db03      	blt.n	800ade0 <__sread+0x18>
 800add8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800adda:	181b      	adds	r3, r3, r0
 800addc:	6563      	str	r3, [r4, #84]	; 0x54
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	4a02      	ldr	r2, [pc, #8]	; (800adec <__sread+0x24>)
 800ade4:	4013      	ands	r3, r2
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	e7f9      	b.n	800adde <__sread+0x16>
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	ffffefff 	.word	0xffffefff

0800adf0 <__swrite>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	001f      	movs	r7, r3
 800adf4:	898b      	ldrh	r3, [r1, #12]
 800adf6:	0005      	movs	r5, r0
 800adf8:	000c      	movs	r4, r1
 800adfa:	0016      	movs	r6, r2
 800adfc:	05db      	lsls	r3, r3, #23
 800adfe:	d505      	bpl.n	800ae0c <__swrite+0x1c>
 800ae00:	230e      	movs	r3, #14
 800ae02:	5ec9      	ldrsh	r1, [r1, r3]
 800ae04:	2200      	movs	r2, #0
 800ae06:	2302      	movs	r3, #2
 800ae08:	f000 f8c2 	bl	800af90 <_lseek_r>
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	4a05      	ldr	r2, [pc, #20]	; (800ae24 <__swrite+0x34>)
 800ae10:	0028      	movs	r0, r5
 800ae12:	4013      	ands	r3, r2
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	0032      	movs	r2, r6
 800ae18:	230e      	movs	r3, #14
 800ae1a:	5ee1      	ldrsh	r1, [r4, r3]
 800ae1c:	003b      	movs	r3, r7
 800ae1e:	f000 f83f 	bl	800aea0 <_write_r>
 800ae22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae24:	ffffefff 	.word	0xffffefff

0800ae28 <__sseek>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	000c      	movs	r4, r1
 800ae2c:	250e      	movs	r5, #14
 800ae2e:	5f49      	ldrsh	r1, [r1, r5]
 800ae30:	f000 f8ae 	bl	800af90 <_lseek_r>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	1c42      	adds	r2, r0, #1
 800ae38:	d103      	bne.n	800ae42 <__sseek+0x1a>
 800ae3a:	4a05      	ldr	r2, [pc, #20]	; (800ae50 <__sseek+0x28>)
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	2280      	movs	r2, #128	; 0x80
 800ae44:	0152      	lsls	r2, r2, #5
 800ae46:	4313      	orrs	r3, r2
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae4c:	e7f8      	b.n	800ae40 <__sseek+0x18>
 800ae4e:	46c0      	nop			; (mov r8, r8)
 800ae50:	ffffefff 	.word	0xffffefff

0800ae54 <__sclose>:
 800ae54:	b510      	push	{r4, lr}
 800ae56:	230e      	movs	r3, #14
 800ae58:	5ec9      	ldrsh	r1, [r1, r3]
 800ae5a:	f000 f853 	bl	800af04 <_close_r>
 800ae5e:	bd10      	pop	{r4, pc}

0800ae60 <strncmp>:
 800ae60:	b530      	push	{r4, r5, lr}
 800ae62:	0005      	movs	r5, r0
 800ae64:	1e10      	subs	r0, r2, #0
 800ae66:	d008      	beq.n	800ae7a <strncmp+0x1a>
 800ae68:	2400      	movs	r4, #0
 800ae6a:	3a01      	subs	r2, #1
 800ae6c:	5d2b      	ldrb	r3, [r5, r4]
 800ae6e:	5d08      	ldrb	r0, [r1, r4]
 800ae70:	4283      	cmp	r3, r0
 800ae72:	d101      	bne.n	800ae78 <strncmp+0x18>
 800ae74:	4294      	cmp	r4, r2
 800ae76:	d101      	bne.n	800ae7c <strncmp+0x1c>
 800ae78:	1a18      	subs	r0, r3, r0
 800ae7a:	bd30      	pop	{r4, r5, pc}
 800ae7c:	3401      	adds	r4, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1f4      	bne.n	800ae6c <strncmp+0xc>
 800ae82:	e7f9      	b.n	800ae78 <strncmp+0x18>

0800ae84 <__ascii_wctomb>:
 800ae84:	0003      	movs	r3, r0
 800ae86:	1e08      	subs	r0, r1, #0
 800ae88:	d005      	beq.n	800ae96 <__ascii_wctomb+0x12>
 800ae8a:	2aff      	cmp	r2, #255	; 0xff
 800ae8c:	d904      	bls.n	800ae98 <__ascii_wctomb+0x14>
 800ae8e:	228a      	movs	r2, #138	; 0x8a
 800ae90:	2001      	movs	r0, #1
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	4240      	negs	r0, r0
 800ae96:	4770      	bx	lr
 800ae98:	2001      	movs	r0, #1
 800ae9a:	700a      	strb	r2, [r1, #0]
 800ae9c:	e7fb      	b.n	800ae96 <__ascii_wctomb+0x12>
	...

0800aea0 <_write_r>:
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	0004      	movs	r4, r0
 800aea4:	0008      	movs	r0, r1
 800aea6:	0011      	movs	r1, r2
 800aea8:	001a      	movs	r2, r3
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4d05      	ldr	r5, [pc, #20]	; (800aec4 <_write_r+0x24>)
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	f7f7 fe95 	bl	8002bde <_write>
 800aeb4:	1c43      	adds	r3, r0, #1
 800aeb6:	d103      	bne.n	800aec0 <_write_r+0x20>
 800aeb8:	682b      	ldr	r3, [r5, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d000      	beq.n	800aec0 <_write_r+0x20>
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	20000ec4 	.word	0x20000ec4

0800aec8 <__assert_func>:
 800aec8:	b530      	push	{r4, r5, lr}
 800aeca:	0014      	movs	r4, r2
 800aecc:	001a      	movs	r2, r3
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <__assert_func+0x2c>)
 800aed0:	0005      	movs	r5, r0
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	b085      	sub	sp, #20
 800aed6:	68d8      	ldr	r0, [r3, #12]
 800aed8:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <__assert_func+0x30>)
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d101      	bne.n	800aee2 <__assert_func+0x1a>
 800aede:	4b07      	ldr	r3, [pc, #28]	; (800aefc <__assert_func+0x34>)
 800aee0:	001c      	movs	r4, r3
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	9100      	str	r1, [sp, #0]
 800aee6:	002b      	movs	r3, r5
 800aee8:	4905      	ldr	r1, [pc, #20]	; (800af00 <__assert_func+0x38>)
 800aeea:	9402      	str	r4, [sp, #8]
 800aeec:	f000 f81c 	bl	800af28 <fiprintf>
 800aef0:	f000 fa3e 	bl	800b370 <abort>
 800aef4:	200000a0 	.word	0x200000a0
 800aef8:	0800bd37 	.word	0x0800bd37
 800aefc:	0800bd72 	.word	0x0800bd72
 800af00:	0800bd44 	.word	0x0800bd44

0800af04 <_close_r>:
 800af04:	2300      	movs	r3, #0
 800af06:	b570      	push	{r4, r5, r6, lr}
 800af08:	4d06      	ldr	r5, [pc, #24]	; (800af24 <_close_r+0x20>)
 800af0a:	0004      	movs	r4, r0
 800af0c:	0008      	movs	r0, r1
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	f7f7 fe81 	bl	8002c16 <_close>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d103      	bne.n	800af20 <_close_r+0x1c>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d000      	beq.n	800af20 <_close_r+0x1c>
 800af1e:	6023      	str	r3, [r4, #0]
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	20000ec4 	.word	0x20000ec4

0800af28 <fiprintf>:
 800af28:	b40e      	push	{r1, r2, r3}
 800af2a:	b503      	push	{r0, r1, lr}
 800af2c:	0001      	movs	r1, r0
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	4804      	ldr	r0, [pc, #16]	; (800af44 <fiprintf+0x1c>)
 800af32:	cb04      	ldmia	r3!, {r2}
 800af34:	6800      	ldr	r0, [r0, #0]
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f000 f8cc 	bl	800b0d4 <_vfiprintf_r>
 800af3c:	b002      	add	sp, #8
 800af3e:	bc08      	pop	{r3}
 800af40:	b003      	add	sp, #12
 800af42:	4718      	bx	r3
 800af44:	200000a0 	.word	0x200000a0

0800af48 <_fstat_r>:
 800af48:	2300      	movs	r3, #0
 800af4a:	b570      	push	{r4, r5, r6, lr}
 800af4c:	4d06      	ldr	r5, [pc, #24]	; (800af68 <_fstat_r+0x20>)
 800af4e:	0004      	movs	r4, r0
 800af50:	0008      	movs	r0, r1
 800af52:	0011      	movs	r1, r2
 800af54:	602b      	str	r3, [r5, #0]
 800af56:	f7f7 fe68 	bl	8002c2a <_fstat>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d103      	bne.n	800af66 <_fstat_r+0x1e>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d000      	beq.n	800af66 <_fstat_r+0x1e>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	20000ec4 	.word	0x20000ec4

0800af6c <_isatty_r>:
 800af6c:	2300      	movs	r3, #0
 800af6e:	b570      	push	{r4, r5, r6, lr}
 800af70:	4d06      	ldr	r5, [pc, #24]	; (800af8c <_isatty_r+0x20>)
 800af72:	0004      	movs	r4, r0
 800af74:	0008      	movs	r0, r1
 800af76:	602b      	str	r3, [r5, #0]
 800af78:	f7f7 fe65 	bl	8002c46 <_isatty>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d103      	bne.n	800af88 <_isatty_r+0x1c>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d000      	beq.n	800af88 <_isatty_r+0x1c>
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	bd70      	pop	{r4, r5, r6, pc}
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	20000ec4 	.word	0x20000ec4

0800af90 <_lseek_r>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	0004      	movs	r4, r0
 800af94:	0008      	movs	r0, r1
 800af96:	0011      	movs	r1, r2
 800af98:	001a      	movs	r2, r3
 800af9a:	2300      	movs	r3, #0
 800af9c:	4d05      	ldr	r5, [pc, #20]	; (800afb4 <_lseek_r+0x24>)
 800af9e:	602b      	str	r3, [r5, #0]
 800afa0:	f7f7 fe5a 	bl	8002c58 <_lseek>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d103      	bne.n	800afb0 <_lseek_r+0x20>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d000      	beq.n	800afb0 <_lseek_r+0x20>
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	20000ec4 	.word	0x20000ec4

0800afb8 <malloc>:
 800afb8:	b510      	push	{r4, lr}
 800afba:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <malloc+0x10>)
 800afbc:	0001      	movs	r1, r0
 800afbe:	6818      	ldr	r0, [r3, #0]
 800afc0:	f7ff fb8c 	bl	800a6dc <_malloc_r>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	200000a0 	.word	0x200000a0

0800afcc <memchr>:
 800afcc:	b2c9      	uxtb	r1, r1
 800afce:	1882      	adds	r2, r0, r2
 800afd0:	4290      	cmp	r0, r2
 800afd2:	d101      	bne.n	800afd8 <memchr+0xc>
 800afd4:	2000      	movs	r0, #0
 800afd6:	4770      	bx	lr
 800afd8:	7803      	ldrb	r3, [r0, #0]
 800afda:	428b      	cmp	r3, r1
 800afdc:	d0fb      	beq.n	800afd6 <memchr+0xa>
 800afde:	3001      	adds	r0, #1
 800afe0:	e7f6      	b.n	800afd0 <memchr+0x4>

0800afe2 <memmove>:
 800afe2:	b510      	push	{r4, lr}
 800afe4:	4288      	cmp	r0, r1
 800afe6:	d902      	bls.n	800afee <memmove+0xc>
 800afe8:	188b      	adds	r3, r1, r2
 800afea:	4298      	cmp	r0, r3
 800afec:	d303      	bcc.n	800aff6 <memmove+0x14>
 800afee:	2300      	movs	r3, #0
 800aff0:	e007      	b.n	800b002 <memmove+0x20>
 800aff2:	5c8b      	ldrb	r3, [r1, r2]
 800aff4:	5483      	strb	r3, [r0, r2]
 800aff6:	3a01      	subs	r2, #1
 800aff8:	d2fb      	bcs.n	800aff2 <memmove+0x10>
 800affa:	bd10      	pop	{r4, pc}
 800affc:	5ccc      	ldrb	r4, [r1, r3]
 800affe:	54c4      	strb	r4, [r0, r3]
 800b000:	3301      	adds	r3, #1
 800b002:	429a      	cmp	r2, r3
 800b004:	d1fa      	bne.n	800affc <memmove+0x1a>
 800b006:	e7f8      	b.n	800affa <memmove+0x18>

0800b008 <__malloc_lock>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	4802      	ldr	r0, [pc, #8]	; (800b014 <__malloc_lock+0xc>)
 800b00c:	f7fe fd83 	bl	8009b16 <__retarget_lock_acquire_recursive>
 800b010:	bd10      	pop	{r4, pc}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	20000eb8 	.word	0x20000eb8

0800b018 <__malloc_unlock>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	4802      	ldr	r0, [pc, #8]	; (800b024 <__malloc_unlock+0xc>)
 800b01c:	f7fe fd7c 	bl	8009b18 <__retarget_lock_release_recursive>
 800b020:	bd10      	pop	{r4, pc}
 800b022:	46c0      	nop			; (mov r8, r8)
 800b024:	20000eb8 	.word	0x20000eb8

0800b028 <_realloc_r>:
 800b028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b02a:	0007      	movs	r7, r0
 800b02c:	000e      	movs	r6, r1
 800b02e:	0014      	movs	r4, r2
 800b030:	2900      	cmp	r1, #0
 800b032:	d105      	bne.n	800b040 <_realloc_r+0x18>
 800b034:	0011      	movs	r1, r2
 800b036:	f7ff fb51 	bl	800a6dc <_malloc_r>
 800b03a:	0005      	movs	r5, r0
 800b03c:	0028      	movs	r0, r5
 800b03e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b040:	2a00      	cmp	r2, #0
 800b042:	d103      	bne.n	800b04c <_realloc_r+0x24>
 800b044:	f7ff fade 	bl	800a604 <_free_r>
 800b048:	0025      	movs	r5, r4
 800b04a:	e7f7      	b.n	800b03c <_realloc_r+0x14>
 800b04c:	f000 f997 	bl	800b37e <_malloc_usable_size_r>
 800b050:	9001      	str	r0, [sp, #4]
 800b052:	4284      	cmp	r4, r0
 800b054:	d803      	bhi.n	800b05e <_realloc_r+0x36>
 800b056:	0035      	movs	r5, r6
 800b058:	0843      	lsrs	r3, r0, #1
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	d3ee      	bcc.n	800b03c <_realloc_r+0x14>
 800b05e:	0021      	movs	r1, r4
 800b060:	0038      	movs	r0, r7
 800b062:	f7ff fb3b 	bl	800a6dc <_malloc_r>
 800b066:	1e05      	subs	r5, r0, #0
 800b068:	d0e8      	beq.n	800b03c <_realloc_r+0x14>
 800b06a:	9b01      	ldr	r3, [sp, #4]
 800b06c:	0022      	movs	r2, r4
 800b06e:	429c      	cmp	r4, r3
 800b070:	d900      	bls.n	800b074 <_realloc_r+0x4c>
 800b072:	001a      	movs	r2, r3
 800b074:	0031      	movs	r1, r6
 800b076:	0028      	movs	r0, r5
 800b078:	f7fc ff22 	bl	8007ec0 <memcpy>
 800b07c:	0031      	movs	r1, r6
 800b07e:	0038      	movs	r0, r7
 800b080:	f7ff fac0 	bl	800a604 <_free_r>
 800b084:	e7da      	b.n	800b03c <_realloc_r+0x14>

0800b086 <__sfputc_r>:
 800b086:	6893      	ldr	r3, [r2, #8]
 800b088:	b510      	push	{r4, lr}
 800b08a:	3b01      	subs	r3, #1
 800b08c:	6093      	str	r3, [r2, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	da04      	bge.n	800b09c <__sfputc_r+0x16>
 800b092:	6994      	ldr	r4, [r2, #24]
 800b094:	42a3      	cmp	r3, r4
 800b096:	db07      	blt.n	800b0a8 <__sfputc_r+0x22>
 800b098:	290a      	cmp	r1, #10
 800b09a:	d005      	beq.n	800b0a8 <__sfputc_r+0x22>
 800b09c:	6813      	ldr	r3, [r2, #0]
 800b09e:	1c58      	adds	r0, r3, #1
 800b0a0:	6010      	str	r0, [r2, #0]
 800b0a2:	7019      	strb	r1, [r3, #0]
 800b0a4:	0008      	movs	r0, r1
 800b0a6:	bd10      	pop	{r4, pc}
 800b0a8:	f7fd ff24 	bl	8008ef4 <__swbuf_r>
 800b0ac:	0001      	movs	r1, r0
 800b0ae:	e7f9      	b.n	800b0a4 <__sfputc_r+0x1e>

0800b0b0 <__sfputs_r>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	0006      	movs	r6, r0
 800b0b4:	000f      	movs	r7, r1
 800b0b6:	0014      	movs	r4, r2
 800b0b8:	18d5      	adds	r5, r2, r3
 800b0ba:	42ac      	cmp	r4, r5
 800b0bc:	d101      	bne.n	800b0c2 <__sfputs_r+0x12>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e007      	b.n	800b0d2 <__sfputs_r+0x22>
 800b0c2:	7821      	ldrb	r1, [r4, #0]
 800b0c4:	003a      	movs	r2, r7
 800b0c6:	0030      	movs	r0, r6
 800b0c8:	f7ff ffdd 	bl	800b086 <__sfputc_r>
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	d1f3      	bne.n	800b0ba <__sfputs_r+0xa>
 800b0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0d4 <_vfiprintf_r>:
 800b0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d6:	b0a1      	sub	sp, #132	; 0x84
 800b0d8:	0006      	movs	r6, r0
 800b0da:	000c      	movs	r4, r1
 800b0dc:	001f      	movs	r7, r3
 800b0de:	9203      	str	r2, [sp, #12]
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d004      	beq.n	800b0ee <_vfiprintf_r+0x1a>
 800b0e4:	6983      	ldr	r3, [r0, #24]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <_vfiprintf_r+0x1a>
 800b0ea:	f7fe f8ff 	bl	80092ec <__sinit>
 800b0ee:	4b8e      	ldr	r3, [pc, #568]	; (800b328 <_vfiprintf_r+0x254>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d11c      	bne.n	800b12e <_vfiprintf_r+0x5a>
 800b0f4:	6874      	ldr	r4, [r6, #4]
 800b0f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0f8:	07db      	lsls	r3, r3, #31
 800b0fa:	d405      	bmi.n	800b108 <_vfiprintf_r+0x34>
 800b0fc:	89a3      	ldrh	r3, [r4, #12]
 800b0fe:	059b      	lsls	r3, r3, #22
 800b100:	d402      	bmi.n	800b108 <_vfiprintf_r+0x34>
 800b102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b104:	f7fe fd07 	bl	8009b16 <__retarget_lock_acquire_recursive>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	071b      	lsls	r3, r3, #28
 800b10c:	d502      	bpl.n	800b114 <_vfiprintf_r+0x40>
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11d      	bne.n	800b150 <_vfiprintf_r+0x7c>
 800b114:	0021      	movs	r1, r4
 800b116:	0030      	movs	r0, r6
 800b118:	f7fd ff42 	bl	8008fa0 <__swsetup_r>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d017      	beq.n	800b150 <_vfiprintf_r+0x7c>
 800b120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d50d      	bpl.n	800b142 <_vfiprintf_r+0x6e>
 800b126:	2001      	movs	r0, #1
 800b128:	4240      	negs	r0, r0
 800b12a:	b021      	add	sp, #132	; 0x84
 800b12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12e:	4b7f      	ldr	r3, [pc, #508]	; (800b32c <_vfiprintf_r+0x258>)
 800b130:	429c      	cmp	r4, r3
 800b132:	d101      	bne.n	800b138 <_vfiprintf_r+0x64>
 800b134:	68b4      	ldr	r4, [r6, #8]
 800b136:	e7de      	b.n	800b0f6 <_vfiprintf_r+0x22>
 800b138:	4b7d      	ldr	r3, [pc, #500]	; (800b330 <_vfiprintf_r+0x25c>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d1db      	bne.n	800b0f6 <_vfiprintf_r+0x22>
 800b13e:	68f4      	ldr	r4, [r6, #12]
 800b140:	e7d9      	b.n	800b0f6 <_vfiprintf_r+0x22>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	059b      	lsls	r3, r3, #22
 800b146:	d4ee      	bmi.n	800b126 <_vfiprintf_r+0x52>
 800b148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b14a:	f7fe fce5 	bl	8009b18 <__retarget_lock_release_recursive>
 800b14e:	e7ea      	b.n	800b126 <_vfiprintf_r+0x52>
 800b150:	2300      	movs	r3, #0
 800b152:	ad08      	add	r5, sp, #32
 800b154:	616b      	str	r3, [r5, #20]
 800b156:	3320      	adds	r3, #32
 800b158:	766b      	strb	r3, [r5, #25]
 800b15a:	3310      	adds	r3, #16
 800b15c:	76ab      	strb	r3, [r5, #26]
 800b15e:	9707      	str	r7, [sp, #28]
 800b160:	9f03      	ldr	r7, [sp, #12]
 800b162:	783b      	ldrb	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <_vfiprintf_r+0x98>
 800b168:	2b25      	cmp	r3, #37	; 0x25
 800b16a:	d14e      	bne.n	800b20a <_vfiprintf_r+0x136>
 800b16c:	9b03      	ldr	r3, [sp, #12]
 800b16e:	1afb      	subs	r3, r7, r3
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	429f      	cmp	r7, r3
 800b176:	d00d      	beq.n	800b194 <_vfiprintf_r+0xc0>
 800b178:	9b05      	ldr	r3, [sp, #20]
 800b17a:	0021      	movs	r1, r4
 800b17c:	0030      	movs	r0, r6
 800b17e:	9a03      	ldr	r2, [sp, #12]
 800b180:	f7ff ff96 	bl	800b0b0 <__sfputs_r>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d100      	bne.n	800b18a <_vfiprintf_r+0xb6>
 800b188:	e0b5      	b.n	800b2f6 <_vfiprintf_r+0x222>
 800b18a:	696a      	ldr	r2, [r5, #20]
 800b18c:	9b05      	ldr	r3, [sp, #20]
 800b18e:	4694      	mov	ip, r2
 800b190:	4463      	add	r3, ip
 800b192:	616b      	str	r3, [r5, #20]
 800b194:	783b      	ldrb	r3, [r7, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d100      	bne.n	800b19c <_vfiprintf_r+0xc8>
 800b19a:	e0ac      	b.n	800b2f6 <_vfiprintf_r+0x222>
 800b19c:	2201      	movs	r2, #1
 800b19e:	1c7b      	adds	r3, r7, #1
 800b1a0:	9303      	str	r3, [sp, #12]
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4252      	negs	r2, r2
 800b1a6:	606a      	str	r2, [r5, #4]
 800b1a8:	a904      	add	r1, sp, #16
 800b1aa:	3254      	adds	r2, #84	; 0x54
 800b1ac:	1852      	adds	r2, r2, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	60eb      	str	r3, [r5, #12]
 800b1b2:	60ab      	str	r3, [r5, #8]
 800b1b4:	7013      	strb	r3, [r2, #0]
 800b1b6:	65ab      	str	r3, [r5, #88]	; 0x58
 800b1b8:	9b03      	ldr	r3, [sp, #12]
 800b1ba:	2205      	movs	r2, #5
 800b1bc:	7819      	ldrb	r1, [r3, #0]
 800b1be:	485d      	ldr	r0, [pc, #372]	; (800b334 <_vfiprintf_r+0x260>)
 800b1c0:	f7ff ff04 	bl	800afcc <memchr>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1c5f      	adds	r7, r3, #1
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d120      	bne.n	800b20e <_vfiprintf_r+0x13a>
 800b1cc:	682a      	ldr	r2, [r5, #0]
 800b1ce:	06d3      	lsls	r3, r2, #27
 800b1d0:	d504      	bpl.n	800b1dc <_vfiprintf_r+0x108>
 800b1d2:	2353      	movs	r3, #83	; 0x53
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	185b      	adds	r3, r3, r1
 800b1d8:	2120      	movs	r1, #32
 800b1da:	7019      	strb	r1, [r3, #0]
 800b1dc:	0713      	lsls	r3, r2, #28
 800b1de:	d504      	bpl.n	800b1ea <_vfiprintf_r+0x116>
 800b1e0:	2353      	movs	r3, #83	; 0x53
 800b1e2:	a904      	add	r1, sp, #16
 800b1e4:	185b      	adds	r3, r3, r1
 800b1e6:	212b      	movs	r1, #43	; 0x2b
 800b1e8:	7019      	strb	r1, [r3, #0]
 800b1ea:	9b03      	ldr	r3, [sp, #12]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f0:	d016      	beq.n	800b220 <_vfiprintf_r+0x14c>
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68eb      	ldr	r3, [r5, #12]
 800b1f6:	9f03      	ldr	r7, [sp, #12]
 800b1f8:	783a      	ldrb	r2, [r7, #0]
 800b1fa:	1c78      	adds	r0, r7, #1
 800b1fc:	3a30      	subs	r2, #48	; 0x30
 800b1fe:	4684      	mov	ip, r0
 800b200:	2a09      	cmp	r2, #9
 800b202:	d94f      	bls.n	800b2a4 <_vfiprintf_r+0x1d0>
 800b204:	2900      	cmp	r1, #0
 800b206:	d111      	bne.n	800b22c <_vfiprintf_r+0x158>
 800b208:	e017      	b.n	800b23a <_vfiprintf_r+0x166>
 800b20a:	3701      	adds	r7, #1
 800b20c:	e7a9      	b.n	800b162 <_vfiprintf_r+0x8e>
 800b20e:	4b49      	ldr	r3, [pc, #292]	; (800b334 <_vfiprintf_r+0x260>)
 800b210:	682a      	ldr	r2, [r5, #0]
 800b212:	1ac0      	subs	r0, r0, r3
 800b214:	2301      	movs	r3, #1
 800b216:	4083      	lsls	r3, r0
 800b218:	4313      	orrs	r3, r2
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	9703      	str	r7, [sp, #12]
 800b21e:	e7cb      	b.n	800b1b8 <_vfiprintf_r+0xe4>
 800b220:	9b07      	ldr	r3, [sp, #28]
 800b222:	1d19      	adds	r1, r3, #4
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	9107      	str	r1, [sp, #28]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db01      	blt.n	800b230 <_vfiprintf_r+0x15c>
 800b22c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b22e:	e004      	b.n	800b23a <_vfiprintf_r+0x166>
 800b230:	425b      	negs	r3, r3
 800b232:	60eb      	str	r3, [r5, #12]
 800b234:	2302      	movs	r3, #2
 800b236:	4313      	orrs	r3, r2
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	783b      	ldrb	r3, [r7, #0]
 800b23c:	2b2e      	cmp	r3, #46	; 0x2e
 800b23e:	d10a      	bne.n	800b256 <_vfiprintf_r+0x182>
 800b240:	787b      	ldrb	r3, [r7, #1]
 800b242:	2b2a      	cmp	r3, #42	; 0x2a
 800b244:	d137      	bne.n	800b2b6 <_vfiprintf_r+0x1e2>
 800b246:	9b07      	ldr	r3, [sp, #28]
 800b248:	3702      	adds	r7, #2
 800b24a:	1d1a      	adds	r2, r3, #4
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	9207      	str	r2, [sp, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	db2d      	blt.n	800b2b0 <_vfiprintf_r+0x1dc>
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
 800b256:	2203      	movs	r2, #3
 800b258:	7839      	ldrb	r1, [r7, #0]
 800b25a:	4837      	ldr	r0, [pc, #220]	; (800b338 <_vfiprintf_r+0x264>)
 800b25c:	f7ff feb6 	bl	800afcc <memchr>
 800b260:	2800      	cmp	r0, #0
 800b262:	d007      	beq.n	800b274 <_vfiprintf_r+0x1a0>
 800b264:	4b34      	ldr	r3, [pc, #208]	; (800b338 <_vfiprintf_r+0x264>)
 800b266:	682a      	ldr	r2, [r5, #0]
 800b268:	1ac0      	subs	r0, r0, r3
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	4083      	lsls	r3, r0
 800b26e:	4313      	orrs	r3, r2
 800b270:	3701      	adds	r7, #1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	7839      	ldrb	r1, [r7, #0]
 800b276:	1c7b      	adds	r3, r7, #1
 800b278:	2206      	movs	r2, #6
 800b27a:	4830      	ldr	r0, [pc, #192]	; (800b33c <_vfiprintf_r+0x268>)
 800b27c:	9303      	str	r3, [sp, #12]
 800b27e:	7629      	strb	r1, [r5, #24]
 800b280:	f7ff fea4 	bl	800afcc <memchr>
 800b284:	2800      	cmp	r0, #0
 800b286:	d045      	beq.n	800b314 <_vfiprintf_r+0x240>
 800b288:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <_vfiprintf_r+0x26c>)
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d127      	bne.n	800b2de <_vfiprintf_r+0x20a>
 800b28e:	2207      	movs	r2, #7
 800b290:	9b07      	ldr	r3, [sp, #28]
 800b292:	3307      	adds	r3, #7
 800b294:	4393      	bics	r3, r2
 800b296:	3308      	adds	r3, #8
 800b298:	9307      	str	r3, [sp, #28]
 800b29a:	696b      	ldr	r3, [r5, #20]
 800b29c:	9a04      	ldr	r2, [sp, #16]
 800b29e:	189b      	adds	r3, r3, r2
 800b2a0:	616b      	str	r3, [r5, #20]
 800b2a2:	e75d      	b.n	800b160 <_vfiprintf_r+0x8c>
 800b2a4:	210a      	movs	r1, #10
 800b2a6:	434b      	muls	r3, r1
 800b2a8:	4667      	mov	r7, ip
 800b2aa:	189b      	adds	r3, r3, r2
 800b2ac:	3909      	subs	r1, #9
 800b2ae:	e7a3      	b.n	800b1f8 <_vfiprintf_r+0x124>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	425b      	negs	r3, r3
 800b2b4:	e7ce      	b.n	800b254 <_vfiprintf_r+0x180>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	001a      	movs	r2, r3
 800b2ba:	3701      	adds	r7, #1
 800b2bc:	606b      	str	r3, [r5, #4]
 800b2be:	7839      	ldrb	r1, [r7, #0]
 800b2c0:	1c78      	adds	r0, r7, #1
 800b2c2:	3930      	subs	r1, #48	; 0x30
 800b2c4:	4684      	mov	ip, r0
 800b2c6:	2909      	cmp	r1, #9
 800b2c8:	d903      	bls.n	800b2d2 <_vfiprintf_r+0x1fe>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0c3      	beq.n	800b256 <_vfiprintf_r+0x182>
 800b2ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b2d0:	e7c1      	b.n	800b256 <_vfiprintf_r+0x182>
 800b2d2:	230a      	movs	r3, #10
 800b2d4:	435a      	muls	r2, r3
 800b2d6:	4667      	mov	r7, ip
 800b2d8:	1852      	adds	r2, r2, r1
 800b2da:	3b09      	subs	r3, #9
 800b2dc:	e7ef      	b.n	800b2be <_vfiprintf_r+0x1ea>
 800b2de:	ab07      	add	r3, sp, #28
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	0022      	movs	r2, r4
 800b2e4:	0029      	movs	r1, r5
 800b2e6:	0030      	movs	r0, r6
 800b2e8:	4b16      	ldr	r3, [pc, #88]	; (800b344 <_vfiprintf_r+0x270>)
 800b2ea:	e000      	b.n	800b2ee <_vfiprintf_r+0x21a>
 800b2ec:	bf00      	nop
 800b2ee:	9004      	str	r0, [sp, #16]
 800b2f0:	9b04      	ldr	r3, [sp, #16]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	d1d1      	bne.n	800b29a <_vfiprintf_r+0x1c6>
 800b2f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f8:	07db      	lsls	r3, r3, #31
 800b2fa:	d405      	bmi.n	800b308 <_vfiprintf_r+0x234>
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	059b      	lsls	r3, r3, #22
 800b300:	d402      	bmi.n	800b308 <_vfiprintf_r+0x234>
 800b302:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b304:	f7fe fc08 	bl	8009b18 <__retarget_lock_release_recursive>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	065b      	lsls	r3, r3, #25
 800b30c:	d500      	bpl.n	800b310 <_vfiprintf_r+0x23c>
 800b30e:	e70a      	b.n	800b126 <_vfiprintf_r+0x52>
 800b310:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b312:	e70a      	b.n	800b12a <_vfiprintf_r+0x56>
 800b314:	ab07      	add	r3, sp, #28
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	0022      	movs	r2, r4
 800b31a:	0029      	movs	r1, r5
 800b31c:	0030      	movs	r0, r6
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <_vfiprintf_r+0x270>)
 800b320:	f7ff fc24 	bl	800ab6c <_printf_i>
 800b324:	e7e3      	b.n	800b2ee <_vfiprintf_r+0x21a>
 800b326:	46c0      	nop			; (mov r8, r8)
 800b328:	0800bac4 	.word	0x0800bac4
 800b32c:	0800bae4 	.word	0x0800bae4
 800b330:	0800baa4 	.word	0x0800baa4
 800b334:	0800bd04 	.word	0x0800bd04
 800b338:	0800bd0a 	.word	0x0800bd0a
 800b33c:	0800bd0e 	.word	0x0800bd0e
 800b340:	00000000 	.word	0x00000000
 800b344:	0800b0b1 	.word	0x0800b0b1

0800b348 <_read_r>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	0004      	movs	r4, r0
 800b34c:	0008      	movs	r0, r1
 800b34e:	0011      	movs	r1, r2
 800b350:	001a      	movs	r2, r3
 800b352:	2300      	movs	r3, #0
 800b354:	4d05      	ldr	r5, [pc, #20]	; (800b36c <_read_r+0x24>)
 800b356:	602b      	str	r3, [r5, #0]
 800b358:	f7f7 fc24 	bl	8002ba4 <_read>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d103      	bne.n	800b368 <_read_r+0x20>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d000      	beq.n	800b368 <_read_r+0x20>
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	bd70      	pop	{r4, r5, r6, pc}
 800b36a:	46c0      	nop			; (mov r8, r8)
 800b36c:	20000ec4 	.word	0x20000ec4

0800b370 <abort>:
 800b370:	2006      	movs	r0, #6
 800b372:	b510      	push	{r4, lr}
 800b374:	f000 f836 	bl	800b3e4 <raise>
 800b378:	2001      	movs	r0, #1
 800b37a:	f7f7 fc07 	bl	8002b8c <_exit>

0800b37e <_malloc_usable_size_r>:
 800b37e:	1f0b      	subs	r3, r1, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	1f18      	subs	r0, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	da01      	bge.n	800b38c <_malloc_usable_size_r+0xe>
 800b388:	580b      	ldr	r3, [r1, r0]
 800b38a:	18c0      	adds	r0, r0, r3
 800b38c:	4770      	bx	lr

0800b38e <_raise_r>:
 800b38e:	b570      	push	{r4, r5, r6, lr}
 800b390:	0004      	movs	r4, r0
 800b392:	000d      	movs	r5, r1
 800b394:	291f      	cmp	r1, #31
 800b396:	d904      	bls.n	800b3a2 <_raise_r+0x14>
 800b398:	2316      	movs	r3, #22
 800b39a:	6003      	str	r3, [r0, #0]
 800b39c:	2001      	movs	r0, #1
 800b39e:	4240      	negs	r0, r0
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <_raise_r+0x24>
 800b3a8:	008a      	lsls	r2, r1, #2
 800b3aa:	189b      	adds	r3, r3, r2
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	2a00      	cmp	r2, #0
 800b3b0:	d108      	bne.n	800b3c4 <_raise_r+0x36>
 800b3b2:	0020      	movs	r0, r4
 800b3b4:	f000 f832 	bl	800b41c <_getpid_r>
 800b3b8:	002a      	movs	r2, r5
 800b3ba:	0001      	movs	r1, r0
 800b3bc:	0020      	movs	r0, r4
 800b3be:	f000 f81b 	bl	800b3f8 <_kill_r>
 800b3c2:	e7ed      	b.n	800b3a0 <_raise_r+0x12>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	2a01      	cmp	r2, #1
 800b3c8:	d0ea      	beq.n	800b3a0 <_raise_r+0x12>
 800b3ca:	1c51      	adds	r1, r2, #1
 800b3cc:	d103      	bne.n	800b3d6 <_raise_r+0x48>
 800b3ce:	2316      	movs	r3, #22
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	e7e4      	b.n	800b3a0 <_raise_r+0x12>
 800b3d6:	2400      	movs	r4, #0
 800b3d8:	0028      	movs	r0, r5
 800b3da:	601c      	str	r4, [r3, #0]
 800b3dc:	4790      	blx	r2
 800b3de:	0020      	movs	r0, r4
 800b3e0:	e7de      	b.n	800b3a0 <_raise_r+0x12>
	...

0800b3e4 <raise>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	4b03      	ldr	r3, [pc, #12]	; (800b3f4 <raise+0x10>)
 800b3e8:	0001      	movs	r1, r0
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	f7ff ffcf 	bl	800b38e <_raise_r>
 800b3f0:	bd10      	pop	{r4, pc}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	200000a0 	.word	0x200000a0

0800b3f8 <_kill_r>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b570      	push	{r4, r5, r6, lr}
 800b3fc:	4d06      	ldr	r5, [pc, #24]	; (800b418 <_kill_r+0x20>)
 800b3fe:	0004      	movs	r4, r0
 800b400:	0008      	movs	r0, r1
 800b402:	0011      	movs	r1, r2
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	f7f7 fbb1 	bl	8002b6c <_kill>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d103      	bne.n	800b416 <_kill_r+0x1e>
 800b40e:	682b      	ldr	r3, [r5, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d000      	beq.n	800b416 <_kill_r+0x1e>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	20000ec4 	.word	0x20000ec4

0800b41c <_getpid_r>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	f7f7 fb9f 	bl	8002b60 <_getpid>
 800b422:	bd10      	pop	{r4, pc}

0800b424 <_init>:
 800b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42a:	bc08      	pop	{r3}
 800b42c:	469e      	mov	lr, r3
 800b42e:	4770      	bx	lr

0800b430 <_fini>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	46c0      	nop			; (mov r8, r8)
 800b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b436:	bc08      	pop	{r3}
 800b438:	469e      	mov	lr, r3
 800b43a:	4770      	bx	lr
